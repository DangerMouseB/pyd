Running pre-generate commands for autowrap:pynih...
/Users/david/.dub/packages/dpp-0.4.0/dpp/bin/d++ --preprocess-only --include-path /Library/Frameworks/Python.framework/Versions/3.8/include/python3.8 source/python/raw.d
Error: Could not run `cpp source/python/raw.d.tmp`:
source/python/raw.d.tmp:14404:87: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___unreachable_ok_pop = `enum __unreachable_ok_pop = _Pragma ( "clang diagnostic pop" );`;
                                                                                      ^
source/python/raw.d.tmp:14414:89: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___unreachable_ok_push = `enum __unreachable_ok_push = _Pragma ( "clang diagnostic push" ) _Pragma ( "clang diagnostic ignored \"-Wunreachable-code\"" );`;
                                                                                        ^
source/python/raw.d.tmp:14414:125: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___unreachable_ok_push = `enum __unreachable_ok_push = _Pragma ( "clang diagnostic push" ) _Pragma ( "clang diagnostic ignored \"-Wunreachable-code\"" );`;
                                                                                                                            ^
source/python/raw.d.tmp:29840:89: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___API_UNAVAILABLE_END = `enum __API_UNAVAILABLE_END = _Pragma ( "clang attribute pop" );`;
                                                                                        ^
source/python/raw.d.tmp:29846:44: error: _Pragma takes a parenthesized string literal
    #define __API_UNAVAILABLE_BEGIN( ... ) _Pragma ( "clang attribute push" ) __API_UNAVAILABLE_BEGIN_GET_MACRO ( __VA_ARGS__ , __API_UNAVAILABLE_BEGIN7 , __API_UNAVAILABLE_BEGIN6 , __API_UNAVAILABLE_BEGIN5 , __API_UNAVAILABLE_BEGIN4 , __API_UNAVAILABLE_BEGIN3 , __API_UNAVAILABLE_BEGIN2 , __API_UNAVAILABLE_BEGIN1 , 0 ) ( __VA_ARGS__ )
                                           ^
source/python/raw.d.tmp:29854:121: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___API_DEPRECATED_WITH_REPLACEMENT_END = `enum __API_DEPRECATED_WITH_REPLACEMENT_END = _Pragma ( "clang attribute pop" );`;
                                                                                                                        ^
source/python/raw.d.tmp:29860:60: error: _Pragma takes a parenthesized string literal
    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN( ... ) _Pragma ( "clang attribute push" ) __API_DEPRECATED_BEGIN_REP_GET_MACRO ( __VA_ARGS__ , __API_DEPRECATED_BEGIN_REP8 , __API_DEPRECATED_BEGIN_REP7 , __API_DEPRECATED_BEGIN_REP6 , __API_DEPRECATED_BEGIN_REP5 , __API_DEPRECATED_BEGIN_REP4 , __API_DEPRECATED_BEGIN_REP3 , __API_DEPRECATED_BEGIN_REP2 , __API_DEPRECATED_BEGIN_REP1 , 0 ) ( __VA_ARGS__ )
                                                           ^
source/python/raw.d.tmp:29866:87: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___API_DEPRECATED_END = `enum __API_DEPRECATED_END = _Pragma ( "clang attribute pop" );`;
                                                                                      ^
source/python/raw.d.tmp:29884:85: error: _Pragma takes a parenthesized string literal
        private enum enumMixinStr___API_AVAILABLE_END = `enum __API_AVAILABLE_END = _Pragma ( "clang attribute pop" );`;
                                                                                    ^
source/python/raw.d.tmp:29890:42: error: _Pragma takes a parenthesized string literal
    #define __API_AVAILABLE_BEGIN( ... ) _Pragma ( "clang attribute push" ) __API_AVAILABLE_BEGIN_GET_MACRO ( __VA_ARGS__ , __API_AVAILABLE_BEGIN7 , __API_AVAILABLE_BEGIN6 , __API_AVAILABLE_BEGIN5 , __API_AVAILABLE_BEGIN4 , __API_AVAILABLE_BEGIN3 , __API_AVAILABLE_BEGIN2 , __API_AVAILABLE_BEGIN1 , 0 ) ( __VA_ARGS__ )
                                         ^
source/python/raw.d.tmp:32585:22: warning: missing terminating ' character [-Winvalid-pp-token]
    // FIXME: d++ can't translate this due to `;` for an empty statement
                     ^
# 1 "source/python/raw.d.tmp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 362 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "source/python/raw.d.tmp" 2
module python.raw;


        import core.stdc.config;
        import core.stdc.stdarg: va_list;
        static import core.simd;
        static import std.conv;

        struct Int128 { long lower; long upper; }
        struct UInt128 { ulong lower; ulong upper; }

        struct __locale_data { int dummy; }  // FIXME
        

    
alias _Bool = bool;
struct dpp {
    static struct Opaque(int N) {
        void[N] bytes;
    }
    // Replacement for the gcc/clang intrinsic
    static bool isEmpty(T)() {
        return T.tupleof.length == 0;
    }
    static struct Move(T) {
        T* ptr;
    }
    // dmd bug causes a crash if T is passed by value.
    // Works fine with ldc.
    static auto move(T)(ref T value) {
        return Move!T(&value);
    }
    mixin template EnumD(string name, T, string prefix) if(is(T == enum)) {
        private static string _memberMixinStr(string member) {
            import std.conv: text;
            import std.array: replace;
            return text(`    `, member.replace(prefix, ""), ` = `, T.stringof, `.`, member, `,`);
        }
        private static string _enumMixinStr() {
            import std.array: join;
            string[] ret;
            ret ~= "enum " ~ name ~ "{";
            static foreach(member; __traits(allMembers, T)) {
                ret ~= _memberMixinStr(member);
            }
            ret ~= "}";
            return ret.join("\n");
        }
        mixin(_enumMixinStr());
    }
}
    
extern(C)
{
    void _PyWeakref_ClearRef(_PyWeakReference*) @nogc nothrow;
    c_long _PyWeakref_GetWeakrefCount(_PyWeakReference*) @nogc nothrow;
    _object* PyWeakref_GetObject(_object*) @nogc nothrow;
    _object* PyWeakref_NewProxy(_object*, _object*) @nogc nothrow;
    _object* PyWeakref_NewRef(_object*, _object*) @nogc nothrow;
    extern __gshared _typeobject _PyWeakref_CallableProxyType;
    extern __gshared _typeobject _PyWeakref_ProxyType;
    extern __gshared _typeobject _PyWeakref_RefType;
    struct _PyWeakReference
    {
        _object ob_base;
        _object* wr_object;
        _object* wr_callback;
        c_long hash;
        _PyWeakReference* wr_prev;
        _PyWeakReference* wr_next;
    }
    alias PyWeakReference = _PyWeakReference;
    void _PyErr_WarnUnawaitedCoroutine(_object*) @nogc nothrow;
    int PyErr_WarnExplicitFormat(_object*, const(char)*, int, const(char)*, _object*, const(char)*, ...) @nogc nothrow;
    int PyErr_WarnExplicit(_object*, const(char)*, const(char)*, int, const(char)*, _object*) @nogc nothrow;
    int PyErr_WarnExplicitObject(_object*, _object*, _object*, int, _object*, _object*) @nogc nothrow;
    int PyErr_ResourceWarning(_object*, c_long, const(char)*, ...) @nogc nothrow;
    int PyErr_WarnFormat(_object*, c_long, const(char)*, ...) @nogc nothrow;
    int PyErr_WarnEx(_object*, const(char)*, c_long) @nogc nothrow;
    _object* _PyWarnings_Init() @nogc nothrow;
    int PyUnicode_IsIdentifier(_object*) @nogc nothrow;
    int PyUnicode_Contains(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_Format(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_RichCompare(_object*, _object*, int) @nogc nothrow;
    int PyUnicode_CompareWithASCIIString(_object*, const(char)*) @nogc nothrow;
    int PyUnicode_Compare(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_Replace(_object*, _object*, _object*, c_long) @nogc nothrow;
    c_long PyUnicode_Count(_object*, _object*, c_long, c_long) @nogc nothrow;
    c_long PyUnicode_FindChar(_object*, uint, c_long, c_long, int) @nogc nothrow;
    c_long PyUnicode_Find(_object*, _object*, c_long, c_long, int) @nogc nothrow;
    c_long PyUnicode_Tailmatch(_object*, _object*, c_long, c_long, int) @nogc nothrow;
    _object* PyUnicode_Join(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_Translate(_object*, _object*, const(char)*) @nogc nothrow;
    _object* PyUnicode_RSplit(_object*, _object*, c_long) @nogc nothrow;
    _object* PyUnicode_RPartition(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_Partition(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_Splitlines(_object*, int) @nogc nothrow;
    _object* PyUnicode_Split(_object*, _object*, c_long) @nogc nothrow;
    void PyUnicode_AppendAndDel(_object**, _object*) @nogc nothrow;
    void PyUnicode_Append(_object**, _object*) @nogc nothrow;
    _object* PyUnicode_Concat(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_EncodeFSDefault(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeFSDefaultAndSize(const(char)*, c_long) @nogc nothrow;
    _object* PyUnicode_DecodeFSDefault(const(char)*) @nogc nothrow;
    int PyUnicode_FSDecoder(_object*, void*) @nogc nothrow;
    int PyUnicode_FSConverter(_object*, void*) @nogc nothrow;
    _object* PyUnicode_EncodeLocale(_object*, const(char)*) @nogc nothrow;
    _object* PyUnicode_DecodeLocale(const(char)*, const(char)*) @nogc nothrow;
    _object* PyUnicode_DecodeLocaleAndSize(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsCharmapString(_object*, _object*) @nogc nothrow;
    _object* PyUnicode_DecodeCharmap(const(char)*, c_long, _object*, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsASCIIString(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeASCII(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsLatin1String(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeLatin1(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsRawUnicodeEscapeString(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeRawUnicodeEscape(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsUnicodeEscapeString(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeUnicodeEscape(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsUTF16String(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF16Stateful(const(char)*, c_long, const(char)*, int*, c_long*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF16(const(char)*, c_long, const(char)*, int*) @nogc nothrow;
    _object* PyUnicode_AsUTF32String(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF32Stateful(const(char)*, c_long, const(char)*, int*, c_long*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF32(const(char)*, c_long, const(char)*, int*) @nogc nothrow;
    _object* PyUnicode_AsUTF8String(_object*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF8Stateful(const(char)*, c_long, const(char)*, c_long*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF8(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF7Stateful(const(char)*, c_long, const(char)*, c_long*) @nogc nothrow;
    _object* PyUnicode_DecodeUTF7(const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicode_BuildEncodingMap(_object*) @nogc nothrow;
    _object* PyUnicode_AsEncodedUnicode(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsEncodedString(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsEncodedObject(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsDecodedUnicode(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyUnicode_AsDecodedObject(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyUnicode_Decode(const(char)*, c_long, const(char)*, const(char)*) @nogc nothrow;
    const(char)* PyUnicode_GetDefaultEncoding() @nogc nothrow;
    int PyUnicode_ClearFreeList() @nogc nothrow;
    _object* PyUnicode_FromOrdinal(int) @nogc nothrow;
    int* PyUnicode_AsWideCharString(_object*, c_long*) @nogc nothrow;
    c_long PyUnicode_AsWideChar(_object*, int*, c_long) @nogc nothrow;
    _object* PyUnicode_FromWideChar(const(int)*, c_long) @nogc nothrow;
    _object* PyUnicode_InternFromString(const(char)*) @nogc nothrow;
    void PyUnicode_InternImmortal(_object**) @nogc nothrow;
    void PyUnicode_InternInPlace(_object**) @nogc nothrow;
    _object* PyUnicode_FromFormat(const(char)*, ...) @nogc nothrow;
    _object* PyUnicode_FromFormatV(const(char)*, va_list*) @nogc nothrow;
    _object* PyUnicode_FromObject(_object*) @nogc nothrow;
    _object* PyUnicode_FromEncodedObject(_object*, const(char)*, const(char)*) @nogc nothrow;
    int PyUnicode_Resize(_object**, c_long) @nogc nothrow;
    int PyUnicode_WriteChar(_object*, c_long, uint) @nogc nothrow;
    uint PyUnicode_ReadChar(_object*, c_long) @nogc nothrow;
    c_long PyUnicode_GetSize(_object*) @nogc nothrow;
    c_long PyUnicode_GetLength(_object*) @nogc nothrow;
    uint* PyUnicode_AsUCS4Copy(_object*) @nogc nothrow;
    uint* PyUnicode_AsUCS4(_object*, uint*, c_long, int) @nogc nothrow;
    _object* PyUnicode_Substring(_object*, c_long, c_long) @nogc nothrow;
    _object* PyUnicode_FromString(const(char)*) @nogc nothrow;
    _object* PyUnicode_FromStringAndSize(const(char)*, c_long) @nogc nothrow;
    extern __gshared _typeobject PyUnicodeIter_Type;
    extern __gshared _typeobject PyUnicode_Type;
    alias Py_UCS1 = ubyte;
    alias Py_UCS2 = ushort;
    alias Py_UCS4 = uint;
    int PyTuple_ClearFreeList() @nogc nothrow;
    _object* PyTuple_Pack(c_long, ...) @nogc nothrow;
    _object* PyTuple_GetSlice(_object*, c_long, c_long) @nogc nothrow;
    int PyTuple_SetItem(_object*, c_long, _object*) @nogc nothrow;
    _object* PyTuple_GetItem(_object*, c_long) @nogc nothrow;
    c_long PyTuple_Size(_object*) @nogc nothrow;
    _object* PyTuple_New(c_long) @nogc nothrow;
    extern __gshared _typeobject PyTupleIter_Type;
    extern __gshared _typeobject PyTuple_Type;
    _object* _PyTraceMalloc_GetTraceback(uint, c_ulong) @nogc nothrow;
    int PyTraceMalloc_Untrack(uint, c_ulong) @nogc nothrow;
    int PyTraceMalloc_Track(uint, c_ulong, c_ulong) @nogc nothrow;
    extern __gshared _typeobject PyTraceBack_Type;
    int PyTraceBack_Print(_object*, _object*) @nogc nothrow;
    int PyTraceBack_Here(_frame*) @nogc nothrow;
    struct _frame;
    _object* PySys_GetXOptions() @nogc nothrow;
    void PySys_AddXOption(const(int)*) @nogc nothrow;
    int PySys_HasWarnOptions() @nogc nothrow;
    void PySys_AddWarnOptionUnicode(_object*) @nogc nothrow;
    void PySys_AddWarnOption(const(int)*) @nogc nothrow;
    void PySys_ResetWarnOptions() @nogc nothrow;
    void PySys_FormatStderr(const(char)*, ...) @nogc nothrow;
    void PySys_FormatStdout(const(char)*, ...) @nogc nothrow;
    void PySys_WriteStderr(const(char)*, ...) @nogc nothrow;
    void PySys_WriteStdout(const(char)*, ...) @nogc nothrow;
    void PySys_SetPath(const(int)*) @nogc nothrow;
    void PySys_SetArgvEx(int, int**, int) @nogc nothrow;
    void PySys_SetArgv(int, int**) @nogc nothrow;
    int PySys_SetObject(const(char)*, _object*) @nogc nothrow;
    _object* PySys_GetObject(const(char)*) @nogc nothrow;
    _object* PyStructSequence_GetItem(_object*, c_long) @nogc nothrow;
    void PyStructSequence_SetItem(_object*, c_long, _object*) @nogc nothrow;
    alias PyStructSequence = PyTupleObject;
    _object* PyStructSequence_New(_typeobject*) @nogc nothrow;
    _typeobject* PyStructSequence_NewType(PyStructSequence_Desc*) @nogc nothrow;
    int PyStructSequence_InitType2(_typeobject*, PyStructSequence_Desc*) @nogc nothrow;
    void PyStructSequence_InitType(_typeobject*, PyStructSequence_Desc*) @nogc nothrow;
    extern __gshared char* PyStructSequence_UnnamedField;
    struct PyStructSequence_Desc
    {
        const(char)* name;
        const(char)* doc;
        PyStructSequence_Field* fields;
        int n_in_sequence;
    }
    struct PyStructSequence_Field
    {
        const(char)* name;
        const(char)* doc;
    }
    int PyMember_SetOne(char*, PyMemberDef*, _object*) @nogc nothrow;
    _object* PyMember_GetOne(const(char)*, PyMemberDef*) @nogc nothrow;
    c_long PySlice_AdjustIndices(c_long, c_long*, c_long*, c_long) @nogc nothrow;
    int PySlice_Unpack(_object*, c_long*, c_long*, c_long*) @nogc nothrow;
    pragma(mangle, "_PySlice_GetIndicesEx")     int PySlice_GetIndicesEx_(_object*, c_long, c_long*, c_long*, c_long*, c_long*) @nogc nothrow;
    int PySlice_GetIndices(_object*, c_long, c_long*, c_long*, c_long*) @nogc nothrow;
    int _PySlice_GetLongIndices(PySliceObject*, _object*, _object**, _object**, _object**) @nogc nothrow;
    _object* _PySlice_FromIndices(c_long, c_long) @nogc nothrow;
    _object* PySlice_New(_object*, _object*, _object*) @nogc nothrow;
    extern __gshared _typeobject PyEllipsis_Type;
    extern __gshared _typeobject PySlice_Type;
    struct PySliceObject
    {
        _object ob_base;
        _object* start;
        _object* stop;
        _object* step;
    }
    extern __gshared _object _Py_EllipsisObject;
    c_long PySet_Size(_object*) @nogc nothrow;
    _object* PySet_Pop(_object*) @nogc nothrow;
    int PySet_Discard(_object*, _object*) @nogc nothrow;
    int PySet_Contains(_object*, _object*) @nogc nothrow;
    int PySet_Clear(_object*) @nogc nothrow;
    int PySet_Add(_object*, _object*) @nogc nothrow;
    _object* PyFrozenSet_New(_object*) @nogc nothrow;
    _object* PySet_New(_object*) @nogc nothrow;
    extern __gshared _typeobject PySetIter_Type;
    extern __gshared _typeobject PyFrozenSet_Type;
    extern __gshared _typeobject PySet_Type;
    int PySet_ClearFreeList() @nogc nothrow;
    int _PySet_Update(_object*, _object*) @nogc nothrow;
    int _PySet_NextEntry(_object*, c_long*, _object**, c_long*) @nogc nothrow;
    extern __gshared _object* _PySet_Dummy;
    struct PySetObject
    {
        _object ob_base;
        c_long fill;
        c_long used;
        c_long mask;
        setentry* table;
        c_long hash;
        c_long finger;
        setentry[8] smalltable;
        _object* weakreflist;
    }
    struct setentry
    {
        _object* key;
        c_long hash;
    }
    extern __gshared _typeobject PyLongRangeIter_Type;
    extern __gshared _typeobject PyRangeIter_Type;
    extern __gshared _typeobject PyRange_Type;
    int _PyTime_GetPerfCounterWithInfo(long*, _Py_clock_info_t*) @nogc nothrow;
    long _PyTime_GetPerfCounter() @nogc nothrow;
    int _PyTime_gmtime(c_long, tm*) @nogc nothrow;
    int _PyTime_localtime(c_long, tm*) @nogc nothrow;
    int _PyTime_Init() @nogc nothrow;
    int _PyTime_GetMonotonicClockWithInfo(long*, _Py_clock_info_t*) @nogc nothrow;
    int _PyTime_GetSystemClockWithInfo(long*, _Py_clock_info_t*) @nogc nothrow;
    struct _Py_clock_info_t
    {
        const(char)* implementation;
        int monotonic;
        int adjustable;
        double resolution;
    }
    long _PyTime_GetMonotonicClock() @nogc nothrow;
    long _PyTime_GetSystemClock() @nogc nothrow;
    long _PyTime_MulDiv(long, long, long) @nogc nothrow;
    int _PyTime_AsTimespec(long, timespec*) @nogc nothrow;
    int _PyTime_FromTimespec(long*, timespec*) @nogc nothrow;
    int _PyTime_AsTimevalTime_t(long, c_long*, int*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_AsTimeval_noraise(long, timeval*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_AsTimeval(long, timeval*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_FromTimeval(long*, timeval*) @nogc nothrow;
    _object* _PyTime_AsNanosecondsObject(long) @nogc nothrow;
    long _PyTime_AsMicroseconds(long, _PyTime_round_t) @nogc nothrow;
    long _PyTime_AsMilliseconds(long, _PyTime_round_t) @nogc nothrow;
    double _PyTime_AsSecondsDouble(long) @nogc nothrow;
    int _PyTime_FromMillisecondsObject(long*, _object*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_FromSecondsObject(long*, _object*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_FromNanosecondsObject(long*, _object*) @nogc nothrow;
    long _PyTime_FromNanoseconds(long) @nogc nothrow;
    long _PyTime_FromSeconds(int) @nogc nothrow;
    int _PyTime_ObjectToTimespec(_object*, c_long*, c_long*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_ObjectToTimeval(_object*, c_long*, c_long*, _PyTime_round_t) @nogc nothrow;
    int _PyTime_ObjectToTime_t(_object*, c_long*, _PyTime_round_t) @nogc nothrow;
    c_long _PyLong_AsTime_t(_object*) @nogc nothrow;
    _object* _PyLong_FromTime_t(c_long) @nogc nothrow;
    enum _Anonymous_0
    {
        _PyTime_ROUND_FLOOR = 0, 
        _PyTime_ROUND_CEILING = 1, 
        _PyTime_ROUND_HALF_EVEN = 2, 
        _PyTime_ROUND_UP = 3, 
        _PyTime_ROUND_TIMEOUT = 3, 
    }
    enum _PyTime_ROUND_FLOOR = _Anonymous_0._PyTime_ROUND_FLOOR;
    enum _PyTime_ROUND_CEILING = _Anonymous_0._PyTime_ROUND_CEILING;
    enum _PyTime_ROUND_HALF_EVEN = _Anonymous_0._PyTime_ROUND_HALF_EVEN;
    enum _PyTime_ROUND_UP = _Anonymous_0._PyTime_ROUND_UP;
    enum _PyTime_ROUND_TIMEOUT = _Anonymous_0._PyTime_ROUND_TIMEOUT;
    alias _PyTime_round_t = _Anonymous_0;
    alias _PyTime_t = long;
    void* PyThread_tss_get(_Py_tss_t*) @nogc nothrow;
    int PyThread_tss_set(_Py_tss_t*, void*) @nogc nothrow;
    void PyThread_tss_delete(_Py_tss_t*) @nogc nothrow;
    int PyThread_tss_create(_Py_tss_t*) @nogc nothrow;
    int PyThread_tss_is_created(_Py_tss_t*) @nogc nothrow;
    void PyThread_tss_free(_Py_tss_t*) @nogc nothrow;
    _Py_tss_t* PyThread_tss_alloc() @nogc nothrow;
    struct _Py_tss_t
    {
        int _is_initialized;
        c_ulong _key;
    }
    alias Py_tss_t = _Py_tss_t;
    void PyThread_ReInitTLS() @nogc nothrow;
    void PyThread_delete_key_value(int) @nogc nothrow;
    void* PyThread_get_key_value(int) @nogc nothrow;
    int PyThread_set_key_value(int, void*) @nogc nothrow;
    void PyThread_delete_key(int) @nogc nothrow;
    int PyThread_create_key() @nogc nothrow;
    _object* PyThread_GetInfo() @nogc nothrow;
    int PyThread_set_stacksize(c_ulong) @nogc nothrow;
    c_ulong PyThread_get_stacksize() @nogc nothrow;
    void PyThread_release_lock(void*) @nogc nothrow;
    PyLockStatus PyThread_acquire_lock_timed(void*, long, int) @nogc nothrow;
    int PyThread_acquire_lock(void*, int) @nogc nothrow;
    void PyThread_free_lock(void*) @nogc nothrow;
    void* PyThread_allocate_lock() @nogc nothrow;
    c_ulong PyThread_get_thread_native_id() @nogc nothrow;
    c_ulong PyThread_get_thread_ident() @nogc nothrow;
    void PyThread_exit_thread() @nogc nothrow;
    c_ulong PyThread_start_new_thread(void function(void*), void*) @nogc nothrow;
    void PyThread_init_thread() @nogc nothrow;
    enum PyLockStatus
    {
        PY_LOCK_FAILURE = 0, 
        PY_LOCK_ACQUIRED = 1, 
        PY_LOCK_INTR = 2, 
    }
    enum PY_LOCK_FAILURE = PyLockStatus.PY_LOCK_FAILURE;
    enum PY_LOCK_ACQUIRED = PyLockStatus.PY_LOCK_ACQUIRED;
    enum PY_LOCK_INTR = PyLockStatus.PY_LOCK_INTR;
    alias PyThread_type_sema = void*;
    alias PyThread_type_lock = void*;
    extern __gshared _ts* _PyOS_ReadlineTState;
    extern __gshared char* function(__sFILE*, __sFILE*, const(char)*) PyOS_ReadlineFunctionPointer;
    extern __gshared int function() PyOS_InputHook;
    char* PyOS_Readline(__sFILE*, __sFILE*, const(char)*) @nogc nothrow;
    pragma(mangle, "_PyRun_FileFlags")     _object* PyRun_FileFlags_(__sFILE*, const(char)*, int, _object*, _object*, PyCompilerFlags*) @nogc nothrow;
    pragma(mangle, "_PyRun_FileEx")     _object* PyRun_FileEx_(__sFILE*, const(char)*, int, _object*, _object*, int) @nogc nothrow;
    pragma(mangle, "_PyRun_File")     _object* PyRun_File_(__sFILE*, const(char)*, int, _object*, _object*) @nogc nothrow;
    pragma(mangle, "_PyRun_InteractiveLoop")     int PyRun_InteractiveLoop_(__sFILE*, const(char)*) @nogc nothrow;
    pragma(mangle, "_PyRun_InteractiveOne")     int PyRun_InteractiveOne_(__sFILE*, const(char)*) @nogc nothrow;
    pragma(mangle, "_PyRun_SimpleFileEx")     int PyRun_SimpleFileEx_(__sFILE*, const(char)*, int) @nogc nothrow;
    pragma(mangle, "_PyRun_SimpleFile")     int PyRun_SimpleFile_(__sFILE*, const(char)*) @nogc nothrow;
    pragma(mangle, "_PyRun_SimpleString")     int PyRun_SimpleString_(const(char)*) @nogc nothrow;
    pragma(mangle, "_PyRun_AnyFileFlags")     int PyRun_AnyFileFlags_(__sFILE*, const(char)*, PyCompilerFlags*) @nogc nothrow;
    pragma(mangle, "_PyRun_AnyFileEx")     int PyRun_AnyFileEx_(__sFILE*, const(char)*, int) @nogc nothrow;
    pragma(mangle, "_PyRun_AnyFile")     int PyRun_AnyFile_(__sFILE*, const(char)*) @nogc nothrow;
    pragma(mangle, "_PyRun_String")     _object* PyRun_String_(const(char)*, int, _object*, _object*) @nogc nothrow;
    void PyErr_Display(_object*, _object*, _object*) @nogc nothrow;
    void PyErr_PrintEx(int) @nogc nothrow;
    void PyErr_Print() @nogc nothrow;
    symtable* _Py_SymtableStringObjectFlags(const(char)*, _object*, int, PyCompilerFlags*) @nogc nothrow;
    symtable* Py_SymtableStringObject(const(char)*, _object*, int) @nogc nothrow;
    const(char)* _Py_SourceAsString(_object*, const(char)*, const(char)*, PyCompilerFlags*, _object**) @nogc nothrow;
    symtable* Py_SymtableString(const(char)*, const(char)*, int) @nogc nothrow;
    struct symtable;
    _object* Py_CompileStringObject(const(char)*, _object*, int, PyCompilerFlags*, int) @nogc nothrow;
    _object* Py_CompileStringExFlags(const(char)*, const(char)*, int, PyCompilerFlags*, int) @nogc nothrow;
    _object* PyRun_FileExFlags(__sFILE*, const(char)*, int, _object*, _object*, int, PyCompilerFlags*) @nogc nothrow;
    _object* PyRun_StringFlags(const(char)*, int, _object*, _object*, PyCompilerFlags*) @nogc nothrow;
    _node* PyParser_SimpleParseFileFlags(__sFILE*, const(char)*, int, int) @nogc nothrow;
    _node* PyParser_SimpleParseStringFlagsFilename(const(char)*, const(char)*, int, int) @nogc nothrow;
    _node* PyParser_SimpleParseStringFlags(const(char)*, int, int) @nogc nothrow;
    _mod* PyParser_ASTFromFileObject(__sFILE*, _object*, const(char)*, int, const(char)*, const(char)*, PyCompilerFlags*, int*, _arena*) @nogc nothrow;
    _mod* PyParser_ASTFromFile(__sFILE*, const(char)*, const(char)*, int, const(char)*, const(char)*, PyCompilerFlags*, int*, _arena*) @nogc nothrow;
    _mod* PyParser_ASTFromStringObject(const(char)*, _object*, int, PyCompilerFlags*, _arena*) @nogc nothrow;
    _mod* PyParser_ASTFromString(const(char)*, const(char)*, int, PyCompilerFlags*, _arena*) @nogc nothrow;
    int PyRun_InteractiveLoopFlags(__sFILE*, const(char)*, PyCompilerFlags*) @nogc nothrow;
    int PyRun_InteractiveOneObject(__sFILE*, _object*, PyCompilerFlags*) @nogc nothrow;
    int PyRun_InteractiveOneFlags(__sFILE*, const(char)*, PyCompilerFlags*) @nogc nothrow;
    int PyRun_SimpleFileExFlags(__sFILE*, const(char)*, int, PyCompilerFlags*) @nogc nothrow;
    int PyRun_AnyFileExFlags(__sFILE*, const(char)*, int, PyCompilerFlags*) @nogc nothrow;
    int PyRun_SimpleStringFlags(const(char)*, PyCompilerFlags*) @nogc nothrow;
    double _Py_parse_inf_or_nan(const(char)*, char**) @nogc nothrow;
    _object* _Py_string_to_number_with_underscores(const(char)*, c_long, const(char)*, _object*, void*, _object* function(const(char)*, c_long, void*)) @nogc nothrow;
    char* PyOS_double_to_string(double, char, int, int, int*) @nogc nothrow;
    double PyOS_string_to_double(const(char)*, char**, _object*) @nogc nothrow;
    int PyOS_mystricmp(const(char)*, const(char)*) @nogc nothrow;
    int PyOS_mystrnicmp(const(char)*, const(char)*, c_long) @nogc nothrow;
    _ts* PyGILState_GetThisThreadState() @nogc nothrow;
    void PyGILState_Release(PyGILState_STATE) @nogc nothrow;
    PyGILState_STATE PyGILState_Ensure() @nogc nothrow;
    enum _Anonymous_1
    {
        PyGILState_LOCKED = 0, 
        PyGILState_UNLOCKED = 1, 
    }
    enum PyGILState_LOCKED = _Anonymous_1.PyGILState_LOCKED;
    enum PyGILState_UNLOCKED = _Anonymous_1.PyGILState_UNLOCKED;
    alias PyGILState_STATE = _Anonymous_1;
    int PyThreadState_SetAsyncExc(c_ulong, _object*) @nogc nothrow;
    _object* PyThreadState_GetDict() @nogc nothrow;
    _ts* PyThreadState_Swap(_ts*) @nogc nothrow;
    _ts* PyThreadState_Get() @nogc nothrow;
    void PyThreadState_DeleteCurrent() @nogc nothrow;
    void PyThreadState_Delete(_ts*) @nogc nothrow;
    void PyThreadState_Clear(_ts*) @nogc nothrow;
    _ts* PyThreadState_New(_is*) @nogc nothrow;
    _object* PyState_FindModule(PyModuleDef*) @nogc nothrow;
    int PyState_RemoveModule(PyModuleDef*) @nogc nothrow;
    int PyState_AddModule(_object*, PyModuleDef*) @nogc nothrow;
    long PyInterpreterState_GetID(_is*) @nogc nothrow;
    _object* PyInterpreterState_GetDict(_is*) @nogc nothrow;
    void PyInterpreterState_Delete(_is*) @nogc nothrow;
    void PyInterpreterState_Clear(_is*) @nogc nothrow;
    _is* PyInterpreterState_New() @nogc nothrow;
    alias PyInterpreterState = _is;
    alias PyThreadState = _ts;
    struct _is;
    struct _ts
    {
        _ts* prev;
        _ts* next;
        _is* interp;
        _frame* frame;
        int recursion_depth;
        char overflowed;
        char recursion_critical;
        int stackcheck_counter;
        int tracing;
        int use_tracing;
        int function(_object*, _frame*, int, _object*) c_profilefunc;
        int function(_object*, _frame*, int, _object*) c_tracefunc;
        _object* c_profileobj;
        _object* c_traceobj;
        _object* curexc_type;
        _object* curexc_value;
        _object* curexc_traceback;
        _err_stackitem exc_state;
        _err_stackitem* exc_info;
        _object* dict;
        int gilstate_counter;
        _object* async_exc;
        c_ulong thread_id;
        int trash_delete_nesting;
        _object* trash_delete_later;
        void function(void*) on_delete;
        void* on_delete_data;
        int coroutine_origin_tracking_depth;
        _object* async_gen_firstiter;
        _object* async_gen_finalizer;
        _object* context;
        ulong context_ver;
        ulong id;
    }
    alias Py_ssize_clean_t = int;
    alias Py_uhash_t = c_ulong;
    alias Py_hash_t = c_long;
    alias Py_ssize_t = c_long;
    alias Py_intptr_t = c_long;
    alias Py_uintptr_t = c_ulong;
    extern __gshared _PyTraceMalloc_Config _Py_tracemalloc_config;
    struct _PyTraceMalloc_Config
    {
        static enum _Anonymous_2
        {
            TRACEMALLOC_NOT_INITIALIZED = 0, 
            TRACEMALLOC_INITIALIZED = 1, 
            TRACEMALLOC_FINALIZED = 2, 
        }
        enum TRACEMALLOC_NOT_INITIALIZED = _Anonymous_2.TRACEMALLOC_NOT_INITIALIZED;
        enum TRACEMALLOC_INITIALIZED = _Anonymous_2.TRACEMALLOC_INITIALIZED;
        enum TRACEMALLOC_FINALIZED = _Anonymous_2.TRACEMALLOC_FINALIZED;
        _Anonymous_2 initialized;
        int tracing;
        int max_nframe;
        int use_domain;
    }
    void PyMem_Free(void*) @nogc nothrow;
    void* PyMem_Realloc(void*, c_ulong) @nogc nothrow;
    void* PyMem_Malloc(c_ulong) @nogc nothrow;
    void function(int) PyOS_setsig(int, void function(int)) @nogc nothrow;
    void function(int) PyOS_getsig(int) @nogc nothrow;
    alias PyOS_sighandler_t = void function(int);
    const(char)* Py_GetBuildInfo() @nogc nothrow;
    const(char)* Py_GetCompiler() @nogc nothrow;
    const(char)* Py_GetCopyright() @nogc nothrow;
    const(char)* Py_GetPlatform() @nogc nothrow;
    const(char)* Py_GetVersion() @nogc nothrow;
    void Py_SetPath(const(int)*) @nogc nothrow;
    int* Py_GetPath() @nogc nothrow;
    int* Py_GetExecPrefix() @nogc nothrow;
    int* Py_GetPrefix() @nogc nothrow;
    int* Py_GetProgramFullPath() @nogc nothrow;
    int* Py_GetPythonHome() @nogc nothrow;
    void Py_SetPythonHome(const(int)*) @nogc nothrow;
    int* Py_GetProgramName() @nogc nothrow;
    void Py_SetProgramName(const(int)*) @nogc nothrow;
    int Py_BytesMain(int, char**) @nogc nothrow;
    int Py_Main(int, int**) @nogc nothrow;
    void Py_Exit(int) @nogc nothrow;
    int Py_AtExit(void function()) @nogc nothrow;
    void Py_EndInterpreter(_ts*) @nogc nothrow;
    _ts* Py_NewInterpreter() @nogc nothrow;
    int Py_IsInitialized() @nogc nothrow;
    int Py_FinalizeEx() @nogc nothrow;
    void Py_Finalize() @nogc nothrow;
    void Py_InitializeEx(int) @nogc nothrow;
    void Py_Initialize() @nogc nothrow;
    PyHash_FuncDef* PyHash_GetFuncDef() @nogc nothrow;
    struct PyHash_FuncDef
    {
        c_long function(const(void)*, c_long) hash;
        const(char)* name;
        const(int) hash_bits;
        const(int) seed_bits;
    }
    extern __gshared _Py_HashSecret_t _Py_HashSecret;
    union _Py_HashSecret_t
    {
        ubyte[24] uc;
        static struct _Anonymous_3
        {
            c_long prefix;
            c_long suffix;
        }
        _Anonymous_3 fnv;
        static struct _Anonymous_4
        {
            ulong k0;
            ulong k1;
        }
        _Anonymous_4 siphash;
        static struct _Anonymous_5
        {
            ubyte[16] padding;
            c_long suffix;
        }
        _Anonymous_5 djbx33a;
        static struct _Anonymous_6
        {
            ubyte[16] padding;
            c_long hashsalt;
        }
        _Anonymous_6 expat;
    }
    c_long _Py_HashBytes(const(void)*, c_long) @nogc nothrow;
    c_long _Py_HashPointer(void*) @nogc nothrow;
    c_long _Py_HashDouble(double) @nogc nothrow;
    int PyOS_vsnprintf(char*, c_ulong, const(char)*, va_list*) @nogc nothrow;
    int PyOS_snprintf(char*, c_ulong, const(char)*, ...) @nogc nothrow;
    int PyUnicodeTranslateError_SetReason(_object*, const(char)*) @nogc nothrow;
    int PyUnicodeDecodeError_SetReason(_object*, const(char)*) @nogc nothrow;
    int PyUnicodeEncodeError_SetReason(_object*, const(char)*) @nogc nothrow;
    _object* PyUnicodeTranslateError_GetReason(_object*) @nogc nothrow;
    _object* PyUnicodeDecodeError_GetReason(_object*) @nogc nothrow;
    _object* PyUnicodeEncodeError_GetReason(_object*) @nogc nothrow;
    int PyUnicodeTranslateError_SetEnd(_object*, c_long) @nogc nothrow;
    int PyUnicodeDecodeError_SetEnd(_object*, c_long) @nogc nothrow;
    int PyUnicodeEncodeError_SetEnd(_object*, c_long) @nogc nothrow;
    int PyUnicodeTranslateError_GetEnd(_object*, c_long*) @nogc nothrow;
    int PyUnicodeDecodeError_GetEnd(_object*, c_long*) @nogc nothrow;
    int PyUnicodeEncodeError_GetEnd(_object*, c_long*) @nogc nothrow;
    int PyUnicodeTranslateError_SetStart(_object*, c_long) @nogc nothrow;
    int PyUnicodeDecodeError_SetStart(_object*, c_long) @nogc nothrow;
    int PyUnicodeEncodeError_SetStart(_object*, c_long) @nogc nothrow;
    int PyUnicodeTranslateError_GetStart(_object*, c_long*) @nogc nothrow;
    int PyUnicodeDecodeError_GetStart(_object*, c_long*) @nogc nothrow;
    int PyUnicodeEncodeError_GetStart(_object*, c_long*) @nogc nothrow;
    _object* PyUnicodeTranslateError_GetObject(_object*) @nogc nothrow;
    _object* PyUnicodeDecodeError_GetObject(_object*) @nogc nothrow;
    _object* PyUnicodeEncodeError_GetObject(_object*) @nogc nothrow;
    _object* PyUnicodeDecodeError_GetEncoding(_object*) @nogc nothrow;
    _object* PyUnicodeEncodeError_GetEncoding(_object*) @nogc nothrow;
    _object* PyUnicodeDecodeError_Create(const(char)*, const(char)*, c_long, c_long, c_long, const(char)*) @nogc nothrow;
    _object* PyErr_ProgramText(const(char)*, int) @nogc nothrow;
    void PyErr_SyntaxLocationEx(const(char)*, int, int) @nogc nothrow;
    void PyErr_SyntaxLocation(const(char)*, int) @nogc nothrow;
    void PyErr_SetInterrupt() @nogc nothrow;
    int PyErr_CheckSignals() @nogc nothrow;
    void PyErr_WriteUnraisable(_object*) @nogc nothrow;
    _object* PyErr_NewExceptionWithDoc(const(char)*, const(char)*, _object*, _object*) @nogc nothrow;
    _object* PyErr_NewException(const(char)*, _object*, _object*) @nogc nothrow;
    void _PyErr_BadInternalCall(const(char)*, int) @nogc nothrow;
    pragma(mangle, "_PyErr_BadInternalCall")     void PyErr_BadInternalCall_() @nogc nothrow;
    _object* PyErr_SetImportError(_object*, _object*, _object*) @nogc nothrow;
    _object* PyErr_SetImportErrorSubclass(_object*, _object*, _object*, _object*) @nogc nothrow;
    _object* PyErr_FormatV(_object*, const(char)*, va_list*) @nogc nothrow;
    _object* PyErr_Format(_object*, const(char)*, ...) @nogc nothrow;
    _object* PyErr_SetFromErrnoWithFilename(_object*, const(char)*) @nogc nothrow;
    _object* PyErr_SetFromErrnoWithFilenameObjects(_object*, _object*, _object*) @nogc nothrow;
    _object* PyErr_SetFromErrnoWithFilenameObject(_object*, _object*) @nogc nothrow;
    _object* PyErr_SetFromErrno(_object*) @nogc nothrow;
    _object* PyErr_NoMemory() @nogc nothrow;
    int PyErr_BadArgument() @nogc nothrow;
    extern __gshared _object* PyExc_ResourceWarning;
    extern __gshared _object* PyExc_BytesWarning;
    extern __gshared _object* PyExc_UnicodeWarning;
    extern __gshared _object* PyExc_ImportWarning;
    extern __gshared _object* PyExc_FutureWarning;
    extern __gshared _object* PyExc_RuntimeWarning;
    extern __gshared _object* PyExc_SyntaxWarning;
    extern __gshared _object* PyExc_PendingDeprecationWarning;
    extern __gshared _object* PyExc_DeprecationWarning;
    extern __gshared _object* PyExc_UserWarning;
    extern __gshared _object* PyExc_Warning;
    extern __gshared _object* PyExc_IOError;
    extern __gshared _object* PyExc_EnvironmentError;
    extern __gshared _object* PyExc_TimeoutError;
    extern __gshared _object* PyExc_ProcessLookupError;
    extern __gshared _object* PyExc_PermissionError;
    extern __gshared _object* PyExc_NotADirectoryError;
    extern __gshared _object* PyExc_IsADirectoryError;
    extern __gshared _object* PyExc_InterruptedError;
    extern __gshared _object* PyExc_FileNotFoundError;
    extern __gshared _object* PyExc_FileExistsError;
    extern __gshared _object* PyExc_ConnectionResetError;
    extern __gshared _object* PyExc_ConnectionRefusedError;
    extern __gshared _object* PyExc_ConnectionAbortedError;
    extern __gshared _object* PyExc_ConnectionError;
    extern __gshared _object* PyExc_ChildProcessError;
    extern __gshared _object* PyExc_BrokenPipeError;
    extern __gshared _object* PyExc_BlockingIOError;
    extern __gshared _object* PyExc_ZeroDivisionError;
    extern __gshared _object* PyExc_ValueError;
    extern __gshared _object* PyExc_UnicodeTranslateError;
    extern __gshared _object* PyExc_UnicodeDecodeError;
    extern __gshared _object* PyExc_UnicodeEncodeError;
    extern __gshared _object* PyExc_UnicodeError;
    extern __gshared _object* PyExc_UnboundLocalError;
    extern __gshared _object* PyExc_TypeError;
    extern __gshared _object* PyExc_SystemExit;
    extern __gshared _object* PyExc_SystemError;
    extern __gshared _object* PyExc_ReferenceError;
    extern __gshared _object* PyExc_TabError;
    extern __gshared _object* PyExc_IndentationError;
    extern __gshared _object* PyExc_SyntaxError;
    extern __gshared _object* PyExc_NotImplementedError;
    extern __gshared _object* PyExc_RecursionError;
    extern __gshared _object* PyExc_RuntimeError;
    extern __gshared _object* PyExc_OverflowError;
    extern __gshared _object* PyExc_NameError;
    extern __gshared _object* PyExc_MemoryError;
    extern __gshared _object* PyExc_KeyboardInterrupt;
    extern __gshared _object* PyExc_KeyError;
    extern __gshared _object* PyExc_IndexError;
    extern __gshared _object* PyExc_ModuleNotFoundError;
    extern __gshared _object* PyExc_ImportError;
    extern __gshared _object* PyExc_OSError;
    extern __gshared _object* PyExc_FloatingPointError;
    extern __gshared _object* PyExc_EOFError;
    extern __gshared _object* PyExc_BufferError;
    extern __gshared _object* PyExc_AttributeError;
    extern __gshared _object* PyExc_AssertionError;
    extern __gshared _object* PyExc_LookupError;
    extern __gshared _object* PyExc_ArithmeticError;
    extern __gshared _object* PyExc_GeneratorExit;
    extern __gshared _object* PyExc_StopIteration;
    extern __gshared _object* PyExc_StopAsyncIteration;
    extern __gshared _object* PyExc_Exception;
    extern __gshared _object* PyExc_BaseException;
    pragma(mangle, "_PyExceptionClass_Name")     const(char)* PyExceptionClass_Name_(_object*) @nogc nothrow;
    void PyException_SetContext(_object*, _object*) @nogc nothrow;
    _object* PyException_GetContext(_object*) @nogc nothrow;
    void PyException_SetCause(_object*, _object*) @nogc nothrow;
    _object* PyException_GetCause(_object*) @nogc nothrow;
    _object* PyException_GetTraceback(_object*) @nogc nothrow;
    int PyException_SetTraceback(_object*, _object*) @nogc nothrow;
    void PyErr_NormalizeException(_object**, _object**, _object**) @nogc nothrow;
    int PyErr_ExceptionMatches(_object*) @nogc nothrow;
    int PyErr_GivenExceptionMatches(_object*, _object*) @nogc nothrow;
    void Py_FatalError(const(char)*) @nogc nothrow;
    void PyErr_SetExcInfo(_object*, _object*, _object*) @nogc nothrow;
    void PyErr_GetExcInfo(_object**, _object**, _object**) @nogc nothrow;
    void PyErr_Restore(_object*, _object*, _object*) @nogc nothrow;
    void PyErr_Fetch(_object**, _object**, _object**) @nogc nothrow;
    void PyErr_Clear() @nogc nothrow;
    _object* PyErr_Occurred() @nogc nothrow;
    void PyErr_SetString(_object*, const(char)*) @nogc nothrow;
    void PyErr_SetObject(_object*, _object*) @nogc nothrow;
    void PyErr_SetNone(_object*) @nogc nothrow;
    extern __gshared int Py_IsolatedFlag;
    extern __gshared int Py_HashRandomizationFlag;
    extern __gshared int Py_UnbufferedStdioFlag;
    extern __gshared int Py_NoUserSiteDirectory;
    extern __gshared int Py_DontWriteBytecodeFlag;
    extern __gshared int Py_IgnoreEnvironmentFlag;
    extern __gshared int Py_FrozenFlag;
    extern __gshared int Py_BytesWarningFlag;
    extern __gshared int Py_NoSiteFlag;
    extern __gshared int Py_OptimizeFlag;
    extern __gshared int Py_InspectFlag;
    extern __gshared int Py_InteractiveFlag;
    extern __gshared int Py_QuietFlag;
    extern __gshared int Py_VerboseFlag;
    extern __gshared int Py_DebugFlag;
    extern __gshared const(ubyte)[256] _Py_ctype_toupper;
    extern __gshared const(ubyte)[256] _Py_ctype_tolower;
    extern __gshared const(uint)[256] _Py_ctype_table;
    void* PyCapsule_Import(const(char)*, int) @nogc nothrow;
    int PyCapsule_SetContext(_object*, void*) @nogc nothrow;
    int PyCapsule_SetName(_object*, const(char)*) @nogc nothrow;
    int PyCapsule_SetDestructor(_object*, void function(_object*)) @nogc nothrow;
    int PyCapsule_SetPointer(_object*, void*) @nogc nothrow;
    int PyCapsule_IsValid(_object*, const(char)*) @nogc nothrow;
    void* PyCapsule_GetContext(_object*) @nogc nothrow;
    const(char)* PyCapsule_GetName(_object*) @nogc nothrow;
    void function(_object*) PyCapsule_GetDestructor(_object*) @nogc nothrow;
    void* PyCapsule_GetPointer(_object*, const(char)*) @nogc nothrow;
    _object* PyCapsule_New(void*, const(char)*, void function(_object*)) @nogc nothrow;
    alias PyCapsule_Destructor = void function(_object*);
    extern __gshared _typeobject PyCapsule_Type;
    int PyArena_AddPyObject(_arena*, _object*) @nogc nothrow;
    void* PyArena_Malloc(_arena*, c_ulong) @nogc nothrow;
    void PyArena_Free(_arena*) @nogc nothrow;
    _arena* PyArena_New() @nogc nothrow;
    struct _arena;
    alias PyArena = _arena;
    int PyPickleBuffer_Release(_object*) @nogc nothrow;
    const(bufferinfo)* PyPickleBuffer_GetBuffer(_object*) @nogc nothrow;
    _object* PyPickleBuffer_FromObject(_object*) @nogc nothrow;
    extern __gshared _typeobject PyPickleBuffer_Type;
    _object* PyOS_FSPath(_object*) @nogc nothrow;
    int PyODict_DelItem(_object*, _object*) @nogc nothrow;
    int PyODict_SetItem(_object*, _object*, _object*) @nogc nothrow;
    _object* PyODict_New() @nogc nothrow;
    extern __gshared _typeobject PyODictValues_Type;
    extern __gshared _typeobject PyODictItems_Type;
    extern __gshared _typeobject PyODictKeys_Type;
    extern __gshared _typeobject PyODictIter_Type;
    extern __gshared _typeobject PyODict_Type;
    struct _odictobject;
    alias PyODictObject = _odictobject;
    char* ctermid(char*) @nogc nothrow;
    void PyObject_GC_Del(void*) @nogc nothrow;
    void PyObject_GC_UnTrack(void*) @nogc nothrow;
    void PyObject_GC_Track(void*) @nogc nothrow;
    PyVarObject* _PyObject_GC_NewVar(_typeobject*, c_long) @nogc nothrow;
    _object* _PyObject_GC_New(_typeobject*) @nogc nothrow;
    PyVarObject* _PyObject_GC_Resize(PyVarObject*, c_long) @nogc nothrow;
    c_long PyGC_Collect() @nogc nothrow;
    static PyVarObject* _PyObject_INIT_VAR(PyVarObject*, _typeobject*, c_long) @nogc nothrow;
    c_ulong ___runetype(int) @nogc nothrow;
    int ___tolower(int) @nogc nothrow;
    int ___toupper(int) @nogc nothrow;
    int isascii(int) @nogc nothrow;
    int __maskrune(int, c_ulong) @nogc nothrow;
    int __istype(int, c_ulong) @nogc nothrow;
    int __isctype(int, c_ulong) @nogc nothrow;
    int __toupper(int) @nogc nothrow;
    int __tolower(int) @nogc nothrow;
    int __wcwidth(int) @nogc nothrow;
    pragma(mangle, "_isalnum")     int isalnum_(int) @nogc nothrow;
    pragma(mangle, "_isalpha")     int isalpha_(int) @nogc nothrow;
    int isblank(int) @nogc nothrow;
    int iscntrl(int) @nogc nothrow;
    int isdigit(int) @nogc nothrow;
    int isgraph(int) @nogc nothrow;
    pragma(mangle, "_islower")     int islower_(int) @nogc nothrow;
    int isprint(int) @nogc nothrow;
    int ispunct(int) @nogc nothrow;
    pragma(mangle, "_isspace")     int isspace_(int) @nogc nothrow;
    pragma(mangle, "_isupper")     int isupper_(int) @nogc nothrow;
    int isxdigit(int) @nogc nothrow;
    int toascii(int) @nogc nothrow;
    pragma(mangle, "_tolower")     int tolower_(int) @nogc nothrow;
    pragma(mangle, "_toupper")     int toupper_(int) @nogc nothrow;
    int digittoint(int) @nogc nothrow;
    int ishexnumber(int) @nogc nothrow;
    int isideogram(int) @nogc nothrow;
    int isnumber(int) @nogc nothrow;
    int isphonogram(int) @nogc nothrow;
    int isrune(int) @nogc nothrow;
    int isspecial(int) @nogc nothrow;
    alias fpos_t = long;
    static _object* _PyObject_INIT(_object*, _typeobject*) @nogc nothrow;
    struct __sbuf
    {
        ubyte* _base;
        int _size;
    }
    struct __sFILEX;
    alias FILE = __sFILE;
    struct __sFILE
    {
        ubyte* _p;
        int _r;
        int _w;
        short _flags;
        short _file;
        __sbuf _bf;
        int _lbfsize;
        void* _cookie;
        int function(void*) _close;
        int function(void*, char*, int) _read;
        long function(void*, long, int) _seek;
        int function(void*, const(char)*, int) _write;
        __sbuf _ub;
        __sFILEX* _extra;
        int _ur;
        ubyte[3] _ubuf;
        ubyte[1] _nbuf;
        __sbuf _lb;
        int _blksize;
        long _offset;
    }
    PyVarObject* _PyObject_NewVar(_typeobject*, c_long) @nogc nothrow;
    _object* _PyObject_New(_typeobject*) @nogc nothrow;
    alias __darwin_nl_item = int;
    alias __darwin_wctrans_t = int;
    alias __darwin_wctype_t = uint;
    PyVarObject* PyObject_InitVar(PyVarObject*, _typeobject*, c_long) @nogc nothrow;
    _object* PyObject_Init(_object*, _typeobject*) @nogc nothrow;
    alias intmax_t = c_long;
    void PyObject_Free(void*) @nogc nothrow;
    alias uint16_t = ushort;
    alias uint32_t = uint;
    void* PyObject_Realloc(void*, c_ulong) @nogc nothrow;
    alias uint64_t = ulong;
    alias uint8_t = ubyte;
    void* PyObject_Calloc(c_ulong, c_ulong) @nogc nothrow;
    alias uintmax_t = c_ulong;
    alias wctrans_t = int;
    void* PyObject_Malloc(c_ulong) @nogc nothrow;
    alias wctype_t = uint;
    int iswalnum(int) @nogc nothrow;
    int iswalpha(int) @nogc nothrow;
    int iswcntrl(int) @nogc nothrow;
    int iswctype(int, uint) @nogc nothrow;
    int iswdigit(int) @nogc nothrow;
    int iswgraph(int) @nogc nothrow;
    int iswlower(int) @nogc nothrow;
    int iswprint(int) @nogc nothrow;
    int iswpunct(int) @nogc nothrow;
    int iswspace(int) @nogc nothrow;
    int iswupper(int) @nogc nothrow;
    int iswxdigit(int) @nogc nothrow;
    int towlower(int) @nogc nothrow;
    int towupper(int) @nogc nothrow;
    uint wctype(const(char)*) @nogc nothrow;
    pragma(mangle, "_alloca")     void* alloca_(c_ulong) @nogc nothrow;
    void _PyTrash_thread_destroy_chain() @nogc nothrow;
    void __assert_rtn(const(char)*, const(char)*, int, const(char)*) @nogc nothrow;
    void _PyTrash_thread_deposit_object(_object*) @nogc nothrow;
    extern __gshared _object _Py_NotImplementedStruct;
    extern __gshared _object _Py_NoneStruct;
    int gethostuuid(ubyte*, const(timespec)*) @nogc nothrow;
    void Py_DecRef(_object*) @nogc nothrow;
    void Py_IncRef(_object*) @nogc nothrow;
    struct __darwin_mcontext32
    {
        __darwin_i386_exception_state __es;
        __darwin_i386_thread_state __ss;
        __darwin_i386_float_state __fs;
    }
    struct __darwin_mcontext_avx32
    {
        __darwin_i386_exception_state __es;
        __darwin_i386_thread_state __ss;
        __darwin_i386_avx_state __fs;
    }
    struct __darwin_mcontext_avx512_32
    {
        __darwin_i386_exception_state __es;
        __darwin_i386_thread_state __ss;
        __darwin_i386_avx512_state __fs;
    }
    struct __darwin_mcontext64
    {
        __darwin_x86_exception_state64 __es;
        __darwin_x86_thread_state64 __ss;
        __darwin_x86_float_state64 __fs;
    }
    static void _Py_XDECREF(_object*) @nogc nothrow;
    struct __darwin_mcontext64_full
    {
        __darwin_x86_exception_state64 __es;
        __darwin_x86_thread_full_state64 __ss;
        __darwin_x86_float_state64 __fs;
    }
    struct __darwin_mcontext_avx64
    {
        __darwin_x86_exception_state64 __es;
        __darwin_x86_thread_state64 __ss;
        __darwin_x86_avx_state64 __fs;
    }
    struct __darwin_mcontext_avx64_full
    {
        __darwin_x86_exception_state64 __es;
        __darwin_x86_thread_full_state64 __ss;
        __darwin_x86_avx_state64 __fs;
    }
    static void _Py_XINCREF(_object*) @nogc nothrow;
    struct __darwin_mcontext_avx512_64
    {
        __darwin_x86_exception_state64 __es;
        __darwin_x86_thread_state64 __ss;
        __darwin_x86_avx512_state64 __fs;
    }
    struct __darwin_mcontext_avx512_64_full
    {
        __darwin_x86_exception_state64 __es;
        __darwin_x86_thread_full_state64 __ss;
        __darwin_x86_avx512_state64 __fs;
    }
    static void _Py_DECREF(const(char)*, int, _object*) @nogc nothrow;
    alias mcontext_t = __darwin_mcontext64*;
    static void _Py_INCREF(_object*) @nogc nothrow;
    alias __int8_t = byte;
    alias __uint8_t = ubyte;
    alias __int16_t = short;
    alias __uint16_t = ushort;
    alias __int32_t = int;
    alias __uint32_t = uint;
    alias __int64_t = long;
    alias __uint64_t = ulong;
    alias __darwin_intptr_t = c_long;
    alias __darwin_natural_t = uint;
    alias __darwin_ct_rune_t = int;
    union __mbstate_t
    {
        char[128] __mbstate8;
        long _mbstateL;
    }
    alias __darwin_mbstate_t = __mbstate_t;
    alias __darwin_ptrdiff_t = c_long;
    alias __darwin_size_t = c_ulong;
    alias __darwin_va_list = va_list[1];
    alias __darwin_wchar_t = int;
    alias __darwin_rune_t = int;
    alias __darwin_wint_t = int;
    alias __darwin_clock_t = c_ulong;
    alias __darwin_socklen_t = uint;
    alias __darwin_ssize_t = c_long;
    alias __darwin_time_t = c_long;
    pragma(mangle, "__Py_Dealloc")     void _Py_Dealloc_(_object*) @nogc nothrow;
    static void _Py_ForgetReference(_object*) @nogc nothrow;
    static void _Py_NewReference(_object*) @nogc nothrow;
    int _PyTraceMalloc_NewReference(_object*) @nogc nothrow;
    void Py_ReprLeave(_object*) @nogc nothrow;
    int Py_ReprEnter(_object*) @nogc nothrow;
    _object* PyObject_Dir(_object*) @nogc nothrow;
    void PyObject_ClearWeakRefs(_object*) @nogc nothrow;
    int PyCallable_Check(_object*) @nogc nothrow;
    int PyObject_Not(_object*) @nogc nothrow;
    int PyObject_IsTrue(_object*) @nogc nothrow;
    c_long PyObject_HashNotImplemented(_object*) @nogc nothrow;
    c_long PyObject_Hash(_object*) @nogc nothrow;
    int PyObject_GenericSetDict(_object*, _object*, void*) @nogc nothrow;
    int PyObject_GenericSetAttr(_object*, _object*, _object*) @nogc nothrow;
    _object* PyObject_GenericGetAttr(_object*, _object*) @nogc nothrow;
    _object* PyObject_SelfIter(_object*) @nogc nothrow;
    int PyObject_HasAttr(_object*, _object*) @nogc nothrow;
    int PyObject_SetAttr(_object*, _object*, _object*) @nogc nothrow;
    alias sig_atomic_t = int;
    _object* PyObject_GetAttr(_object*, _object*) @nogc nothrow;
    alias register_t = long;
    alias user_addr_t = ulong;
    alias user_size_t = ulong;
    alias user_ssize_t = long;
    alias user_long_t = long;
    alias user_ulong_t = ulong;
    alias user_time_t = long;
    alias user_off_t = long;
    int PyObject_HasAttrString(_object*, const(char)*) @nogc nothrow;
    alias syscall_arg_t = ulong;
    int PyObject_SetAttrString(_object*, const(char)*, _object*) @nogc nothrow;
    _object* PyObject_GetAttrString(_object*, const(char)*) @nogc nothrow;
    int PyObject_RichCompareBool(_object*, _object*, int) @nogc nothrow;
    _object* PyObject_RichCompare(_object*, _object*, int) @nogc nothrow;
    _object* PyObject_Bytes(_object*) @nogc nothrow;
    _object* PyObject_ASCII(_object*) @nogc nothrow;
    _object* PyObject_Str(_object*) @nogc nothrow;
    _object* PyObject_Repr(_object*) @nogc nothrow;
    void PyType_Modified(_typeobject*) @nogc nothrow;
    uint PyType_ClearCache() @nogc nothrow;
    _object* PyType_GenericNew(_typeobject*, _object*, _object*) @nogc nothrow;
    _object* PyType_GenericAlloc(_typeobject*, c_long) @nogc nothrow;
    int PyType_Ready(_typeobject*) @nogc nothrow;
    c_ulong PyType_GetFlags(_typeobject*) @nogc nothrow;
    extern __gshared _typeobject PySuper_Type;
    extern __gshared _typeobject PyBaseObject_Type;
    extern __gshared _typeobject PyType_Type;
    int PyType_IsSubtype(_typeobject*, _typeobject*) @nogc nothrow;
    void* PyType_GetSlot(_typeobject*, int) @nogc nothrow;
    _object* PyType_FromSpecWithBases(PyType_Spec*, _object*) @nogc nothrow;
    _object* PyType_FromSpec(PyType_Spec*) @nogc nothrow;
    struct PyType_Spec
    {
        const(char)* name;
        int basicsize;
        int itemsize;
        uint flags;
        PyType_Slot* slots;
    }
    struct PyType_Slot
    {
        int slot;
        void* pfunc;
    }
    alias allocfunc = _object* function(_typeobject*, c_long);
    alias newfunc = _object* function(_typeobject*, _object*, _object*);
    alias initproc = int function(_object*, _object*, _object*);
    alias descrsetfunc = int function(_object*, _object*, _object*);
    alias descrgetfunc = _object* function(_object*, _object*, _object*);
    alias iternextfunc = _object* function(_object*);
    alias getiterfunc = _object* function(_object*);
    alias richcmpfunc = _object* function(_object*, _object*, int);
    alias hashfunc = c_long function(_object*);
    alias reprfunc = _object* function(_object*);
    alias setattrofunc = int function(_object*, _object*, _object*);
    alias setattrfunc = int function(_object*, char*, _object*);
    alias getattrofunc = _object* function(_object*, _object*);
    alias getattrfunc = _object* function(_object*, char*);
    alias destructor = void function(_object*);
    alias freefunc = void function(void*);
    alias traverseproc = int function(_object*, int function(_object*, void*), void*);
    alias visitproc = int function(_object*, void*);
    alias objobjproc = int function(_object*, _object*);
    alias objobjargproc = int function(_object*, _object*, _object*);
    alias ssizessizeobjargproc = int function(_object*, c_long, c_long, _object*);
    alias ssizeobjargproc = int function(_object*, c_long, _object*);
    alias ssizessizeargfunc = _object* function(_object*, c_long, c_long);
    alias ssizeargfunc = _object* function(_object*, c_long);
    alias lenfunc = c_long function(_object*);
    alias inquiry = int function(_object*);
    alias ternaryfunc = _object* function(_object*, _object*, _object*);
    alias binaryfunc = _object* function(_object*, _object*);
    alias unaryfunc = _object* function(_object*);
    struct PyVarObject
    {
        _object ob_base;
        c_long ob_size;
    }
    struct _typeobject
    {
        PyVarObject ob_base;
        const(char)* tp_name;
        c_long tp_basicsize;
        c_long tp_itemsize;
        void function(_object*) tp_dealloc;
        c_long tp_vectorcall_offset;
        _object* function(_object*, char*) tp_getattr;
        int function(_object*, char*, _object*) tp_setattr;
        PyAsyncMethods* tp_as_async;
        _object* function(_object*) tp_repr;
        PyNumberMethods* tp_as_number;
        PySequenceMethods* tp_as_sequence;
        PyMappingMethods* tp_as_mapping;
        c_long function(_object*) tp_hash;
        _object* function(_object*, _object*, _object*) tp_call;
        _object* function(_object*) tp_str;
        _object* function(_object*, _object*) tp_getattro;
        int function(_object*, _object*, _object*) tp_setattro;
        PyBufferProcs* tp_as_buffer;
        c_ulong tp_flags;
        const(char)* tp_doc;
        int function(_object*, int function(_object*, void*), void*) tp_traverse;
        int function(_object*) tp_clear;
        _object* function(_object*, _object*, int) tp_richcompare;
        c_long tp_weaklistoffset;
        _object* function(_object*) tp_iter;
        _object* function(_object*) tp_iternext;
        PyMethodDef* tp_methods;
        PyMemberDef* tp_members;
        PyGetSetDef* tp_getset;
        _typeobject* tp_base;
        _object* tp_dict;
        _object* function(_object*, _object*, _object*) tp_descr_get;
        int function(_object*, _object*, _object*) tp_descr_set;
        c_long tp_dictoffset;
        int function(_object*, _object*, _object*) tp_init;
        _object* function(_typeobject*, c_long) tp_alloc;
        _object* function(_typeobject*, _object*, _object*) tp_new;
        void function(void*) tp_free;
        int function(_object*) tp_is_gc;
        _object* tp_bases;
        _object* tp_mro;
        _object* tp_cache;
        _object* tp_subclasses;
        _object* tp_weaklist;
        void function(_object*) tp_del;
        uint tp_version_tag;
        void function(_object*) tp_finalize;
        _object* function(_object*, _object**, c_ulong, _object*) tp_vectorcall;
        int function(_object*, __sFILE*, int) tp_print;
    }
    struct _object
    {
        c_long ob_refcnt;
        _typeobject* ob_type;
    }
    alias PyObject = _object;
    _object* _PyNamespace_New(_object*) @nogc nothrow;
    extern __gshared _typeobject _PyNamespace_Type;
    struct PyModuleDef_Slot
    {
        int slot;
        void* value;
    }
    struct PyModuleDef_Base
    {
        _object ob_base;
        _object* function() m_init;
        c_long m_index;
        _object* m_copy;
    }
    extern __gshared _typeobject PyModuleDef_Type;
    _object* PyModuleDef_Init(PyModuleDef*) @nogc nothrow;
    void* PyModule_GetState(_object*) @nogc nothrow;
    PyModuleDef* PyModule_GetDef(_object*) @nogc nothrow;
    struct PyModuleDef
    {
        PyModuleDef_Base m_base;
        const(char)* m_name;
        const(char)* m_doc;
        c_long m_size;
        PyMethodDef* m_methods;
        PyModuleDef_Slot* m_slots;
        int function(_object*, int function(_object*, void*), void*) m_traverse;
        int function(_object*) m_clear;
        void function(void*) m_free;
    }
    int _PyModuleSpec_IsInitializing(_object*) @nogc nothrow;
    void _PyModule_ClearDict(_object*) @nogc nothrow;
    void _PyModule_Clear(_object*) @nogc nothrow;
    _object* PyModule_GetFilenameObject(_object*) @nogc nothrow;
    const(char)* PyModule_GetFilename(_object*) @nogc nothrow;
    const(char)* PyModule_GetName(_object*) @nogc nothrow;
    _object* PyModule_GetNameObject(_object*) @nogc nothrow;
    _object* PyModule_GetDict(_object*) @nogc nothrow;
    _object* PyModule_New(const(char)*) @nogc nothrow;
    _object* PyModule_NewObject(_object*) @nogc nothrow;
    extern __gshared _typeobject PyModule_Type;
    extern __gshared const(char)* _Py_PackageContext;
    _object* PyModule_FromDefAndSpec2(PyModuleDef*, _object*, int) @nogc nothrow;
    _object* _PyModule_CreateInitialized(PyModuleDef*, int) @nogc nothrow;
    _object* PyModule_Create2(PyModuleDef*, int) @nogc nothrow;
    int PyModule_ExecDef(_object*, PyModuleDef*) @nogc nothrow;
    int PyModule_AddFunctions(_object*, PyMethodDef*) @nogc nothrow;
    int PyModule_SetDocString(_object*, const(char)*) @nogc nothrow;
    int PyModule_AddStringConstant(_object*, const(char)*, const(char)*) @nogc nothrow;
    int PyModule_AddIntConstant(_object*, const(char)*, c_long) @nogc nothrow;
    int PyModule_AddObject(_object*, const(char)*, _object*) @nogc nothrow;
    void _PyArg_Fini() @nogc nothrow;
    pragma(mangle, "__PyArg_UnpackKeywords")     _object** _PyArg_UnpackKeywords_(_object**, c_long, _object*, _object*, _PyArg_Parser*, int, int, int, _object**) @nogc nothrow;
    int _PyArg_VaParseTupleAndKeywordsFast(_object*, _object*, _PyArg_Parser*, va_list*) @nogc nothrow;
    int _PyArg_ParseStackAndKeywords(_object**, c_long, _object*, _PyArg_Parser*, ...) @nogc nothrow;
    int _PyArg_ParseStack(_object**, c_long, const(char)*, ...) @nogc nothrow;
    int _PyArg_ParseTupleAndKeywordsFast(_object*, _object*, _PyArg_Parser*, ...) @nogc nothrow;
    struct _PyArg_Parser
    {
        const(char)* format;
        const(const(char)*)* keywords;
        const(char)* fname;
        const(char)* custom_msg;
        int pos;
        int min;
        int max;
        _object* kwtuple;
        _PyArg_Parser* next;
    }
    _object** _Py_VaBuildStack(_object**, c_long, const(char)*, va_list*, c_long*) @nogc nothrow;
    c_long imaxabs(c_long) @nogc nothrow;
    struct imaxdiv_t
    {
        c_long quot;
        c_long rem;
    }
    imaxdiv_t imaxdiv(c_long, c_long) @nogc nothrow;
    c_long strtoimax(const(char)*, char**, int) @nogc nothrow;
    c_ulong strtoumax(const(char)*, char**, int) @nogc nothrow;
    c_long wcstoimax(const(int)*, int**, int) @nogc nothrow;
    c_ulong wcstoumax(const(int)*, int**, int) @nogc nothrow;
    _object* Py_VaBuildValue(const(char)*, va_list*) @nogc nothrow;
    pragma(mangle, "__PyArg_CheckPositional")     int _PyArg_CheckPositional_(const(char)*, c_long, c_long, c_long) @nogc nothrow;
    void _PyArg_BadArgument(const(char)*, const(char)*, const(char)*, _object*) @nogc nothrow;
    pragma(mangle, "__PyArg_NoPositional")     int _PyArg_NoPositional_(const(char)*, _object*) @nogc nothrow;
    pragma(mangle, "__PyArg_NoKeywords")     int _PyArg_NoKeywords_(const(char)*, _object*) @nogc nothrow;
    static ushort _OSSwapInt16(ushort) @nogc nothrow;
    static uint _OSSwapInt32(uint) @nogc nothrow;
    static ulong _OSSwapInt64(ulong) @nogc nothrow;
    int _PyArg_UnpackStack(_object**, c_long, const(char)*, c_long, c_long, ...) @nogc nothrow;
    _object* _Py_BuildValue_SizeT(const(char)*, ...) @nogc nothrow;
    _object* Py_BuildValue(const(char)*, ...) @nogc nothrow;
    int PyArg_UnpackTuple(_object*, const(char)*, c_long, c_long, ...) @nogc nothrow;
    int PyArg_ValidateKeywordArguments(_object*) @nogc nothrow;
    int PyArg_VaParseTupleAndKeywords(_object*, _object*, const(char)*, char**, va_list*) @nogc nothrow;
    int PyArg_VaParse(_object*, const(char)*, va_list*) @nogc nothrow;
    int PyArg_ParseTupleAndKeywords(_object*, _object*, const(char)*, char**, ...) @nogc nothrow;
    int PyArg_ParseTuple(_object*, const(char)*, ...) @nogc nothrow;
    int PyArg_Parse(_object*, const(char)*, ...) @nogc nothrow;
    _object** _Py_VaBuildStack_SizeT(_object**, c_long, const(char)*, va_list*, c_long*) @nogc nothrow;
    _object* _Py_VaBuildValue_SizeT(const(char)*, va_list*) @nogc nothrow;
    void _PyMethod_DebugMallocStats(__sFILE*) @nogc nothrow;
    void _PyCFunction_DebugMallocStats(__sFILE*) @nogc nothrow;
    int PyCFunction_ClearFreeList() @nogc nothrow;
    _object* _PyMethodDef_RawFastCallKeywords(PyMethodDef*, _object*, _object**, c_long, _object*) @nogc nothrow;
    _object* _PyMethodDef_RawFastCallDict(PyMethodDef*, _object*, _object**, c_long, _object*) @nogc nothrow;
    struct PyCFunctionObject
    {
        _object ob_base;
        PyMethodDef* m_ml;
        _object* m_self;
        _object* m_module;
        _object* m_weakreflist;
        _object* function(_object*, _object**, c_ulong, _object*) vectorcall;
    }
    _object* PyCFunction_NewEx(PyMethodDef*, _object*, _object*) @nogc nothrow;
    _object* _PyCFunction_FastCallDict(_object*, _object**, c_long, _object*) @nogc nothrow;
    _object* PyCFunction_Call(_object*, _object*, _object*) @nogc nothrow;
    int PyCFunction_GetFlags(_object*) @nogc nothrow;
    _object* PyCFunction_GetSelf(_object*) @nogc nothrow;
    _object* function(_object*, _object*) PyCFunction_GetFunction(_object*) @nogc nothrow;
    alias PyNoArgsFunction = _object* function(_object*);
    alias _PyCFunctionFastWithKeywords = _object* function(_object*, _object**, c_long, _object*);
    alias PyCFunctionWithKeywords = _object* function(_object*, _object*, _object*);
    alias _PyCFunctionFast = _object* function(_object*, _object**, c_long);
    alias PyCFunction = _object* function(_object*, _object*);
    extern __gshared _typeobject PyCFunction_Type;
    struct PyMemoryViewObject
    {
        PyVarObject ob_base;
        _PyManagedBufferObject* mbuf;
        c_long hash;
        int flags;
        c_long exports;
        bufferinfo view;
        _object* weakreflist;
        c_long[1] ob_array;
    }
    struct _PyManagedBufferObject
    {
        _object ob_base;
        int flags;
        c_long exports;
        bufferinfo master;
    }
    _object* PyMemoryView_GetContiguous(_object*, int, char) @nogc nothrow;
    struct __darwin_i386_thread_state
    {
        uint __eax;
        uint __ebx;
        uint __ecx;
        uint __edx;
        uint __edi;
        uint __esi;
        uint __ebp;
        uint __esp;
        uint __ss;
        uint __eflags;
        uint __eip;
        uint __cs;
        uint __ds;
        uint __es;
        uint __fs;
        uint __gs;
    }
    _object* PyMemoryView_FromBuffer(bufferinfo*) @nogc nothrow;
    struct __darwin_fp_control
    {
        import std.bitmanip: bitfields;
    
        align(4):
        mixin(bitfields!(
            ushort, "__invalid", 1,
            ushort, "__denorm", 1,
            ushort, "__zdiv", 1,
            ushort, "__ovrfl", 1,
            ushort, "__undfl", 1,
            ushort, "__precis", 1,
            ushort, "_anonymous_7", 2,
            ushort, "__pc", 2,
            ushort, "__rc", 2,
            ushort, "_anonymous_8", 1,
            ushort, "_anonymous_9", 3,
        ));
    }
    _object* PyMemoryView_FromMemory(char*, c_long, int) @nogc nothrow;
    _object* PyMemoryView_FromObject(_object*) @nogc nothrow;
    extern __gshared _typeobject PyMemoryView_Type;
    alias __darwin_fp_control_t = __darwin_fp_control;
    struct __darwin_fp_status
    {
        import std.bitmanip: bitfields;
    
        align(4):
        mixin(bitfields!(
            ushort, "__invalid", 1,
            ushort, "__denorm", 1,
            ushort, "__zdiv", 1,
            ushort, "__ovrfl", 1,
            ushort, "__undfl", 1,
            ushort, "__precis", 1,
            ushort, "__stkflt", 1,
            ushort, "__errsumm", 1,
            ushort, "__c0", 1,
            ushort, "__c1", 1,
            ushort, "__c2", 1,
            ushort, "__tos", 3,
            ushort, "__c3", 1,
            ushort, "__busy", 1,
        ));
    }
    alias __darwin_fp_status_t = __darwin_fp_status;
    extern __gshared _typeobject _PyManagedBuffer_Type;
    struct __darwin_mmst_reg
    {
        char[10] __mmst_reg;
        char[6] __mmst_rsrv;
    }
    _object* _PyLong_Lshift(_object*, c_ulong) @nogc nothrow;
    struct __darwin_xmm_reg
    {
        char[16] __xmm_reg;
    }
    struct __darwin_ymm_reg
    {
        char[32] __ymm_reg;
    }
    _object* _PyLong_Rshift(_object*, c_ulong) @nogc nothrow;
    struct __darwin_zmm_reg
    {
        char[64] __zmm_reg;
    }
    struct __darwin_opmask_reg
    {
        char[8] __opmask_reg;
    }
    extern __gshared _object* _PyLong_One;
    struct __darwin_i386_float_state
    {
        int[2] __fpu_reserved;
        __darwin_fp_control __fpu_fcw;
        __darwin_fp_status __fpu_fsw;
        ubyte __fpu_ftw;
        ubyte __fpu_rsrv1;
        ushort __fpu_fop;
        uint __fpu_ip;
        ushort __fpu_cs;
        ushort __fpu_rsrv2;
        uint __fpu_dp;
        ushort __fpu_ds;
        ushort __fpu_rsrv3;
        uint __fpu_mxcsr;
        uint __fpu_mxcsrmask;
        __darwin_mmst_reg __fpu_stmm0;
        __darwin_mmst_reg __fpu_stmm1;
        __darwin_mmst_reg __fpu_stmm2;
        __darwin_mmst_reg __fpu_stmm3;
        __darwin_mmst_reg __fpu_stmm4;
        __darwin_mmst_reg __fpu_stmm5;
        __darwin_mmst_reg __fpu_stmm6;
        __darwin_mmst_reg __fpu_stmm7;
        __darwin_xmm_reg __fpu_xmm0;
        __darwin_xmm_reg __fpu_xmm1;
        __darwin_xmm_reg __fpu_xmm2;
        __darwin_xmm_reg __fpu_xmm3;
        __darwin_xmm_reg __fpu_xmm4;
        __darwin_xmm_reg __fpu_xmm5;
        __darwin_xmm_reg __fpu_xmm6;
        __darwin_xmm_reg __fpu_xmm7;
        char[224] __fpu_rsrv4;
        int __fpu_reserved1;
    }
    struct __darwin_i386_avx_state
    {
        int[2] __fpu_reserved;
        __darwin_fp_control __fpu_fcw;
        __darwin_fp_status __fpu_fsw;
        ubyte __fpu_ftw;
        ubyte __fpu_rsrv1;
        ushort __fpu_fop;
        uint __fpu_ip;
        ushort __fpu_cs;
        ushort __fpu_rsrv2;
        uint __fpu_dp;
        ushort __fpu_ds;
        ushort __fpu_rsrv3;
        uint __fpu_mxcsr;
        uint __fpu_mxcsrmask;
        __darwin_mmst_reg __fpu_stmm0;
        __darwin_mmst_reg __fpu_stmm1;
        __darwin_mmst_reg __fpu_stmm2;
        __darwin_mmst_reg __fpu_stmm3;
        __darwin_mmst_reg __fpu_stmm4;
        __darwin_mmst_reg __fpu_stmm5;
        __darwin_mmst_reg __fpu_stmm6;
        __darwin_mmst_reg __fpu_stmm7;
        __darwin_xmm_reg __fpu_xmm0;
        __darwin_xmm_reg __fpu_xmm1;
        __darwin_xmm_reg __fpu_xmm2;
        __darwin_xmm_reg __fpu_xmm3;
        __darwin_xmm_reg __fpu_xmm4;
        __darwin_xmm_reg __fpu_xmm5;
        __darwin_xmm_reg __fpu_xmm6;
        __darwin_xmm_reg __fpu_xmm7;
        char[224] __fpu_rsrv4;
        int __fpu_reserved1;
        char[64] __avx_reserved1;
        __darwin_xmm_reg __fpu_ymmh0;
        __darwin_xmm_reg __fpu_ymmh1;
        __darwin_xmm_reg __fpu_ymmh2;
        __darwin_xmm_reg __fpu_ymmh3;
        __darwin_xmm_reg __fpu_ymmh4;
        __darwin_xmm_reg __fpu_ymmh5;
        __darwin_xmm_reg __fpu_ymmh6;
        __darwin_xmm_reg __fpu_ymmh7;
    }
    extern __gshared _object* _PyLong_Zero;
    struct __darwin_i386_avx512_state
    {
        int[2] __fpu_reserved;
        __darwin_fp_control __fpu_fcw;
        __darwin_fp_status __fpu_fsw;
        ubyte __fpu_ftw;
        ubyte __fpu_rsrv1;
        ushort __fpu_fop;
        uint __fpu_ip;
        ushort __fpu_cs;
        ushort __fpu_rsrv2;
        uint __fpu_dp;
        ushort __fpu_ds;
        ushort __fpu_rsrv3;
        uint __fpu_mxcsr;
        uint __fpu_mxcsrmask;
        __darwin_mmst_reg __fpu_stmm0;
        __darwin_mmst_reg __fpu_stmm1;
        __darwin_mmst_reg __fpu_stmm2;
        __darwin_mmst_reg __fpu_stmm3;
        __darwin_mmst_reg __fpu_stmm4;
        __darwin_mmst_reg __fpu_stmm5;
        __darwin_mmst_reg __fpu_stmm6;
        __darwin_mmst_reg __fpu_stmm7;
        __darwin_xmm_reg __fpu_xmm0;
        __darwin_xmm_reg __fpu_xmm1;
        __darwin_xmm_reg __fpu_xmm2;
        __darwin_xmm_reg __fpu_xmm3;
        __darwin_xmm_reg __fpu_xmm4;
        __darwin_xmm_reg __fpu_xmm5;
        __darwin_xmm_reg __fpu_xmm6;
        __darwin_xmm_reg __fpu_xmm7;
        char[224] __fpu_rsrv4;
        int __fpu_reserved1;
        char[64] __avx_reserved1;
        __darwin_xmm_reg __fpu_ymmh0;
        __darwin_xmm_reg __fpu_ymmh1;
        __darwin_xmm_reg __fpu_ymmh2;
        __darwin_xmm_reg __fpu_ymmh3;
        __darwin_xmm_reg __fpu_ymmh4;
        __darwin_xmm_reg __fpu_ymmh5;
        __darwin_xmm_reg __fpu_ymmh6;
        __darwin_xmm_reg __fpu_ymmh7;
        __darwin_opmask_reg __fpu_k0;
        __darwin_opmask_reg __fpu_k1;
        __darwin_opmask_reg __fpu_k2;
        __darwin_opmask_reg __fpu_k3;
        __darwin_opmask_reg __fpu_k4;
        __darwin_opmask_reg __fpu_k5;
        __darwin_opmask_reg __fpu_k6;
        __darwin_opmask_reg __fpu_k7;
        __darwin_ymm_reg __fpu_zmmh0;
        __darwin_ymm_reg __fpu_zmmh1;
        __darwin_ymm_reg __fpu_zmmh2;
        __darwin_ymm_reg __fpu_zmmh3;
        __darwin_ymm_reg __fpu_zmmh4;
        __darwin_ymm_reg __fpu_zmmh5;
        __darwin_ymm_reg __fpu_zmmh6;
        __darwin_ymm_reg __fpu_zmmh7;
    }
    _object* _PyLong_GCD(_object*, _object*) @nogc nothrow;
    struct __darwin_i386_exception_state
    {
        ushort __trapno;
        ushort __cpu;
        uint __err;
        uint __faultvaddr;
    }
    struct __darwin_x86_debug_state32
    {
        uint __dr0;
        uint __dr1;
        uint __dr2;
        uint __dr3;
        uint __dr4;
        uint __dr5;
        uint __dr6;
        uint __dr7;
    }
    c_long PyOS_strtol(const(char)*, char**, int) @nogc nothrow;
    struct __x86_pagein_state
    {
        int __pagein_error;
    }
    struct __darwin_x86_thread_state64
    {
        ulong __rax;
        ulong __rbx;
        ulong __rcx;
        ulong __rdx;
        ulong __rdi;
        ulong __rsi;
        ulong __rbp;
        ulong __rsp;
        ulong __r8;
        ulong __r9;
        ulong __r10;
        ulong __r11;
        ulong __r12;
        ulong __r13;
        ulong __r14;
        ulong __r15;
        ulong __rip;
        ulong __rflags;
        ulong __cs;
        ulong __fs;
        ulong __gs;
    }
    c_ulong PyOS_strtoul(const(char)*, char**, int) @nogc nothrow;
    struct __darwin_x86_thread_full_state64
    {
        __darwin_x86_thread_state64 __ss64;
        ulong __ds;
        ulong __es;
        ulong __ss;
        ulong __gsbase;
    }
    struct __darwin_x86_float_state64
    {
        int[2] __fpu_reserved;
        __darwin_fp_control __fpu_fcw;
        __darwin_fp_status __fpu_fsw;
        ubyte __fpu_ftw;
        ubyte __fpu_rsrv1;
        ushort __fpu_fop;
        uint __fpu_ip;
        ushort __fpu_cs;
        ushort __fpu_rsrv2;
        uint __fpu_dp;
        ushort __fpu_ds;
        ushort __fpu_rsrv3;
        uint __fpu_mxcsr;
        uint __fpu_mxcsrmask;
        __darwin_mmst_reg __fpu_stmm0;
        __darwin_mmst_reg __fpu_stmm1;
        __darwin_mmst_reg __fpu_stmm2;
        __darwin_mmst_reg __fpu_stmm3;
        __darwin_mmst_reg __fpu_stmm4;
        __darwin_mmst_reg __fpu_stmm5;
        __darwin_mmst_reg __fpu_stmm6;
        __darwin_mmst_reg __fpu_stmm7;
        __darwin_xmm_reg __fpu_xmm0;
        __darwin_xmm_reg __fpu_xmm1;
        __darwin_xmm_reg __fpu_xmm2;
        __darwin_xmm_reg __fpu_xmm3;
        __darwin_xmm_reg __fpu_xmm4;
        __darwin_xmm_reg __fpu_xmm5;
        __darwin_xmm_reg __fpu_xmm6;
        __darwin_xmm_reg __fpu_xmm7;
        __darwin_xmm_reg __fpu_xmm8;
        __darwin_xmm_reg __fpu_xmm9;
        __darwin_xmm_reg __fpu_xmm10;
        __darwin_xmm_reg __fpu_xmm11;
        __darwin_xmm_reg __fpu_xmm12;
        __darwin_xmm_reg __fpu_xmm13;
        __darwin_xmm_reg __fpu_xmm14;
        __darwin_xmm_reg __fpu_xmm15;
        char[96] __fpu_rsrv4;
        int __fpu_reserved1;
    }
    int _PyLong_FormatAdvancedWriter(_PyUnicodeWriter*, _object*, _object*, c_long, c_long) @nogc nothrow;
    struct __darwin_x86_avx_state64
    {
        int[2] __fpu_reserved;
        __darwin_fp_control __fpu_fcw;
        __darwin_fp_status __fpu_fsw;
        ubyte __fpu_ftw;
        ubyte __fpu_rsrv1;
        ushort __fpu_fop;
        uint __fpu_ip;
        ushort __fpu_cs;
        ushort __fpu_rsrv2;
        uint __fpu_dp;
        ushort __fpu_ds;
        ushort __fpu_rsrv3;
        uint __fpu_mxcsr;
        uint __fpu_mxcsrmask;
        __darwin_mmst_reg __fpu_stmm0;
        __darwin_mmst_reg __fpu_stmm1;
        __darwin_mmst_reg __fpu_stmm2;
        __darwin_mmst_reg __fpu_stmm3;
        __darwin_mmst_reg __fpu_stmm4;
        __darwin_mmst_reg __fpu_stmm5;
        __darwin_mmst_reg __fpu_stmm6;
        __darwin_mmst_reg __fpu_stmm7;
        __darwin_xmm_reg __fpu_xmm0;
        __darwin_xmm_reg __fpu_xmm1;
        __darwin_xmm_reg __fpu_xmm2;
        __darwin_xmm_reg __fpu_xmm3;
        __darwin_xmm_reg __fpu_xmm4;
        __darwin_xmm_reg __fpu_xmm5;
        __darwin_xmm_reg __fpu_xmm6;
        __darwin_xmm_reg __fpu_xmm7;
        __darwin_xmm_reg __fpu_xmm8;
        __darwin_xmm_reg __fpu_xmm9;
        __darwin_xmm_reg __fpu_xmm10;
        __darwin_xmm_reg __fpu_xmm11;
        __darwin_xmm_reg __fpu_xmm12;
        __darwin_xmm_reg __fpu_xmm13;
        __darwin_xmm_reg __fpu_xmm14;
        __darwin_xmm_reg __fpu_xmm15;
        char[96] __fpu_rsrv4;
        int __fpu_reserved1;
        char[64] __avx_reserved1;
        __darwin_xmm_reg __fpu_ymmh0;
        __darwin_xmm_reg __fpu_ymmh1;
        __darwin_xmm_reg __fpu_ymmh2;
        __darwin_xmm_reg __fpu_ymmh3;
        __darwin_xmm_reg __fpu_ymmh4;
        __darwin_xmm_reg __fpu_ymmh5;
        __darwin_xmm_reg __fpu_ymmh6;
        __darwin_xmm_reg __fpu_ymmh7;
        __darwin_xmm_reg __fpu_ymmh8;
        __darwin_xmm_reg __fpu_ymmh9;
        __darwin_xmm_reg __fpu_ymmh10;
        __darwin_xmm_reg __fpu_ymmh11;
        __darwin_xmm_reg __fpu_ymmh12;
        __darwin_xmm_reg __fpu_ymmh13;
        __darwin_xmm_reg __fpu_ymmh14;
        __darwin_xmm_reg __fpu_ymmh15;
    }
    struct __darwin_x86_avx512_state64
    {
        int[2] __fpu_reserved;
        __darwin_fp_control __fpu_fcw;
        __darwin_fp_status __fpu_fsw;
        ubyte __fpu_ftw;
        ubyte __fpu_rsrv1;
        ushort __fpu_fop;
        uint __fpu_ip;
        ushort __fpu_cs;
        ushort __fpu_rsrv2;
        uint __fpu_dp;
        ushort __fpu_ds;
        ushort __fpu_rsrv3;
        uint __fpu_mxcsr;
        uint __fpu_mxcsrmask;
        __darwin_mmst_reg __fpu_stmm0;
        __darwin_mmst_reg __fpu_stmm1;
        __darwin_mmst_reg __fpu_stmm2;
        __darwin_mmst_reg __fpu_stmm3;
        __darwin_mmst_reg __fpu_stmm4;
        __darwin_mmst_reg __fpu_stmm5;
        __darwin_mmst_reg __fpu_stmm6;
        __darwin_mmst_reg __fpu_stmm7;
        __darwin_xmm_reg __fpu_xmm0;
        __darwin_xmm_reg __fpu_xmm1;
        __darwin_xmm_reg __fpu_xmm2;
        __darwin_xmm_reg __fpu_xmm3;
        __darwin_xmm_reg __fpu_xmm4;
        __darwin_xmm_reg __fpu_xmm5;
        __darwin_xmm_reg __fpu_xmm6;
        __darwin_xmm_reg __fpu_xmm7;
        __darwin_xmm_reg __fpu_xmm8;
        __darwin_xmm_reg __fpu_xmm9;
        __darwin_xmm_reg __fpu_xmm10;
        __darwin_xmm_reg __fpu_xmm11;
        __darwin_xmm_reg __fpu_xmm12;
        __darwin_xmm_reg __fpu_xmm13;
        __darwin_xmm_reg __fpu_xmm14;
        __darwin_xmm_reg __fpu_xmm15;
        char[96] __fpu_rsrv4;
        int __fpu_reserved1;
        char[64] __avx_reserved1;
        __darwin_xmm_reg __fpu_ymmh0;
        __darwin_xmm_reg __fpu_ymmh1;
        __darwin_xmm_reg __fpu_ymmh2;
        __darwin_xmm_reg __fpu_ymmh3;
        __darwin_xmm_reg __fpu_ymmh4;
        __darwin_xmm_reg __fpu_ymmh5;
        __darwin_xmm_reg __fpu_ymmh6;
        __darwin_xmm_reg __fpu_ymmh7;
        __darwin_xmm_reg __fpu_ymmh8;
        __darwin_xmm_reg __fpu_ymmh9;
        __darwin_xmm_reg __fpu_ymmh10;
        __darwin_xmm_reg __fpu_ymmh11;
        __darwin_xmm_reg __fpu_ymmh12;
        __darwin_xmm_reg __fpu_ymmh13;
        __darwin_xmm_reg __fpu_ymmh14;
        __darwin_xmm_reg __fpu_ymmh15;
        __darwin_opmask_reg __fpu_k0;
        __darwin_opmask_reg __fpu_k1;
        __darwin_opmask_reg __fpu_k2;
        __darwin_opmask_reg __fpu_k3;
        __darwin_opmask_reg __fpu_k4;
        __darwin_opmask_reg __fpu_k5;
        __darwin_opmask_reg __fpu_k6;
        __darwin_opmask_reg __fpu_k7;
        __darwin_ymm_reg __fpu_zmmh0;
        __darwin_ymm_reg __fpu_zmmh1;
        __darwin_ymm_reg __fpu_zmmh2;
        __darwin_ymm_reg __fpu_zmmh3;
        __darwin_ymm_reg __fpu_zmmh4;
        __darwin_ymm_reg __fpu_zmmh5;
        __darwin_ymm_reg __fpu_zmmh6;
        __darwin_ymm_reg __fpu_zmmh7;
        __darwin_ymm_reg __fpu_zmmh8;
        __darwin_ymm_reg __fpu_zmmh9;
        __darwin_ymm_reg __fpu_zmmh10;
        __darwin_ymm_reg __fpu_zmmh11;
        __darwin_ymm_reg __fpu_zmmh12;
        __darwin_ymm_reg __fpu_zmmh13;
        __darwin_ymm_reg __fpu_zmmh14;
        __darwin_ymm_reg __fpu_zmmh15;
        __darwin_zmm_reg __fpu_zmm16;
        __darwin_zmm_reg __fpu_zmm17;
        __darwin_zmm_reg __fpu_zmm18;
        __darwin_zmm_reg __fpu_zmm19;
        __darwin_zmm_reg __fpu_zmm20;
        __darwin_zmm_reg __fpu_zmm21;
        __darwin_zmm_reg __fpu_zmm22;
        __darwin_zmm_reg __fpu_zmm23;
        __darwin_zmm_reg __fpu_zmm24;
        __darwin_zmm_reg __fpu_zmm25;
        __darwin_zmm_reg __fpu_zmm26;
        __darwin_zmm_reg __fpu_zmm27;
        __darwin_zmm_reg __fpu_zmm28;
        __darwin_zmm_reg __fpu_zmm29;
        __darwin_zmm_reg __fpu_zmm30;
        __darwin_zmm_reg __fpu_zmm31;
    }
    char* _PyLong_FormatBytesWriter(_PyBytesWriter*, char*, _object*, int, int) @nogc nothrow;
    struct __darwin_x86_exception_state64
    {
        ushort __trapno;
        ushort __cpu;
        uint __err;
        ulong __faultvaddr;
    }
    struct __darwin_x86_debug_state64
    {
        ulong __dr0;
        ulong __dr1;
        ulong __dr2;
        ulong __dr3;
        ulong __dr4;
        ulong __dr5;
        ulong __dr6;
        ulong __dr7;
    }
    int _PyLong_FormatWriter(_PyUnicodeWriter*, _object*, int, int) @nogc nothrow;
    struct __darwin_x86_cpmu_state64
    {
        ulong[16] __ctrs;
    }
    _object* _PyLong_Format(_object*, int) @nogc nothrow;
    _object* _PyLong_FromNbIndexOrNbInt(_object*) @nogc nothrow;
    _object* _PyLong_FromNbInt(_object*) @nogc nothrow;
    void* malloc(c_ulong) @nogc nothrow;
    void* calloc(c_ulong, c_ulong) @nogc nothrow;
    void free(void*) @nogc nothrow;
    void* realloc(void*, c_ulong) @nogc nothrow;
    void* valloc(c_ulong) @nogc nothrow;
    void* aligned_alloc(c_ulong, c_ulong) @nogc nothrow;
    int posix_memalign(void**, c_ulong, c_ulong) @nogc nothrow;
    int _PyLong_AsByteArray(_longobject*, ubyte*, c_ulong, int, int) @nogc nothrow;
    alias float_t = float;
    alias double_t = double;
    _object* _PyLong_FromByteArray(const(ubyte)*, c_ulong, int, int) @nogc nothrow;
    _object* _PyLong_DivmodNear(_object*, _object*) @nogc nothrow;
    c_ulong _PyLong_NumBits(_object*) @nogc nothrow;
    int _PyLong_Sign(_object*) @nogc nothrow;
    _object* _PyLong_FromBytes(const(char)*, c_long, int) @nogc nothrow;
    _object* PyLong_FromUnicodeObject(_object*, int) @nogc nothrow;
    _object* PyLong_FromUnicode(int*, c_long, int) @nogc nothrow;
    int __math_errhandling() @nogc nothrow;
    _object* PyLong_FromString(const(char)*, char**, int) @nogc nothrow;
    int __fpclassifyf(float) @nogc nothrow;
    int __fpclassifyd(double) @nogc nothrow;
    int __fpclassifyl(real) @nogc nothrow;
    long PyLong_AsLongLongAndOverflow(_object*, int*) @nogc nothrow;
    ulong PyLong_AsUnsignedLongLongMask(_object*) @nogc nothrow;
    int __inline_isfinitef(float) @nogc nothrow;
    int __inline_isfinited(double) @nogc nothrow;
    int __inline_isfinitel(real) @nogc nothrow;
    int __inline_isinff(float) @nogc nothrow;
    int __inline_isinfd(double) @nogc nothrow;
    int __inline_isinfl(real) @nogc nothrow;
    int __inline_isnanf(float) @nogc nothrow;
    int __inline_isnand(double) @nogc nothrow;
    int __inline_isnanl(real) @nogc nothrow;
    int __inline_isnormalf(float) @nogc nothrow;
    int __inline_isnormald(double) @nogc nothrow;
    int __inline_isnormall(real) @nogc nothrow;
    int __inline_signbitf(float) @nogc nothrow;
    int __inline_signbitd(double) @nogc nothrow;
    int __inline_signbitl(real) @nogc nothrow;
    float acosf(float) @nogc nothrow;
    double acos(double) @nogc nothrow;
    real acosl(real) @nogc nothrow;
    float asinf(float) @nogc nothrow;
    double asin(double) @nogc nothrow;
    real asinl(real) @nogc nothrow;
    float atanf(float) @nogc nothrow;
    double atan(double) @nogc nothrow;
    real atanl(real) @nogc nothrow;
    float atan2f(float, float) @nogc nothrow;
    double atan2(double, double) @nogc nothrow;
    real atan2l(real, real) @nogc nothrow;
    float cosf(float) @nogc nothrow;
    double cos(double) @nogc nothrow;
    real cosl(real) @nogc nothrow;
    float sinf(float) @nogc nothrow;
    double sin(double) @nogc nothrow;
    real sinl(real) @nogc nothrow;
    float tanf(float) @nogc nothrow;
    double tan(double) @nogc nothrow;
    real tanl(real) @nogc nothrow;
    float acoshf(float) @nogc nothrow;
    double acosh(double) @nogc nothrow;
    real acoshl(real) @nogc nothrow;
    float asinhf(float) @nogc nothrow;
    double asinh(double) @nogc nothrow;
    real asinhl(real) @nogc nothrow;
    float atanhf(float) @nogc nothrow;
    double atanh(double) @nogc nothrow;
    real atanhl(real) @nogc nothrow;
    float coshf(float) @nogc nothrow;
    double cosh(double) @nogc nothrow;
    real coshl(real) @nogc nothrow;
    float sinhf(float) @nogc nothrow;
    double sinh(double) @nogc nothrow;
    real sinhl(real) @nogc nothrow;
    float tanhf(float) @nogc nothrow;
    double tanh(double) @nogc nothrow;
    real tanhl(real) @nogc nothrow;
    float expf(float) @nogc nothrow;
    double exp(double) @nogc nothrow;
    real expl(real) @nogc nothrow;
    float exp2f(float) @nogc nothrow;
    double exp2(double) @nogc nothrow;
    real exp2l(real) @nogc nothrow;
    float expm1f(float) @nogc nothrow;
    double expm1(double) @nogc nothrow;
    real expm1l(real) @nogc nothrow;
    float logf(float) @nogc nothrow;
    double log(double) @nogc nothrow;
    real logl(real) @nogc nothrow;
    float log10f(float) @nogc nothrow;
    double log10(double) @nogc nothrow;
    real log10l(real) @nogc nothrow;
    float log2f(float) @nogc nothrow;
    double log2(double) @nogc nothrow;
    real log2l(real) @nogc nothrow;
    float log1pf(float) @nogc nothrow;
    double log1p(double) @nogc nothrow;
    real log1pl(real) @nogc nothrow;
    float logbf(float) @nogc nothrow;
    double logb(double) @nogc nothrow;
    real logbl(real) @nogc nothrow;
    float modff(float, float*) @nogc nothrow;
    double modf(double, double*) @nogc nothrow;
    real modfl(real, real*) @nogc nothrow;
    float ldexpf(float, int) @nogc nothrow;
    double ldexp(double, int) @nogc nothrow;
    real ldexpl(real, int) @nogc nothrow;
    float frexpf(float, int*) @nogc nothrow;
    double frexp(double, int*) @nogc nothrow;
    real frexpl(real, int*) @nogc nothrow;
    int ilogbf(float) @nogc nothrow;
    int ilogb(double) @nogc nothrow;
    int ilogbl(real) @nogc nothrow;
    float scalbnf(float, int) @nogc nothrow;
    double scalbn(double, int) @nogc nothrow;
    real scalbnl(real, int) @nogc nothrow;
    float scalblnf(float, c_long) @nogc nothrow;
    double scalbln(double, c_long) @nogc nothrow;
    real scalblnl(real, c_long) @nogc nothrow;
    float fabsf(float) @nogc nothrow;
    double fabs(double) @nogc nothrow;
    real fabsl(real) @nogc nothrow;
    float cbrtf(float) @nogc nothrow;
    double cbrt(double) @nogc nothrow;
    real cbrtl(real) @nogc nothrow;
    float hypotf(float, float) @nogc nothrow;
    double hypot(double, double) @nogc nothrow;
    real hypotl(real, real) @nogc nothrow;
    float powf(float, float) @nogc nothrow;
    double pow(double, double) @nogc nothrow;
    real powl(real, real) @nogc nothrow;
    float sqrtf(float) @nogc nothrow;
    double sqrt(double) @nogc nothrow;
    real sqrtl(real) @nogc nothrow;
    float erff(float) @nogc nothrow;
    double erf(double) @nogc nothrow;
    real erfl(real) @nogc nothrow;
    float erfcf(float) @nogc nothrow;
    double erfc(double) @nogc nothrow;
    real erfcl(real) @nogc nothrow;
    float lgammaf(float) @nogc nothrow;
    double lgamma(double) @nogc nothrow;
    real lgammal(real) @nogc nothrow;
    float tgammaf(float) @nogc nothrow;
    double tgamma(double) @nogc nothrow;
    real tgammal(real) @nogc nothrow;
    float ceilf(float) @nogc nothrow;
    double ceil(double) @nogc nothrow;
    real ceill(real) @nogc nothrow;
    float floorf(float) @nogc nothrow;
    double floor(double) @nogc nothrow;
    real floorl(real) @nogc nothrow;
    float nearbyintf(float) @nogc nothrow;
    double nearbyint(double) @nogc nothrow;
    real nearbyintl(real) @nogc nothrow;
    float rintf(float) @nogc nothrow;
    double rint(double) @nogc nothrow;
    real rintl(real) @nogc nothrow;
    c_long lrintf(float) @nogc nothrow;
    c_long lrint(double) @nogc nothrow;
    c_long lrintl(real) @nogc nothrow;
    float roundf(float) @nogc nothrow;
    double round(double) @nogc nothrow;
    real roundl(real) @nogc nothrow;
    c_long lroundf(float) @nogc nothrow;
    c_long lround(double) @nogc nothrow;
    c_long lroundl(real) @nogc nothrow;
    long llrintf(float) @nogc nothrow;
    long llrint(double) @nogc nothrow;
    long llrintl(real) @nogc nothrow;
    long llroundf(float) @nogc nothrow;
    long llround(double) @nogc nothrow;
    long llroundl(real) @nogc nothrow;
    float truncf(float) @nogc nothrow;
    double trunc(double) @nogc nothrow;
    real truncl(real) @nogc nothrow;
    float fmodf(float, float) @nogc nothrow;
    double fmod(double, double) @nogc nothrow;
    real fmodl(real, real) @nogc nothrow;
    float remainderf(float, float) @nogc nothrow;
    double remainder(double, double) @nogc nothrow;
    real remainderl(real, real) @nogc nothrow;
    float remquof(float, float, int*) @nogc nothrow;
    double remquo(double, double, int*) @nogc nothrow;
    real remquol(real, real, int*) @nogc nothrow;
    float copysignf(float, float) @nogc nothrow;
    double copysign(double, double) @nogc nothrow;
    real copysignl(real, real) @nogc nothrow;
    float nanf(const(char)*) @nogc nothrow;
    double nan(const(char)*) @nogc nothrow;
    real nanl(const(char)*) @nogc nothrow;
    float nextafterf(float, float) @nogc nothrow;
    double nextafter(double, double) @nogc nothrow;
    real nextafterl(real, real) @nogc nothrow;
    double nexttoward(double, real) @nogc nothrow;
    float nexttowardf(float, real) @nogc nothrow;
    real nexttowardl(real, real) @nogc nothrow;
    float fdimf(float, float) @nogc nothrow;
    double fdim(double, double) @nogc nothrow;
    real fdiml(real, real) @nogc nothrow;
    float fmaxf(float, float) @nogc nothrow;
    double fmax(double, double) @nogc nothrow;
    real fmaxl(real, real) @nogc nothrow;
    float fminf(float, float) @nogc nothrow;
    double fmin(double, double) @nogc nothrow;
    real fminl(real, real) @nogc nothrow;
    float fmaf(float, float, float) @nogc nothrow;
    double fma(double, double, double) @nogc nothrow;
    real fmal(real, real, real) @nogc nothrow;
    ulong PyLong_AsUnsignedLongLong(_object*) @nogc nothrow;
    long PyLong_AsLongLong(_object*) @nogc nothrow;
    _object* PyLong_FromUnsignedLongLong(ulong) @nogc nothrow;
    float __inff() @nogc nothrow;
    double __inf() @nogc nothrow;
    real __infl() @nogc nothrow;
    float __nan() @nogc nothrow;
    float lgammaf_r(float, int*) @nogc nothrow;
    double lgamma_r(double, int*) @nogc nothrow;
    real lgammal_r(real, int*) @nogc nothrow;
    float __exp10f(float) @nogc nothrow;
    double __exp10(double) @nogc nothrow;
    void __sincosf(float, float*, float*) @nogc nothrow;
    void __sincos(double, double*, double*) @nogc nothrow;
    float __cospif(float) @nogc nothrow;
    double __cospi(double) @nogc nothrow;
    float __sinpif(float) @nogc nothrow;
    double __sinpi(double) @nogc nothrow;
    float __tanpif(float) @nogc nothrow;
    double __tanpi(double) @nogc nothrow;
    void __sincospif(float, float*, float*) @nogc nothrow;
    void __sincospi(double, double*, double*) @nogc nothrow;
    struct __float2
    {
        float __sinval;
        float __cosval;
    }
    struct __double2
    {
        double __sinval;
        double __cosval;
    }
    __float2 __sincosf_stret(float) @nogc nothrow;
    __double2 __sincos_stret(double) @nogc nothrow;
    __float2 __sincospif_stret(float) @nogc nothrow;
    __double2 __sincospi_stret(double) @nogc nothrow;
    double j0(double) @nogc nothrow;
    double j1(double) @nogc nothrow;
    double jn(int, double) @nogc nothrow;
    double y0(double) @nogc nothrow;
    double y1(double) @nogc nothrow;
    double yn(int, double) @nogc nothrow;
    double scalb(double, double) @nogc nothrow;
    extern __gshared int signgam;
    _object* PyLong_FromLongLong(long) @nogc nothrow;
    void* PyLong_AsVoidPtr(_object*) @nogc nothrow;
    _object* PyLong_FromVoidPtr(void*) @nogc nothrow;
    double PyLong_AsDouble(_object*) @nogc nothrow;
    double _PyLong_Frexp(_longobject*, c_long*) @nogc nothrow;
    extern __gshared ubyte[256] _PyLong_DigitValue;
    int _PyLong_Size_t_Converter(_object*, void*) @nogc nothrow;
    int _PyLong_UnsignedLongLong_Converter(_object*, void*) @nogc nothrow;
    int _PyLong_UnsignedLong_Converter(_object*, void*) @nogc nothrow;
    int _PyLong_UnsignedInt_Converter(_object*, void*) @nogc nothrow;
    int _PyLong_UnsignedShort_Converter(_object*, void*) @nogc nothrow;
    c_long rinttol(double) @nogc nothrow;
    c_long roundtol(double) @nogc nothrow;
    double drem(double, double) @nogc nothrow;
    int finite(double) @nogc nothrow;
    double gamma(double) @nogc nothrow;
    double significand(double) @nogc nothrow;
    struct exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    }
    _object* PyLong_GetInfo() @nogc nothrow;
    int _PyLong_AsInt(_object*) @nogc nothrow;
    c_ulong PyLong_AsUnsignedLongMask(_object*) @nogc nothrow;
    c_ulong PyLong_AsUnsignedLong(_object*) @nogc nothrow;
    c_ulong PyLong_AsSize_t(_object*) @nogc nothrow;
    c_long PyLong_AsSsize_t(_object*) @nogc nothrow;
    c_long PyLong_AsLongAndOverflow(_object*, int*) @nogc nothrow;
    c_long PyLong_AsLong(_object*) @nogc nothrow;
    _object* PyLong_FromDouble(double) @nogc nothrow;
    _object* PyLong_FromSsize_t(c_long) @nogc nothrow;
    _object* PyLong_FromSize_t(c_ulong) @nogc nothrow;
    _object* PyLong_FromUnsignedLong(c_ulong) @nogc nothrow;
    _object* PyLong_FromLong(c_long) @nogc nothrow;
    int pthread_atfork(void function(), void function(), void function()) @nogc nothrow;
    int pthread_attr_destroy(_opaque_pthread_attr_t*) @nogc nothrow;
    int pthread_attr_getdetachstate(const(_opaque_pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_getguardsize(const(_opaque_pthread_attr_t)*, c_ulong*) @nogc nothrow;
    int pthread_attr_getinheritsched(const(_opaque_pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_getschedparam(const(_opaque_pthread_attr_t)*, sched_param*) @nogc nothrow;
    int pthread_attr_getschedpolicy(const(_opaque_pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_getscope(const(_opaque_pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_getstack(const(_opaque_pthread_attr_t)*, void**, c_ulong*) @nogc nothrow;
    int pthread_attr_getstackaddr(const(_opaque_pthread_attr_t)*, void**) @nogc nothrow;
    int pthread_attr_getstacksize(const(_opaque_pthread_attr_t)*, c_ulong*) @nogc nothrow;
    int pthread_attr_init(_opaque_pthread_attr_t*) @nogc nothrow;
    int pthread_attr_setdetachstate(_opaque_pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_setguardsize(_opaque_pthread_attr_t*, c_ulong) @nogc nothrow;
    int pthread_attr_setinheritsched(_opaque_pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_setschedparam(_opaque_pthread_attr_t*, const(sched_param)*) @nogc nothrow;
    int pthread_attr_setschedpolicy(_opaque_pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_setscope(_opaque_pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_setstack(_opaque_pthread_attr_t*, void*, c_ulong) @nogc nothrow;
    int pthread_attr_setstackaddr(_opaque_pthread_attr_t*, void*) @nogc nothrow;
    int pthread_attr_setstacksize(_opaque_pthread_attr_t*, c_ulong) @nogc nothrow;
    int pthread_cancel(_opaque_pthread_t*) @nogc nothrow;
    int pthread_cond_broadcast(_opaque_pthread_cond_t*) @nogc nothrow;
    int pthread_cond_destroy(_opaque_pthread_cond_t*) @nogc nothrow;
    int pthread_cond_init(_opaque_pthread_cond_t*, const(_opaque_pthread_condattr_t)*) @nogc nothrow;
    int pthread_cond_signal(_opaque_pthread_cond_t*) @nogc nothrow;
    int pthread_cond_timedwait(_opaque_pthread_cond_t*, _opaque_pthread_mutex_t*, const(timespec)*) @nogc nothrow;
    int pthread_cond_wait(_opaque_pthread_cond_t*, _opaque_pthread_mutex_t*) @nogc nothrow;
    int pthread_condattr_destroy(_opaque_pthread_condattr_t*) @nogc nothrow;
    int pthread_condattr_init(_opaque_pthread_condattr_t*) @nogc nothrow;
    int pthread_condattr_getpshared(const(_opaque_pthread_condattr_t)*, int*) @nogc nothrow;
    int pthread_condattr_setpshared(_opaque_pthread_condattr_t*, int) @nogc nothrow;
    int pthread_create(_opaque_pthread_t**, const(_opaque_pthread_attr_t)*, void* function(void*), void*) @nogc nothrow;
    int pthread_detach(_opaque_pthread_t*) @nogc nothrow;
    int pthread_equal(_opaque_pthread_t*, _opaque_pthread_t*) @nogc nothrow;
    void pthread_exit(void*) @nogc nothrow;
    int pthread_getconcurrency() @nogc nothrow;
    int pthread_getschedparam(_opaque_pthread_t*, int*, sched_param*) @nogc nothrow;
    void* pthread_getspecific(c_ulong) @nogc nothrow;
    int pthread_join(_opaque_pthread_t*, void**) @nogc nothrow;
    int pthread_key_create(c_ulong*, void function(void*)) @nogc nothrow;
    int pthread_key_delete(c_ulong) @nogc nothrow;
    int pthread_mutex_destroy(_opaque_pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_getprioceiling(const(_opaque_pthread_mutex_t)*, int*) @nogc nothrow;
    int pthread_mutex_init(_opaque_pthread_mutex_t*, const(_opaque_pthread_mutexattr_t)*) @nogc nothrow;
    int pthread_mutex_lock(_opaque_pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_setprioceiling(_opaque_pthread_mutex_t*, int, int*) @nogc nothrow;
    int pthread_mutex_trylock(_opaque_pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_unlock(_opaque_pthread_mutex_t*) @nogc nothrow;
    int pthread_mutexattr_destroy(_opaque_pthread_mutexattr_t*) @nogc nothrow;
    int pthread_mutexattr_getprioceiling(const(_opaque_pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_getprotocol(const(_opaque_pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_getpshared(const(_opaque_pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_gettype(const(_opaque_pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_getpolicy_np(const(_opaque_pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_init(_opaque_pthread_mutexattr_t*) @nogc nothrow;
    int pthread_mutexattr_setprioceiling(_opaque_pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_setprotocol(_opaque_pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_setpshared(_opaque_pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_settype(_opaque_pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_setpolicy_np(_opaque_pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_once(_opaque_pthread_once_t*, void function()) @nogc nothrow;
    int pthread_rwlock_destroy(_opaque_pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_init(_opaque_pthread_rwlock_t*, const(_opaque_pthread_rwlockattr_t)*) @nogc nothrow;
    int pthread_rwlock_rdlock(_opaque_pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_tryrdlock(_opaque_pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_trywrlock(_opaque_pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_wrlock(_opaque_pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_unlock(_opaque_pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlockattr_destroy(_opaque_pthread_rwlockattr_t*) @nogc nothrow;
    int pthread_rwlockattr_getpshared(const(_opaque_pthread_rwlockattr_t)*, int*) @nogc nothrow;
    int pthread_rwlockattr_init(_opaque_pthread_rwlockattr_t*) @nogc nothrow;
    int pthread_rwlockattr_setpshared(_opaque_pthread_rwlockattr_t*, int) @nogc nothrow;
    _opaque_pthread_t* pthread_self() @nogc nothrow;
    int pthread_setcancelstate(int, int*) @nogc nothrow;
    int pthread_setcanceltype(int, int*) @nogc nothrow;
    int pthread_setconcurrency(int) @nogc nothrow;
    int pthread_setschedparam(_opaque_pthread_t*, int, const(sched_param)*) @nogc nothrow;
    int pthread_setspecific(c_ulong, const(void)*) @nogc nothrow;
    void pthread_testcancel() @nogc nothrow;
    int pthread_is_threaded_np() @nogc nothrow;
    int pthread_threadid_np(_opaque_pthread_t*, ulong*) @nogc nothrow;
    int pthread_getname_np(_opaque_pthread_t*, char*, c_ulong) @nogc nothrow;
    int pthread_setname_np(const(char)*) @nogc nothrow;
    int pthread_main_np() @nogc nothrow;
    uint pthread_mach_thread_np(_opaque_pthread_t*) @nogc nothrow;
    c_ulong pthread_get_stacksize_np(_opaque_pthread_t*) @nogc nothrow;
    void* pthread_get_stackaddr_np(_opaque_pthread_t*) @nogc nothrow;
    int pthread_cond_signal_thread_np(_opaque_pthread_cond_t*, _opaque_pthread_t*) @nogc nothrow;
    int pthread_cond_timedwait_relative_np(_opaque_pthread_cond_t*, _opaque_pthread_mutex_t*, const(timespec)*) @nogc nothrow;
    int pthread_create_suspended_np(_opaque_pthread_t**, const(_opaque_pthread_attr_t)*, void* function(void*), void*) @nogc nothrow;
    int pthread_kill(_opaque_pthread_t*, int) @nogc nothrow;
    _opaque_pthread_t* pthread_from_mach_thread_np(uint) @nogc nothrow;
    int pthread_sigmask(int, const(uint)*, uint*) @nogc nothrow;
    void pthread_yield_np() @nogc nothrow;
    extern __gshared _typeobject PyLong_Type;
    int pthread_attr_set_qos_class_np(_opaque_pthread_attr_t*, uint, int) @nogc nothrow;
    int pthread_attr_get_qos_class_np(_opaque_pthread_attr_t*, uint*, int*) @nogc nothrow;
    int pthread_set_qos_class_self_np(uint, int) @nogc nothrow;
    int pthread_get_qos_class_np(_opaque_pthread_t*, uint*, int*) @nogc nothrow;
    alias pthread_override_t = pthread_override_s*;
    struct pthread_override_s;
    pthread_override_s* pthread_override_qos_class_start_np(_opaque_pthread_t*, uint, int) @nogc nothrow;
    int pthread_override_qos_class_end_np(pthread_override_s*) @nogc nothrow;
    struct _longobject
    {
        PyVarObject ob_base;
        uint[1] ob_digit;
    }
    struct sched_param
    {
        int sched_priority;
        char[4] __opaque;
    }
    int sched_yield() @nogc nothrow;
    int sched_get_priority_min(int) @nogc nothrow;
    int sched_get_priority_max(int) @nogc nothrow;
    alias PyLongObject = _longobject;
    _object* _PyLong_Copy(_longobject*) @nogc nothrow;
    _longobject* _PyLong_New(c_long) @nogc nothrow;
    alias stwodigits = long;
    alias twodigits = ulong;
    alias sdigit = int;
    alias digit = uint;
    void _PyList_DebugMallocStats(__sFILE*) @nogc nothrow;
    int PyList_ClearFreeList() @nogc nothrow;
    struct _RuneEntry
    {
        int __min;
        int __max;
        int __map;
        uint* __types;
    }
    struct _RuneRange
    {
        int __nranges;
        _RuneEntry* __ranges;
    }
    struct _RuneCharClass
    {
        char[14] __name;
        uint __mask;
    }
    struct _RuneLocale
    {
        char[8] __magic;
        char[32] __encoding;
        int function(const(char)*, c_ulong, const(char)**) __sgetrune;
        int function(int, char*, c_ulong, char**) __sputrune;
        int __invalid_rune;
        uint[256] __runetype;
        int[256] __maplower;
        int[256] __mapupper;
        _RuneRange __runetype_ext;
        _RuneRange __maplower_ext;
        _RuneRange __mapupper_ext;
        void* __variable;
        int __variable_len;
        int __ncharclasses;
        _RuneCharClass* __charclasses;
    }
    extern __gshared _RuneLocale _DefaultRuneLocale;
    extern __gshared _RuneLocale* _CurrentRuneLocale;
    _object* _PyList_Extend(PyListObject*, _object*) @nogc nothrow;
    _object* PyList_AsTuple(_object*) @nogc nothrow;
    int PyList_Reverse(_object*) @nogc nothrow;
    int __sprintf_chk(char*, int, c_ulong, const(char)*, ...) @nogc nothrow;
    int __snprintf_chk(char*, c_ulong, int, c_ulong, const(char)*, ...) @nogc nothrow;
    int PyList_Sort(_object*) @nogc nothrow;
    int __vsprintf_chk(char*, int, c_ulong, const(char)*, va_list*) @nogc nothrow;
    int __vsnprintf_chk(char*, c_ulong, int, c_ulong, const(char)*, va_list*) @nogc nothrow;
    int PyList_SetSlice(_object*, c_long, c_long, _object*) @nogc nothrow;
    _object* PyList_GetSlice(_object*, c_long, c_long) @nogc nothrow;
    int PyList_Append(_object*, _object*) @nogc nothrow;
    int PyList_Insert(_object*, c_long, _object*) @nogc nothrow;
    int PyList_SetItem(_object*, c_long, _object*) @nogc nothrow;
    _object* PyList_GetItem(_object*, c_long) @nogc nothrow;
    c_long PyList_Size(_object*) @nogc nothrow;
    _object* PyList_New(c_long) @nogc nothrow;
    extern __gshared _typeobject PySortWrapper_Type;
    extern __gshared _typeobject PyListRevIter_Type;
    alias int_least8_t = byte;
    alias int_least16_t = short;
    alias int_least32_t = int;
    alias int_least64_t = long;
    alias uint_least8_t = ubyte;
    alias uint_least16_t = ushort;
    alias uint_least32_t = uint;
    alias uint_least64_t = ulong;
    alias int_fast8_t = byte;
    alias int_fast16_t = short;
    alias int_fast32_t = int;
    alias int_fast64_t = long;
    alias uint_fast8_t = ubyte;
    alias uint_fast16_t = ushort;
    alias uint_fast32_t = uint;
    alias uint_fast64_t = ulong;
    extern __gshared _typeobject PyListIter_Type;
    extern __gshared _typeobject PyList_Type;
    struct PyListObject
    {
        PyVarObject ob_base;
        _object** ob_item;
        c_long allocated;
    }
    _object* PyCallIter_New(_object*, _object*) @nogc nothrow;
    _object* PySeqIter_New(_object*) @nogc nothrow;
    extern __gshared _typeobject PyCmpWrapper_Type;
    extern __gshared _typeobject PyCallIter_Type;
    extern __gshared _typeobject PySeqIter_Type;
    void _PySignal_AfterFork() @nogc nothrow;
    int _PyOS_IsMainThread() @nogc nothrow;
    void PyOS_AfterFork() @nogc nothrow;
    void PyOS_AfterFork_Child() @nogc nothrow;
    void PyOS_AfterFork_Parent() @nogc nothrow;
    void PyOS_BeforeFork() @nogc nothrow;
    void PyOS_InitInterrupts() @nogc nothrow;
    int PyOS_InterruptOccurred() @nogc nothrow;
    extern __gshared const(_frozen)* PyImport_FrozenModules;
    struct _frozen
    {
        const(char)* name;
        const(ubyte)* code;
        int size;
    }
    int PyImport_AppendInittab(const(char)*, _object* function()) @nogc nothrow;
    extern __gshared _typeobject PyNullImporter_Type;
    int PyImport_ExtendInittab(_inittab*) @nogc nothrow;
    extern __gshared _inittab* PyImport_Inittab;
    struct _inittab
    {
        const(char)* name;
        _object* function() initfunc;
    }
    int _PyImport_FixupExtensionObject(_object*, _object*, _object*, _object*) @nogc nothrow;
    int _PyImport_FixupBuiltin(_object*, const(char)*, _object*) @nogc nothrow;
    _object* _PyImport_FindExtensionObjectEx(_object*, _object*, _object*) @nogc nothrow;
    _object* _PyImport_FindExtensionObject(_object*, _object*) @nogc nothrow;
    _object* _PyImport_FindBuiltin(const(char)*, _object*) @nogc nothrow;
    void _PyImport_ReInitLock() @nogc nothrow;
    int _PyImport_ReleaseLock() @nogc nothrow;
    void _PyImport_AcquireLock() @nogc nothrow;
    extern __gshared __sFILE* __stdinp;
    extern __gshared __sFILE* __stdoutp;
    extern __gshared __sFILE* __stderrp;
    int PyImport_ImportFrozenModule(const(char)*) @nogc nothrow;
    int PyImport_ImportFrozenModuleObject(_object*) @nogc nothrow;
    void PyImport_Cleanup() @nogc nothrow;
    _object* PyImport_ReloadModule(_object*) @nogc nothrow;
    _object* PyImport_Import(_object*) @nogc nothrow;
    _object* PyImport_GetImporter(_object*) @nogc nothrow;
    _object* PyImport_ImportModuleLevelObject(_object*, _object*, _object*, _object*, int) @nogc nothrow;
    _object* PyImport_ImportModuleLevel(const(char)*, _object*, _object*, _object*, int) @nogc nothrow;
    _object* PyImport_ImportModuleNoBlock(const(char)*) @nogc nothrow;
    _object* PyImport_ImportModule(const(char)*) @nogc nothrow;
    _object* PyImport_AddModule(const(char)*) @nogc nothrow;
    _object* PyImport_AddModuleObject(_object*) @nogc nothrow;
    int _PyImport_SetModuleString(const(char)*, _object*) @nogc nothrow;
    int _PyImport_SetModule(_object*, _object*) @nogc nothrow;
    _object* _PyImport_AddModuleObject(_object*, _object*) @nogc nothrow;
    _object* _PyImport_GetModuleId(_Py_Identifier*) @nogc nothrow;
    void clearerr(__sFILE*) @nogc nothrow;
    int fclose(__sFILE*) @nogc nothrow;
    int feof(__sFILE*) @nogc nothrow;
    int ferror(__sFILE*) @nogc nothrow;
    int fflush(__sFILE*) @nogc nothrow;
    int fgetc(__sFILE*) @nogc nothrow;
    int fgetpos(__sFILE*, long*) @nogc nothrow;
    char* fgets(char*, int, __sFILE*) @nogc nothrow;
    __sFILE* fopen(const(char)*, const(char)*) @nogc nothrow;
    int fprintf(__sFILE*, const(char)*, ...) @nogc nothrow;
    int fputc(int, __sFILE*) @nogc nothrow;
    int fputs(const(char)*, __sFILE*) @nogc nothrow;
    c_ulong fread(void*, c_ulong, c_ulong, __sFILE*) @nogc nothrow;
    __sFILE* freopen(const(char)*, const(char)*, __sFILE*) @nogc nothrow;
    int fscanf(__sFILE*, const(char)*, ...) @nogc nothrow;
    int fseek(__sFILE*, c_long, int) @nogc nothrow;
    int fsetpos(__sFILE*, const(long)*) @nogc nothrow;
    c_long ftell(__sFILE*) @nogc nothrow;
    c_ulong fwrite(const(void)*, c_ulong, c_ulong, __sFILE*) @nogc nothrow;
    int getc(__sFILE*) @nogc nothrow;
    int getchar() @nogc nothrow;
    char* gets(char*) @nogc nothrow;
    void perror(const(char)*) @nogc nothrow;
    int printf(const(char)*, ...) @nogc nothrow;
    int putc(int, __sFILE*) @nogc nothrow;
    int putchar(int) @nogc nothrow;
    int puts(const(char)*) @nogc nothrow;
    int remove(const(char)*) @nogc nothrow;
    int rename(const(char)*, const(char)*) @nogc nothrow;
    void rewind(__sFILE*) @nogc nothrow;
    int scanf(const(char)*, ...) @nogc nothrow;
    void setbuf(__sFILE*, char*) @nogc nothrow;
    int setvbuf(__sFILE*, char*, int, c_ulong) @nogc nothrow;
    pragma(mangle, "_sprintf")     int sprintf_(char*, const(char)*, ...) @nogc nothrow;
    int sscanf(const(char)*, const(char)*, ...) @nogc nothrow;
    __sFILE* tmpfile() @nogc nothrow;
    char* tmpnam(char*) @nogc nothrow;
    int ungetc(int, __sFILE*) @nogc nothrow;
    int vfprintf(__sFILE*, const(char)*, va_list*) @nogc nothrow;
    int vprintf(const(char)*, va_list*) @nogc nothrow;
    pragma(mangle, "_vsprintf")     int vsprintf_(char*, const(char)*, va_list*) @nogc nothrow;
    int _PyImport_IsInitialized(_is*) @nogc nothrow;
    __sFILE* fdopen(int, const(char)*) @nogc nothrow;
    int fileno(__sFILE*) @nogc nothrow;
    int pclose(__sFILE*) @nogc nothrow;
    __sFILE* popen(const(char)*, const(char)*) @nogc nothrow;
    int __srget(__sFILE*) @nogc nothrow;
    int __svfscanf(__sFILE*, const(char)*, va_list*) @nogc nothrow;
    int __swbuf(int, __sFILE*) @nogc nothrow;
    _object* PyImport_GetModule(_object*) @nogc nothrow;
    int __sputc(int, __sFILE*) @nogc nothrow;
    _object* PyImport_GetModuleDict() @nogc nothrow;
    _object* PyImport_ExecCodeModuleObject(_object*, _object*, _object*, _object*) @nogc nothrow;
    void flockfile(__sFILE*) @nogc nothrow;
    int ftrylockfile(__sFILE*) @nogc nothrow;
    void funlockfile(__sFILE*) @nogc nothrow;
    pragma(mangle, "_getc_unlocked")     int getc_unlocked_(__sFILE*) @nogc nothrow;
    pragma(mangle, "_getchar_unlocked")     int getchar_unlocked_() @nogc nothrow;
    pragma(mangle, "_putc_unlocked")     int putc_unlocked_(int, __sFILE*) @nogc nothrow;
    pragma(mangle, "_putchar_unlocked")     int putchar_unlocked_(int) @nogc nothrow;
    int getw(__sFILE*) @nogc nothrow;
    int putw(int, __sFILE*) @nogc nothrow;
    char* tempnam(const(char)*, const(char)*) @nogc nothrow;
    _object* PyImport_ExecCodeModuleWithPathnames(const(char)*, _object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyImport_ExecCodeModuleEx(const(char)*, _object*, const(char)*) @nogc nothrow;
    int fseeko(__sFILE*, long, int) @nogc nothrow;
    long ftello(__sFILE*) @nogc nothrow;
    pragma(mangle, "_snprintf")     int snprintf_(char*, c_ulong, const(char)*, ...) @nogc nothrow;
    int vfscanf(__sFILE*, const(char)*, va_list*) @nogc nothrow;
    int vscanf(const(char)*, va_list*) @nogc nothrow;
    pragma(mangle, "_vsnprintf")     int vsnprintf_(char*, c_ulong, const(char)*, va_list*) @nogc nothrow;
    int vsscanf(const(char)*, const(char)*, va_list*) @nogc nothrow;
    int dprintf(int, const(char)*, ...) @nogc nothrow;
    int vdprintf(int, const(char)*, va_list*) @nogc nothrow;
    c_long getdelim(char**, c_ulong*, int, __sFILE*) @nogc nothrow;
    c_long getline(char**, c_ulong*, __sFILE*) @nogc nothrow;
    __sFILE* fmemopen(void*, c_ulong, const(char)*) @nogc nothrow;
    __sFILE* open_memstream(char**, c_ulong*) @nogc nothrow;
    extern __gshared const(int) sys_nerr;
    extern __gshared const(const(char)*)[0] sys_errlist;
    int asprintf(char**, const(char)*, ...) @nogc nothrow;
    char* ctermid_r(char*) @nogc nothrow;
    char* fgetln(__sFILE*, c_ulong*) @nogc nothrow;
    const(char)* fmtcheck(const(char)*, const(char)*) @nogc nothrow;
    int fpurge(__sFILE*) @nogc nothrow;
    void setbuffer(__sFILE*, char*, int) @nogc nothrow;
    int setlinebuf(__sFILE*) @nogc nothrow;
    int vasprintf(char**, const(char)*, va_list*) @nogc nothrow;
    __sFILE* zopen(const(char)*, const(char)*, int) @nogc nothrow;
    __sFILE* funopen(const(void)*, int function(void*, char*, int), int function(void*, const(char)*, int), long function(void*, long, int), int function(void*)) @nogc nothrow;
    _object* PyImport_ExecCodeModule(const(char)*, _object*) @nogc nothrow;
    const(char)* PyImport_GetMagicTag() @nogc nothrow;
    c_long PyImport_GetMagicNumber() @nogc nothrow;
    struct div_t
    {
        int quot;
        int rem;
    }
    struct ldiv_t
    {
        c_long quot;
        c_long rem;
    }
    struct lldiv_t
    {
        long quot;
        long rem;
    }
    _object* PyInit__imp() @nogc nothrow;
    int PyAsyncGen_ClearFreeLists() @nogc nothrow;
    extern __gshared int __mb_cur_max;
    _object* _PyAsyncGenValueWrapperNew(_object*) @nogc nothrow;
    void abort() @nogc nothrow;
    int abs(int) @nogc nothrow;
    int atexit(void function()) @nogc nothrow;
    double atof(const(char)*) @nogc nothrow;
    int atoi(const(char)*) @nogc nothrow;
    c_long atol(const(char)*) @nogc nothrow;
    long atoll(const(char)*) @nogc nothrow;
    void* bsearch(const(void)*, const(void)*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    div_t div(int, int) @nogc nothrow;
    void exit(int) @nogc nothrow;
    char* getenv(const(char)*) @nogc nothrow;
    c_long labs(c_long) @nogc nothrow;
    ldiv_t ldiv(c_long, c_long) @nogc nothrow;
    long llabs(long) @nogc nothrow;
    lldiv_t lldiv(long, long) @nogc nothrow;
    int mblen(const(char)*, c_ulong) @nogc nothrow;
    c_ulong mbstowcs(int*, const(char)*, c_ulong) @nogc nothrow;
    int mbtowc(int*, const(char)*, c_ulong) @nogc nothrow;
    void qsort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    int rand() @nogc nothrow;
    void srand(uint) @nogc nothrow;
    double strtod(const(char)*, char**) @nogc nothrow;
    float strtof(const(char)*, char**) @nogc nothrow;
    c_long strtol(const(char)*, char**, int) @nogc nothrow;
    real strtold(const(char)*, char**) @nogc nothrow;
    long strtoll(const(char)*, char**, int) @nogc nothrow;
    c_ulong strtoul(const(char)*, char**, int) @nogc nothrow;
    ulong strtoull(const(char)*, char**, int) @nogc nothrow;
    _object* PyAsyncGen_New(_frame*, _object*, _object*) @nogc nothrow;
    int system(const(char)*) @nogc nothrow;
    c_ulong wcstombs(char*, const(int)*, c_ulong) @nogc nothrow;
    int wctomb(char*, int) @nogc nothrow;
    void _Exit(int) @nogc nothrow;
    c_long a64l(const(char)*) @nogc nothrow;
    double drand48() @nogc nothrow;
    char* ecvt(double, int, int*, int*) @nogc nothrow;
    double erand48(ushort*) @nogc nothrow;
    char* fcvt(double, int, int*, int*) @nogc nothrow;
    char* gcvt(double, int, char*) @nogc nothrow;
    int getsubopt(char**, char**, char**) @nogc nothrow;
    int grantpt(int) @nogc nothrow;
    char* initstate(uint, char*, c_ulong) @nogc nothrow;
    c_long jrand48(ushort*) @nogc nothrow;
    char* l64a(c_long) @nogc nothrow;
    void lcong48(ushort*) @nogc nothrow;
    c_long lrand48() @nogc nothrow;
    char* mktemp(char*) @nogc nothrow;
    int mkstemp(char*) @nogc nothrow;
    c_long mrand48() @nogc nothrow;
    c_long nrand48(ushort*) @nogc nothrow;
    int posix_openpt(int) @nogc nothrow;
    char* ptsname(int) @nogc nothrow;
    int ptsname_r(int, char*, c_ulong) @nogc nothrow;
    int putenv(char*) @nogc nothrow;
    c_long random() @nogc nothrow;
    int rand_r(uint*) @nogc nothrow;
    char* realpath(const(char)*, char*) @nogc nothrow;
    ushort* seed48(ushort*) @nogc nothrow;
    int setenv(const(char)*, const(char)*, int) @nogc nothrow;
    void setkey(const(char)*) @nogc nothrow;
    char* setstate(const(char)*) @nogc nothrow;
    void srand48(c_long) @nogc nothrow;
    void srandom(uint) @nogc nothrow;
    int unlockpt(int) @nogc nothrow;
    int unsetenv(const(char)*) @nogc nothrow;
    uint arc4random() @nogc nothrow;
    void arc4random_addrandom(ubyte*, int) @nogc nothrow;
    void arc4random_buf(void*, c_ulong) @nogc nothrow;
    void arc4random_stir() @nogc nothrow;
    uint arc4random_uniform(uint) @nogc nothrow;
    char* cgetcap(char*, const(char)*, int) @nogc nothrow;
    int cgetclose() @nogc nothrow;
    int cgetent(char**, char**, const(char)*) @nogc nothrow;
    int cgetfirst(char**, char**) @nogc nothrow;
    int cgetmatch(const(char)*, const(char)*) @nogc nothrow;
    int cgetnext(char**, char**) @nogc nothrow;
    int cgetnum(char*, const(char)*, c_long*) @nogc nothrow;
    int cgetset(const(char)*) @nogc nothrow;
    int cgetstr(char*, const(char)*, char**) @nogc nothrow;
    int cgetustr(char*, const(char)*, char**) @nogc nothrow;
    int daemon(int, int) @nogc nothrow;
    char* devname(int, ushort) @nogc nothrow;
    char* devname_r(int, ushort, char*, int) @nogc nothrow;
    char* getbsize(int*, c_long*) @nogc nothrow;
    int getloadavg(double*, int) @nogc nothrow;
    const(char)* getprogname() @nogc nothrow;
    void setprogname(const(char)*) @nogc nothrow;
    int heapsort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    int mergesort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    void psort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    void psort_r(void*, c_ulong, c_ulong, void*, int function(void*, const(void)*, const(void)*)) @nogc nothrow;
    void qsort_r(void*, c_ulong, c_ulong, void*, int function(void*, const(void)*, const(void)*)) @nogc nothrow;
    int radixsort(const(ubyte)**, int, const(ubyte)*, uint) @nogc nothrow;
    int rpmatch(const(char)*) @nogc nothrow;
    int sradixsort(const(ubyte)**, int, const(ubyte)*, uint) @nogc nothrow;
    void sranddev() @nogc nothrow;
    void srandomdev() @nogc nothrow;
    void* reallocf(void*, c_ulong) @nogc nothrow;
    long strtoq(const(char)*, char**, int) @nogc nothrow;
    ulong strtouq(const(char)*, char**, int) @nogc nothrow;
    extern __gshared char* suboptarg;
    extern __gshared _typeobject _PyAsyncGenAThrow_Type;
    void* memchr(const(void)*, int, c_ulong) @nogc nothrow;
    int memcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_memcpy")     void* memcpy_(void*, const(void)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_memmove")     void* memmove_(void*, const(void)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_memset")     void* memset_(void*, int, c_ulong) @nogc nothrow;
    pragma(mangle, "_strcat")     char* strcat_(char*, const(char)*) @nogc nothrow;
    char* strchr(const(char)*, int) @nogc nothrow;
    int strcmp(const(char)*, const(char)*) @nogc nothrow;
    int strcoll(const(char)*, const(char)*) @nogc nothrow;
    pragma(mangle, "_strcpy")     char* strcpy_(char*, const(char)*) @nogc nothrow;
    c_ulong strcspn(const(char)*, const(char)*) @nogc nothrow;
    char* strerror(int) @nogc nothrow;
    c_ulong strlen(const(char)*) @nogc nothrow;
    pragma(mangle, "_strncat")     char* strncat_(char*, const(char)*, c_ulong) @nogc nothrow;
    int strncmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_strncpy")     char* strncpy_(char*, const(char)*, c_ulong) @nogc nothrow;
    char* strpbrk(const(char)*, const(char)*) @nogc nothrow;
    char* strrchr(const(char)*, int) @nogc nothrow;
    c_ulong strspn(const(char)*, const(char)*) @nogc nothrow;
    char* strstr(const(char)*, const(char)*) @nogc nothrow;
    char* strtok(char*, const(char)*) @nogc nothrow;
    c_ulong strxfrm(char*, const(char)*, c_ulong) @nogc nothrow;
    char* strtok_r(char*, const(char)*, char**) @nogc nothrow;
    int strerror_r(int, char*, c_ulong) @nogc nothrow;
    char* strdup(const(char)*) @nogc nothrow;
    pragma(mangle, "_memccpy")     void* memccpy_(void*, const(void)*, int, c_ulong) @nogc nothrow;
    pragma(mangle, "_stpcpy")     char* stpcpy_(char*, const(char)*) @nogc nothrow;
    pragma(mangle, "_stpncpy")     char* stpncpy_(char*, const(char)*, c_ulong) @nogc nothrow;
    char* strndup(const(char)*, c_ulong) @nogc nothrow;
    c_ulong strnlen(const(char)*, c_ulong) @nogc nothrow;
    char* strsignal(int) @nogc nothrow;
    int memset_s(void*, c_ulong, int, c_ulong) @nogc nothrow;
    void* memmem(const(void)*, c_ulong, const(void)*, c_ulong) @nogc nothrow;
    void memset_pattern4(void*, const(void)*, c_ulong) @nogc nothrow;
    void memset_pattern8(void*, const(void)*, c_ulong) @nogc nothrow;
    void memset_pattern16(void*, const(void)*, c_ulong) @nogc nothrow;
    char* strcasestr(const(char)*, const(char)*) @nogc nothrow;
    char* strnstr(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_strlcat")     c_ulong strlcat_(char*, const(char)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_strlcpy")     c_ulong strlcpy_(char*, const(char)*, c_ulong) @nogc nothrow;
    void strmode(int, char*) @nogc nothrow;
    char* strsep(char**, const(char)*) @nogc nothrow;
    void swab(const(void)*, void*, c_long) @nogc nothrow;
    int timingsafe_bcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    int bcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    pragma(mangle, "_bcopy")     void bcopy_(const(void)*, void*, c_ulong) @nogc nothrow;
    pragma(mangle, "_bzero")     void bzero_(void*, c_ulong) @nogc nothrow;
    char* index(const(char)*, int) @nogc nothrow;
    char* rindex(const(char)*, int) @nogc nothrow;
    int ffs(int) @nogc nothrow;
    int strcasecmp(const(char)*, const(char)*) @nogc nothrow;
    int strncasecmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    int ffsl(c_long) @nogc nothrow;
    int ffsll(long) @nogc nothrow;
    int fls(int) @nogc nothrow;
    int flsl(c_long) @nogc nothrow;
    int flsll(long) @nogc nothrow;
    extern __gshared _typeobject _PyAsyncGenWrappedValue_Type;
    extern __gshared _typeobject _PyAsyncGenASend_Type;
    extern __gshared _typeobject PyAsyncGen_Type;
    struct PyAsyncGenObject
    {
        _object ob_base;
        _frame* ag_frame;
        char ag_running;
        _object* ag_code;
        _object* ag_weakreflist;
        _object* ag_name;
        _object* ag_qualname;
        _err_stackitem ag_exc_state;
        _object* ag_finalizer;
        int ag_hooks_inited;
        int ag_closed;
        int ag_running_async;
    }
    _object* PyCoro_New(_frame*, _object*, _object*) @nogc nothrow;
    _object* _PyCoro_GetAwaitableIter(_object*) @nogc nothrow;
    extern __gshared _typeobject _PyAIterWrapper_Type;
    extern __gshared _typeobject _PyCoroWrapper_Type;
    extern __gshared _typeobject PyCoro_Type;
    struct PyCoroObject
    {
        _object ob_base;
        _frame* cr_frame;
        char cr_running;
        _object* cr_code;
        _object* cr_weakreflist;
        _object* cr_name;
        _object* cr_qualname;
        _err_stackitem cr_exc_state;
        _object* cr_origin;
    }
    alias pthread_attr_t = _opaque_pthread_attr_t;
    void _PyGen_Finalize(_object*) @nogc nothrow;
    alias pthread_cond_t = _opaque_pthread_cond_t;
    alias pthread_condattr_t = _opaque_pthread_condattr_t;
    _object* _PyGen_yf(PyGenObject*) @nogc nothrow;
    alias pthread_key_t = c_ulong;
    _object* _PyGen_Send(PyGenObject*, _object*) @nogc nothrow;
    alias pthread_mutex_t = _opaque_pthread_mutex_t;
    alias pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
    int _PyGen_FetchStopIterationValue(_object**) @nogc nothrow;
    alias pthread_once_t = _opaque_pthread_once_t;
    alias pthread_rwlock_t = _opaque_pthread_rwlock_t;
    int _PyGen_SetStopIterationValue(_object*) @nogc nothrow;
    alias pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
    alias pthread_t = _opaque_pthread_t*;
    int PyGen_NeedsFinalizing(PyGenObject*) @nogc nothrow;
    _object* PyGen_NewWithQualName(_frame*, _object*, _object*) @nogc nothrow;
    _object* PyGen_New(_frame*) @nogc nothrow;
    extern __gshared _typeobject PyGen_Type;
    struct __darwin_pthread_handler_rec
    {
        void function(void*) __routine;
        void* __arg;
        __darwin_pthread_handler_rec* __next;
    }
    struct _opaque_pthread_attr_t
    {
        c_long __sig;
        char[56] __opaque;
    }
    struct _opaque_pthread_cond_t
    {
        c_long __sig;
        char[40] __opaque;
    }
    struct _opaque_pthread_condattr_t
    {
        c_long __sig;
        char[8] __opaque;
    }
    struct _opaque_pthread_mutex_t
    {
        c_long __sig;
        char[56] __opaque;
    }
    struct _opaque_pthread_mutexattr_t
    {
        c_long __sig;
        char[8] __opaque;
    }
    struct _opaque_pthread_once_t
    {
        c_long __sig;
        char[8] __opaque;
    }
    struct _opaque_pthread_rwlock_t
    {
        c_long __sig;
        char[192] __opaque;
    }
    struct _opaque_pthread_rwlockattr_t
    {
        c_long __sig;
        char[16] __opaque;
    }
    struct _opaque_pthread_t
    {
        c_long __sig;
        __darwin_pthread_handler_rec* __cleanup_stack;
        char[8176] __opaque;
    }
    alias __darwin_pthread_attr_t = _opaque_pthread_attr_t;
    alias __darwin_pthread_cond_t = _opaque_pthread_cond_t;
    alias __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
    alias __darwin_pthread_key_t = c_ulong;
    alias __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
    alias __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
    alias __darwin_pthread_once_t = _opaque_pthread_once_t;
    alias __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
    alias __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
    alias __darwin_pthread_t = _opaque_pthread_t*;
    struct PyGenObject
    {
        _object ob_base;
        _frame* gi_frame;
        char gi_running;
        _object* gi_code;
        _object* gi_weakreflist;
        _object* gi_name;
        _object* gi_qualname;
        _err_stackitem gi_exc_state;
    }
    int select(int, fd_set*, fd_set*, fd_set*, timeval*) @nogc nothrow;
    _object* PyStaticMethod_New(_object*) @nogc nothrow;
    _object* PyClassMethod_New(_object*) @nogc nothrow;
    extern __gshared _typeobject PyStaticMethod_Type;
    extern __gshared _typeobject PyClassMethod_Type;
    _object* _PyFunction_Vectorcall(_object*, _object**, c_ulong, _object*) @nogc nothrow;
    _object* _PyFunction_FastCallDict(_object*, _object**, c_long, _object*) @nogc nothrow;
    int PyFunction_SetAnnotations(_object*, _object*) @nogc nothrow;
    _object* PyFunction_GetAnnotations(_object*) @nogc nothrow;
    int PyFunction_SetClosure(_object*, _object*) @nogc nothrow;
    _object* PyFunction_GetClosure(_object*) @nogc nothrow;
    int PyFunction_SetKwDefaults(_object*, _object*) @nogc nothrow;
    _object* PyFunction_GetKwDefaults(_object*) @nogc nothrow;
    int PyFunction_SetDefaults(_object*, _object*) @nogc nothrow;
    _object* PyFunction_GetDefaults(_object*) @nogc nothrow;
    _object* PyFunction_GetModule(_object*) @nogc nothrow;
    _object* PyFunction_GetGlobals(_object*) @nogc nothrow;
    _object* PyFunction_GetCode(_object*) @nogc nothrow;
    _object* PyFunction_NewWithQualName(_object*, _object*, _object*) @nogc nothrow;
    _object* PyFunction_New(_object*, _object*) @nogc nothrow;
    extern __gshared _typeobject PyFunction_Type;
    struct PyFunctionObject
    {
        _object ob_base;
        _object* func_code;
        _object* func_globals;
        _object* func_defaults;
        _object* func_kwdefaults;
        _object* func_closure;
        _object* func_doc;
        _object* func_name;
        _object* func_dict;
        _object* func_weakreflist;
        _object* func_module;
        _object* func_annotations;
        _object* func_qualname;
        _object* function(_object*, _object**, c_ulong, _object*) vectorcall;
    }
    int _PyFloat_FormatAdvancedWriter(_PyUnicodeWriter*, _object*, _object*, c_long, c_long) @nogc nothrow;
    void _PyFloat_DebugMallocStats(__sFILE*) @nogc nothrow;
    int PyFloat_ClearFreeList() @nogc nothrow;
    double _PyFloat_Unpack8(const(ubyte)*, int) @nogc nothrow;
    double _PyFloat_Unpack4(const(ubyte)*, int) @nogc nothrow;
    double _PyFloat_Unpack2(const(ubyte)*, int) @nogc nothrow;
    void _PyFloat_DigitsInit() @nogc nothrow;
    int _PyFloat_Digits(char*, double, int*) @nogc nothrow;
    int _PyFloat_Repr(double, char*, c_ulong) @nogc nothrow;
    int _PyFloat_Pack8(double, ubyte*, int) @nogc nothrow;
    int _PyFloat_Pack4(double, ubyte*, int) @nogc nothrow;
    int _PyFloat_Pack2(double, ubyte*, int) @nogc nothrow;
    double PyFloat_AsDouble(_object*) @nogc nothrow;
    _object* PyFloat_FromDouble(double) @nogc nothrow;
    _object* PyFloat_FromString(_object*) @nogc nothrow;
    _object* PyFloat_GetInfo() @nogc nothrow;
    double PyFloat_GetMin() @nogc nothrow;
    double PyFloat_GetMax() @nogc nothrow;
    alias __darwin_blkcnt_t = long;
    alias __darwin_blksize_t = int;
    alias __darwin_dev_t = int;
    alias __darwin_fsblkcnt_t = uint;
    alias __darwin_fsfilcnt_t = uint;
    alias __darwin_gid_t = uint;
    alias __darwin_id_t = uint;
    alias __darwin_ino64_t = ulong;
    alias __darwin_ino_t = ulong;
    alias __darwin_mach_port_name_t = uint;
    alias __darwin_mach_port_t = uint;
    alias __darwin_mode_t = ushort;
    alias __darwin_off_t = long;
    alias __darwin_pid_t = int;
    alias __darwin_sigset_t = uint;
    alias __darwin_suseconds_t = int;
    alias __darwin_uid_t = uint;
    alias __darwin_useconds_t = uint;
    alias __darwin_uuid_t = ubyte[16];
    alias __darwin_uuid_string_t = char[37];
    extern __gshared _typeobject PyFloat_Type;
    alias blkcnt_t = long;
    alias blksize_t = int;
    alias clock_t = c_ulong;
    alias ct_rune_t = int;
    struct PyFloatObject
    {
        _object ob_base;
        double ob_fval;
    }
    alias dev_t = int;
    int _Py_set_blocking(int, int) @nogc nothrow;
    alias errno_t = int;
    int _Py_get_blocking(int) @nogc nothrow;
    int _Py_dup(int) @nogc nothrow;
    int _Py_set_inheritable_async_safe(int, int, int*) @nogc nothrow;
    struct fd_set
    {
        int[32] fds_bits;
    }
    int __darwin_check_fd_set_overflow(int, const(void)*, int) @nogc nothrow;
    int __darwin_check_fd_set(int, const(void)*) @nogc nothrow;
    int __darwin_fd_isset(int, const(fd_set)*) @nogc nothrow;
    void __darwin_fd_set(int, fd_set*) @nogc nothrow;
    void __darwin_fd_clr(int, fd_set*) @nogc nothrow;
    int _Py_set_inheritable(int, int, int*) @nogc nothrow;
    int _Py_get_inheritable(int) @nogc nothrow;
    int* _Py_wgetcwd(int*, c_ulong) @nogc nothrow;
    int* _Py_wrealpath(const(int)*, int*, c_ulong) @nogc nothrow;
    int _Py_wreadlink(const(int)*, int*, c_ulong) @nogc nothrow;
    struct _filesec;
    alias filesec_t = _filesec*;
    alias gid_t = uint;
    alias id_t = uint;
    c_long _Py_write_noraise(int, const(void)*, c_ulong) @nogc nothrow;
    alias ino64_t = ulong;
    alias ino_t = ulong;
    c_long _Py_write(int, const(void)*, c_ulong) @nogc nothrow;
    alias int16_t = short;
    alias int32_t = int;
    c_long _Py_read(int, void*, c_ulong) @nogc nothrow;
    alias int64_t = long;
    alias int8_t = byte;
    __sFILE* _Py_fopen_obj(_object*, const(char)*) @nogc nothrow;
    alias intptr_t = c_long;
    alias mach_port_t = uint;
    __sFILE* _Py_fopen(const(char)*, const(char)*) @nogc nothrow;
    alias mbstate_t = __mbstate_t;
    alias mode_t = ushort;
    __sFILE* _Py_wfopen(const(int)*, const(int)*) @nogc nothrow;
    alias nlink_t = ushort;
    int _Py_open_noraise(const(char)*, int) @nogc nothrow;
    alias off_t = long;
    alias pid_t = int;
    int _Py_open(const(char)*, int) @nogc nothrow;
    alias rsize_t = c_ulong;
    int _Py_stat(_object*, stat*) @nogc nothrow;
    alias rune_t = int;
    int _Py_fstat_noraise(int, stat*) @nogc nothrow;
    int _Py_fstat(int, stat*) @nogc nothrow;
    _object* _Py_device_encoding(int) @nogc nothrow;
    int _Py_EncodeLocaleEx(const(int)*, char**, c_ulong*, const(char)**, int, _Py_error_handler) @nogc nothrow;
    int _Py_DecodeLocaleEx(const(char)*, int**, c_ulong*, const(char)**, int, _Py_error_handler) @nogc nothrow;
    _Py_error_handler _Py_GetErrorHandler(const(char)*) @nogc nothrow;
    enum _Anonymous_10
    {
        _Py_ERROR_UNKNOWN = 0, 
        _Py_ERROR_STRICT = 1, 
        _Py_ERROR_SURROGATEESCAPE = 2, 
        _Py_ERROR_REPLACE = 3, 
        _Py_ERROR_IGNORE = 4, 
        _Py_ERROR_BACKSLASHREPLACE = 5, 
        _Py_ERROR_SURROGATEPASS = 6, 
        _Py_ERROR_XMLCHARREFREPLACE = 7, 
        _Py_ERROR_OTHER = 8, 
    }
    enum _Py_ERROR_UNKNOWN = _Anonymous_10._Py_ERROR_UNKNOWN;
    enum _Py_ERROR_STRICT = _Anonymous_10._Py_ERROR_STRICT;
    enum _Py_ERROR_SURROGATEESCAPE = _Anonymous_10._Py_ERROR_SURROGATEESCAPE;
    enum _Py_ERROR_REPLACE = _Anonymous_10._Py_ERROR_REPLACE;
    enum _Py_ERROR_IGNORE = _Anonymous_10._Py_ERROR_IGNORE;
    enum _Py_ERROR_BACKSLASHREPLACE = _Anonymous_10._Py_ERROR_BACKSLASHREPLACE;
    enum _Py_ERROR_SURROGATEPASS = _Anonymous_10._Py_ERROR_SURROGATEPASS;
    enum _Py_ERROR_XMLCHARREFREPLACE = _Anonymous_10._Py_ERROR_XMLCHARREFREPLACE;
    enum _Py_ERROR_OTHER = _Anonymous_10._Py_ERROR_OTHER;
    alias _Py_error_handler = _Anonymous_10;
    char* _Py_EncodeLocaleRaw(const(int)*, c_ulong*) @nogc nothrow;
    char* Py_EncodeLocale(const(int)*, c_ulong*) @nogc nothrow;
    int* Py_DecodeLocale(const(char)*, c_ulong*) @nogc nothrow;
    extern __gshared int Py_HasFileSystemDefaultEncoding;
    extern __gshared const(char)* Py_FileSystemDefaultEncoding;
    int PyObject_AsFileDescriptor(_object*) @nogc nothrow;
    struct __darwin_sigaltstack
    {
        void* ss_sp;
        c_ulong ss_size;
        int ss_flags;
    }
    alias stack_t = __darwin_sigaltstack;
    int PyFile_WriteString(const(char)*, _object*) @nogc nothrow;
    alias sigset_t = uint;
    alias size_t = c_ulong;
    int PyFile_WriteObject(_object*, _object*, int) @nogc nothrow;
    alias ssize_t = c_long;
    alias suseconds_t = int;
    _object* PyFile_GetLine(_object*, int) @nogc nothrow;
    alias time_t = c_long;
    struct timespec
    {
        c_long tv_sec;
        c_long tv_nsec;
    }
    _object* PyFile_FromFd(int, const(char)*, const(char)*, int, const(char)*, const(char)*, const(char)*, int) @nogc nothrow;
    struct timeval
    {
        c_long tv_sec;
        int tv_usec;
    }
    struct timeval64
    {
        long tv_sec;
        long tv_usec;
    }
    _object* _PyEval_CallTracing(_object*, _object*) @nogc nothrow;
    alias u_int16_t = ushort;
    alias u_int32_t = uint;
    _object* _PyEval_EvalCodeWithName(_object*, _object*, _object*, _object**, c_long, _object**, _object**, c_long, int, _object**, c_long, _object*, _object*, _object*, _object*) @nogc nothrow;
    alias u_int64_t = ulong;
    alias u_int8_t = ubyte;
    _object* PyEval_EvalCodeEx(_object*, _object*, _object*, _object**, int, _object**, int, _object**, int, _object*, _object*) @nogc nothrow;
    struct __darwin_ucontext
    {
        int uc_onstack;
        uint uc_sigmask;
        __darwin_sigaltstack uc_stack;
        __darwin_ucontext* uc_link;
        c_ulong uc_mcsize;
        __darwin_mcontext64* uc_mcontext;
    }
    alias ucontext_t = __darwin_ucontext;
    alias uid_t = uint;
    _object* PyEval_EvalCode(_object*, _object*, _object*) @nogc nothrow;
    alias uintptr_t = c_ulong;
    alias useconds_t = uint;
    alias uuid_t = ubyte[16];
    extern __gshared _typeobject PyReversed_Type;
    alias wchar_t = int;
    extern __gshared _typeobject PyEnum_Type;
    alias wint_t = int;
    double _Py_dg_infinity(int) @nogc nothrow;
    double _Py_dg_stdnan(int) @nogc nothrow;
    void _Py_dg_freedtoa(char*) @nogc nothrow;
    char* _Py_dg_dtoa(double, int, int, int*, int*, char**) @nogc nothrow;
    double _Py_dg_strtod(const(char)*, char**) @nogc nothrow;
    extern __gshared _typeobject PyDictRevIterValue_Type;
    extern __gshared _typeobject PyDictRevIterItem_Type;
    extern __gshared _typeobject PyDictRevIterKey_Type;
    extern __gshared _typeobject PyDictIterItem_Type;
    extern __gshared _typeobject PyDictIterValue_Type;
    extern __gshared _typeobject PyDictIterKey_Type;
    extern __gshared _typeobject PyDictItems_Type;
    extern __gshared _typeobject PyDictValues_Type;
    extern __gshared _typeobject PyDictKeys_Type;
    int PyDict_DelItemString(_object*, const(char)*) @nogc nothrow;
    int PyDict_SetItemString(_object*, const(char)*, _object*) @nogc nothrow;
    _object* PyDict_GetItemString(_object*, const(char)*) @nogc nothrow;
    int PyDict_MergeFromSeq2(_object*, _object*, int) @nogc nothrow;
    int PyDict_Merge(_object*, _object*, int) @nogc nothrow;
    int PyDict_Update(_object*, _object*) @nogc nothrow;
    int PyDict_Contains(_object*, _object*) @nogc nothrow;
    _object* PyDict_Copy(_object*) @nogc nothrow;
    c_long PyDict_Size(_object*) @nogc nothrow;
    _object* PyDict_Items(_object*) @nogc nothrow;
    _object* PyDict_Values(_object*) @nogc nothrow;
    _object* PyDict_Keys(_object*) @nogc nothrow;
    int PyDict_Next(_object*, c_long*, _object**, _object**) @nogc nothrow;
    void PyDict_Clear(_object*) @nogc nothrow;
    int PyDict_DelItem(_object*, _object*) @nogc nothrow;
    int PyDict_SetItem(_object*, _object*, _object*) @nogc nothrow;
    _object* PyDict_GetItemWithError(_object*, _object*) @nogc nothrow;
    _object* PyDict_GetItem(_object*, _object*) @nogc nothrow;
    _object* PyDict_New() @nogc nothrow;
    extern __gshared _typeobject PyDict_Type;
    extern __gshared _typeobject PyProperty_Type;
    _object* PyWrapper_New(_object*, _object*) @nogc nothrow;
    _object* PyDictProxy_New(_object*) @nogc nothrow;
    _object* PyDescr_NewWrapper(_typeobject*, wrapperbase*, void*) @nogc nothrow;
    _object* PyDescr_NewGetSet(_typeobject*, PyGetSetDef*) @nogc nothrow;
    _object* PyDescr_NewMember(_typeobject*, PyMemberDef*) @nogc nothrow;
    _object* PyDescr_NewClassMethod(_typeobject*, PyMethodDef*) @nogc nothrow;
    _object* PyDescr_NewMethod(_typeobject*, PyMethodDef*) @nogc nothrow;
    extern __gshared _typeobject _PyMethodWrapper_Type;
    extern __gshared _typeobject PyDictProxy_Type;
    extern __gshared _typeobject PyWrapperDescr_Type;
    extern __gshared _typeobject PyMethodDescr_Type;
    extern __gshared _typeobject PyMemberDescr_Type;
    extern __gshared _typeobject PyGetSetDescr_Type;
    int* __error() @nogc nothrow;
    extern __gshared _typeobject PyClassMethodDescr_Type;
    struct PyWrapperDescrObject
    {
        PyDescrObject d_common;
        wrapperbase* d_base;
        void* d_wrapped;
    }
    struct PyGetSetDescrObject
    {
        PyDescrObject d_common;
        PyGetSetDef* d_getset;
    }
    struct PyMemberDescrObject
    {
        PyDescrObject d_common;
        PyMemberDef* d_member;
    }
    struct PyMethodDescrObject
    {
        PyDescrObject d_common;
        PyMethodDef* d_method;
        _object* function(_object*, _object**, c_ulong, _object*) vectorcall;
    }
    struct PyDescrObject
    {
        _object ob_base;
        _typeobject* d_type;
        _object* d_name;
        _object* d_qualname;
    }
    struct wrapperbase
    {
        const(char)* name;
        int offset;
        void* function_;
        _object* function(_object*, _object*, void*) wrapper;
        const(char)* doc;
        int flags;
        _object* name_strobj;
    }
    alias wrapperfunc_kwds = _object* function(_object*, _object*, void*, _object*);
    alias wrapperfunc = _object* function(_object*, _object*, void*);
    alias setter = int function(_object*, _object*, void*);
    alias getter = _object* function(_object*, void*);
    extern __gshared PyDateTime_CAPI* PyDateTimeAPI;
    struct PyDateTime_CAPI
    {
        _typeobject* DateType;
        _typeobject* DateTimeType;
        _typeobject* TimeType;
        _typeobject* DeltaType;
        _typeobject* TZInfoType;
        _object* TimeZone_UTC;
        _object* function(int, int, int, _typeobject*) Date_FromDate;
        _object* function(int, int, int, int, int, int, int, _object*, _typeobject*) DateTime_FromDateAndTime;
        _object* function(int, int, int, int, _object*, _typeobject*) Time_FromTime;
        _object* function(int, int, int, int, _typeobject*) Delta_FromDelta;
        _object* function(_object*, _object*) TimeZone_FromTimeZone;
        _object* function(_object*, _object*, _object*) DateTime_FromTimestamp;
        _object* function(_object*, _object*) Date_FromTimestamp;
        _object* function(int, int, int, int, int, int, int, _object*, int, _typeobject*) DateTime_FromDateAndTimeAndFold;
        _object* function(int, int, int, int, _object*, int, _typeobject*) Time_FromTimeAndFold;
    }
    struct PyDateTime_DateTime
    {
        _object ob_base;
        c_long hashcode;
        char hastzinfo;
        ubyte[10] data;
        ubyte fold;
        _object* tzinfo;
    }
    struct _PyDateTime_BaseDateTime
    {
        _object ob_base;
        c_long hashcode;
        char hastzinfo;
        ubyte[10] data;
    }
    struct PyDateTime_Date
    {
        _object ob_base;
        c_long hashcode;
        char hastzinfo;
        ubyte[4] data;
    }
    struct PyDateTime_Time
    {
        _object ob_base;
        c_long hashcode;
        char hastzinfo;
        ubyte[6] data;
        ubyte fold;
        _object* tzinfo;
    }
    struct _PyDateTime_BaseTime
    {
        _object ob_base;
        c_long hashcode;
        char hastzinfo;
        ubyte[6] data;
    }
    struct _PyDateTime_BaseTZInfo
    {
        _object ob_base;
        c_long hashcode;
        char hastzinfo;
    }
    struct PyDateTime_TZInfo
    {
        _object ob_base;
    }
    struct PyDateTime_Delta
    {
        _object ob_base;
        c_long hashcode;
        int days;
        int seconds;
        int microseconds;
    }
    int _PyUnicode_EQ(_object*, _object*) @nogc nothrow;
    void _PyUnicode_ClearStaticStrings() @nogc nothrow;
    _object* _PyUnicode_FromId(_Py_Identifier*) @nogc nothrow;
    int* PyUnicode_AsUnicodeCopy(_object*) @nogc nothrow;
    _object* _PyUnicode_FormatLong(_object*, int, int, int) @nogc nothrow;
    int* Py_UNICODE_strrchr(const(int)*, int) @nogc nothrow;
    int* Py_UNICODE_strchr(const(int)*, int) @nogc nothrow;
    int Py_UNICODE_strncmp(const(int)*, const(int)*, c_ulong) @nogc nothrow;
    int Py_UNICODE_strcmp(const(int)*, const(int)*) @nogc nothrow;
    int* Py_UNICODE_strncpy(int*, const(int)*, c_ulong) @nogc nothrow;
    int* Py_UNICODE_strcat(int*, const(int)*) @nogc nothrow;
    int* Py_UNICODE_strcpy(int*, const(int)*) @nogc nothrow;
    c_ulong Py_UNICODE_strlen(const(int)*) @nogc nothrow;
    int _PyUnicode_IsAlpha(uint) @nogc nothrow;
    int _PyUnicode_IsPrintable(uint) @nogc nothrow;
    int _PyUnicode_IsNumeric(uint) @nogc nothrow;
    int _PyUnicode_IsDigit(uint) @nogc nothrow;
    int _PyUnicode_IsDecimalDigit(uint) @nogc nothrow;
    double _PyUnicode_ToNumeric(uint) @nogc nothrow;
    int _PyUnicode_ToDigit(uint) @nogc nothrow;
    int _PyUnicode_ToDecimalDigit(uint) @nogc nothrow;
    int _PyUnicode_IsCased(uint) @nogc nothrow;
    int _PyUnicode_IsCaseIgnorable(uint) @nogc nothrow;
    int _PyUnicode_ToFoldedFull(uint, uint*) @nogc nothrow;
    int _PyUnicode_ToUpperFull(uint, uint*) @nogc nothrow;
    int _PyUnicode_ToTitleFull(uint, uint*) @nogc nothrow;
    enum _Anonymous_11
    {
        QOS_CLASS_USER_INTERACTIVE = 33, 
        QOS_CLASS_USER_INITIATED = 25, 
        QOS_CLASS_DEFAULT = 21, 
        QOS_CLASS_UTILITY = 17, 
        QOS_CLASS_BACKGROUND = 9, 
        QOS_CLASS_UNSPECIFIED = 0, 
    }
    enum QOS_CLASS_USER_INTERACTIVE = _Anonymous_11.QOS_CLASS_USER_INTERACTIVE;
    enum QOS_CLASS_USER_INITIATED = _Anonymous_11.QOS_CLASS_USER_INITIATED;
    enum QOS_CLASS_DEFAULT = _Anonymous_11.QOS_CLASS_DEFAULT;
    enum QOS_CLASS_UTILITY = _Anonymous_11.QOS_CLASS_UTILITY;
    enum QOS_CLASS_BACKGROUND = _Anonymous_11.QOS_CLASS_BACKGROUND;
    enum QOS_CLASS_UNSPECIFIED = _Anonymous_11.QOS_CLASS_UNSPECIFIED;
    alias qos_class_t = uint;
    uint qos_class_self() @nogc nothrow;
    uint qos_class_main() @nogc nothrow;
    int _PyUnicode_ToLowerFull(uint, uint*) @nogc nothrow;
    alias rlim_t = ulong;
    uint _PyUnicode_ToTitlecase(uint) @nogc nothrow;
    uint _PyUnicode_ToUppercase(uint) @nogc nothrow;
    uint _PyUnicode_ToLowercase(uint) @nogc nothrow;
    int _PyUnicode_IsLinebreak(const(uint)) @nogc nothrow;
    int _PyUnicode_IsWhitespace(const(uint)) @nogc nothrow;
    struct rusage
    {
        timeval ru_utime;
        timeval ru_stime;
        c_long ru_maxrss;
        c_long ru_ixrss;
        c_long ru_idrss;
        c_long ru_isrss;
        c_long ru_minflt;
        c_long ru_majflt;
        c_long ru_nswap;
        c_long ru_inblock;
        c_long ru_oublock;
        c_long ru_msgsnd;
        c_long ru_msgrcv;
        c_long ru_nsignals;
        c_long ru_nvcsw;
        c_long ru_nivcsw;
    }
    int _PyUnicode_IsXidContinue(uint) @nogc nothrow;
    int _PyUnicode_IsXidStart(uint) @nogc nothrow;
    int _PyUnicode_IsTitlecase(uint) @nogc nothrow;
    int _PyUnicode_IsUppercase(uint) @nogc nothrow;
    alias rusage_info_t = void*;
    struct rusage_info_v0
    {
        ubyte[16] ri_uuid;
        ulong ri_user_time;
        ulong ri_system_time;
        ulong ri_pkg_idle_wkups;
        ulong ri_interrupt_wkups;
        ulong ri_pageins;
        ulong ri_wired_size;
        ulong ri_resident_size;
        ulong ri_phys_footprint;
        ulong ri_proc_start_abstime;
        ulong ri_proc_exit_abstime;
    }
    struct rusage_info_v1
    {
        ubyte[16] ri_uuid;
        ulong ri_user_time;
        ulong ri_system_time;
        ulong ri_pkg_idle_wkups;
        ulong ri_interrupt_wkups;
        ulong ri_pageins;
        ulong ri_wired_size;
        ulong ri_resident_size;
        ulong ri_phys_footprint;
        ulong ri_proc_start_abstime;
        ulong ri_proc_exit_abstime;
        ulong ri_child_user_time;
        ulong ri_child_system_time;
        ulong ri_child_pkg_idle_wkups;
        ulong ri_child_interrupt_wkups;
        ulong ri_child_pageins;
        ulong ri_child_elapsed_abstime;
    }
    struct rusage_info_v2
    {
        ubyte[16] ri_uuid;
        ulong ri_user_time;
        ulong ri_system_time;
        ulong ri_pkg_idle_wkups;
        ulong ri_interrupt_wkups;
        ulong ri_pageins;
        ulong ri_wired_size;
        ulong ri_resident_size;
        ulong ri_phys_footprint;
        ulong ri_proc_start_abstime;
        ulong ri_proc_exit_abstime;
        ulong ri_child_user_time;
        ulong ri_child_system_time;
        ulong ri_child_pkg_idle_wkups;
        ulong ri_child_interrupt_wkups;
        ulong ri_child_pageins;
        ulong ri_child_elapsed_abstime;
        ulong ri_diskio_bytesread;
        ulong ri_diskio_byteswritten;
    }
    struct rusage_info_v3
    {
        ubyte[16] ri_uuid;
        ulong ri_user_time;
        ulong ri_system_time;
        ulong ri_pkg_idle_wkups;
        ulong ri_interrupt_wkups;
        ulong ri_pageins;
        ulong ri_wired_size;
        ulong ri_resident_size;
        ulong ri_phys_footprint;
        ulong ri_proc_start_abstime;
        ulong ri_proc_exit_abstime;
        ulong ri_child_user_time;
        ulong ri_child_system_time;
        ulong ri_child_pkg_idle_wkups;
        ulong ri_child_interrupt_wkups;
        ulong ri_child_pageins;
        ulong ri_child_elapsed_abstime;
        ulong ri_diskio_bytesread;
        ulong ri_diskio_byteswritten;
        ulong ri_cpu_time_qos_default;
        ulong ri_cpu_time_qos_maintenance;
        ulong ri_cpu_time_qos_background;
        ulong ri_cpu_time_qos_utility;
        ulong ri_cpu_time_qos_legacy;
        ulong ri_cpu_time_qos_user_initiated;
        ulong ri_cpu_time_qos_user_interactive;
        ulong ri_billed_system_time;
        ulong ri_serviced_system_time;
    }
    struct rusage_info_v4
    {
        ubyte[16] ri_uuid;
        ulong ri_user_time;
        ulong ri_system_time;
        ulong ri_pkg_idle_wkups;
        ulong ri_interrupt_wkups;
        ulong ri_pageins;
        ulong ri_wired_size;
        ulong ri_resident_size;
        ulong ri_phys_footprint;
        ulong ri_proc_start_abstime;
        ulong ri_proc_exit_abstime;
        ulong ri_child_user_time;
        ulong ri_child_system_time;
        ulong ri_child_pkg_idle_wkups;
        ulong ri_child_interrupt_wkups;
        ulong ri_child_pageins;
        ulong ri_child_elapsed_abstime;
        ulong ri_diskio_bytesread;
        ulong ri_diskio_byteswritten;
        ulong ri_cpu_time_qos_default;
        ulong ri_cpu_time_qos_maintenance;
        ulong ri_cpu_time_qos_background;
        ulong ri_cpu_time_qos_utility;
        ulong ri_cpu_time_qos_legacy;
        ulong ri_cpu_time_qos_user_initiated;
        ulong ri_cpu_time_qos_user_interactive;
        ulong ri_billed_system_time;
        ulong ri_serviced_system_time;
        ulong ri_logical_writes;
        ulong ri_lifetime_max_phys_footprint;
        ulong ri_instructions;
        ulong ri_cycles;
        ulong ri_billed_energy;
        ulong ri_serviced_energy;
        ulong ri_interval_max_phys_footprint;
        ulong ri_runnable_time;
    }
    alias rusage_info_current = rusage_info_v4;
    int _PyUnicode_IsLowercase(uint) @nogc nothrow;
    extern __gshared const(ubyte)[0] _Py_ascii_whitespace;
    c_long _PyUnicode_InsertThousandsGrouping(_PyUnicodeWriter*, c_long, _object*, c_long, c_long, c_long, const(char)*, _object*, uint*) @nogc nothrow;
    _object* _PyUnicode_XStrip(_object*, int, _object*) @nogc nothrow;
    int _PyUnicode_EqualToASCIIString(_object*, const(char)*) @nogc nothrow;
    int _PyUnicode_EqualToASCIIId(_object*, _Py_Identifier*) @nogc nothrow;
    _object* _PyUnicode_JoinArray(_object*, _object**, c_long) @nogc nothrow;
    struct rlimit
    {
        ulong rlim_cur;
        ulong rlim_max;
    }
    _object* _PyUnicode_TransformDecimalAndSpaceToASCII(_object*) @nogc nothrow;
    _object* PyUnicode_TransformDecimalToASCII(int*, c_long) @nogc nothrow;
    int PyUnicode_EncodeDecimal(int*, c_long, char*, const(char)*) @nogc nothrow;
    _object* PyUnicode_TranslateCharmap(const(int)*, c_long, _object*, const(char)*) @nogc nothrow;
    _object* _PyUnicode_EncodeCharmap(_object*, _object*, const(char)*) @nogc nothrow;
    struct proc_rlimit_control_wakeupmon
    {
        uint wm_flags;
        int wm_rate;
    }
    _object* PyUnicode_EncodeCharmap(const(int)*, c_long, _object*, const(char)*) @nogc nothrow;
    _object* PyUnicode_EncodeASCII(const(int)*, c_long, const(char)*) @nogc nothrow;
    _object* _PyUnicode_AsASCIIString(_object*, const(char)*) @nogc nothrow;
    _object* PyUnicode_EncodeLatin1(const(int)*, c_long, const(char)*) @nogc nothrow;
    _object* _PyUnicode_AsLatin1String(_object*, const(char)*) @nogc nothrow;
    _object* PyUnicode_EncodeRawUnicodeEscape(const(int)*, c_long) @nogc nothrow;
    _object* PyUnicode_EncodeUnicodeEscape(const(int)*, c_long) @nogc nothrow;
    _object* _PyUnicode_DecodeUnicodeEscape(const(char)*, c_long, const(char)*, const(char)**) @nogc nothrow;
    _object* _PyUnicode_EncodeUTF16(_object*, const(char)*, int) @nogc nothrow;
    int getpriority(int, uint) @nogc nothrow;
    int getiopolicy_np(int, int) @nogc nothrow;
    int getrlimit(int, rlimit*) @nogc nothrow;
    int getrusage(int, rusage*) @nogc nothrow;
    int setpriority(int, uint, int) @nogc nothrow;
    int setiopolicy_np(int, int, int) @nogc nothrow;
    int setrlimit(int, const(rlimit)*) @nogc nothrow;
    int pselect(int, fd_set*, fd_set*, fd_set*, const(timespec)*, const(uint)*) @nogc nothrow;
    _object* PyUnicode_EncodeUTF16(const(int)*, c_long, const(char)*, int) @nogc nothrow;
    _object* _PyUnicode_EncodeUTF32(_object*, const(char)*, int) @nogc nothrow;
    _object* PyUnicode_EncodeUTF32(const(int)*, c_long, const(char)*, int) @nogc nothrow;
    _object* PyUnicode_EncodeUTF8(const(int)*, c_long, const(char)*) @nogc nothrow;
    _object* _PyUnicode_AsUTF8String(_object*, const(char)*) @nogc nothrow;
    _object* _PyUnicode_EncodeUTF7(_object*, int, int, const(char)*) @nogc nothrow;
    _object* PyUnicode_EncodeUTF7(const(int)*, c_long, int, int, const(char)*) @nogc nothrow;
    _object* PyUnicode_Encode(const(int)*, c_long, const(char)*, const(char)*) @nogc nothrow;
    const(char)* PyUnicode_AsUTF8(_object*) @nogc nothrow;
    const(char)* PyUnicode_AsUTF8AndSize(_object*, c_long*) @nogc nothrow;
    void* _PyUnicode_AsKind(_object*, uint) @nogc nothrow;
    int _PyUnicode_FormatAdvancedWriter(_PyUnicodeWriter*, _object*, _object*, c_long, c_long) @nogc nothrow;
    void _PyUnicodeWriter_Dealloc(_PyUnicodeWriter*) @nogc nothrow;
    _object* _PyUnicodeWriter_Finish(_PyUnicodeWriter*) @nogc nothrow;
    int _PyUnicodeWriter_WriteLatin1String(_PyUnicodeWriter*, const(char)*, c_long) @nogc nothrow;
    int _PyUnicodeWriter_WriteASCIIString(_PyUnicodeWriter*, const(char)*, c_long) @nogc nothrow;
    int _PyUnicodeWriter_WriteSubstring(_PyUnicodeWriter*, _object*, c_long, c_long) @nogc nothrow;
    union sigval
    {
        int sival_int;
        void* sival_ptr;
    }
    int _PyUnicodeWriter_WriteStr(_PyUnicodeWriter*, _object*) @nogc nothrow;
    struct sigevent
    {
        int sigev_notify;
        int sigev_signo;
        sigval sigev_value;
        void function(sigval) sigev_notify_function;
        _opaque_pthread_attr_t* sigev_notify_attributes;
    }
    alias siginfo_t = __siginfo;
    struct __siginfo
    {
        int si_signo;
        int si_errno;
        int si_code;
        int si_pid;
        uint si_uid;
        int si_status;
        void* si_addr;
        sigval si_value;
        c_long si_band;
        c_ulong[7] __pad;
    }
    int _PyUnicodeWriter_WriteChar(_PyUnicodeWriter*, uint) @nogc nothrow;
    int _PyUnicodeWriter_PrepareKindInternal(_PyUnicodeWriter*, PyUnicode_Kind) @nogc nothrow;
    int _PyUnicodeWriter_PrepareInternal(_PyUnicodeWriter*, c_long, uint) @nogc nothrow;
    void _PyUnicodeWriter_Init(_PyUnicodeWriter*) @nogc nothrow;
    struct _PyUnicodeWriter
    {
        _object* buffer;
        void* data;
        PyUnicode_Kind kind;
        uint maxchar;
        c_long size;
        c_long pos;
        c_long min_length;
        uint min_char;
        ubyte overallocate;
        ubyte readonly;
    }
    int PyUnicode_GetMax() @nogc nothrow;
    int* PyUnicode_AsUnicodeAndSize(_object*, c_long*) @nogc nothrow;
    const(int)* _PyUnicode_AsUnicode(_object*) @nogc nothrow;
    int* PyUnicode_AsUnicode(_object*) @nogc nothrow;
    uint _PyUnicode_FindMaxChar(_object*, c_long, c_long) @nogc nothrow;
    _object* _PyUnicode_FromASCII(const(char)*, c_long) @nogc nothrow;
    _object* PyUnicode_FromKindAndData(int, const(void)*, c_long) @nogc nothrow;
    _object* PyUnicode_FromUnicode(const(int)*, c_long) @nogc nothrow;
    void _PyUnicode_FastFill(_object*, c_long, c_long, uint) @nogc nothrow;
    c_long PyUnicode_Fill(_object*, c_long, c_long, uint) @nogc nothrow;
    void _PyUnicode_FastCopyCharacters(_object*, c_long, _object*, c_long, c_long) @nogc nothrow;
    c_long PyUnicode_CopyCharacters(_object*, c_long, _object*, c_long, c_long) @nogc nothrow;
    _object* _PyUnicode_Copy(_object*) @nogc nothrow;
    int _PyUnicode_Ready(_object*) @nogc nothrow;
    _object* PyUnicode_New(c_long, uint) @nogc nothrow;
    union __sigaction_u
    {
        void function(int) __sa_handler;
        void function(int, __siginfo*, void*) __sa_sigaction;
    }
    struct __sigaction
    {
        __sigaction_u __sigaction_u_;
        void function(void*, int, int, __siginfo*, void*) sa_tramp;
        uint sa_mask;
        int sa_flags;
    }
    struct sigaction
    {
        __sigaction_u __sigaction_u_;
        uint sa_mask;
        int sa_flags;
    }
    enum PyUnicode_Kind
    {
        PyUnicode_WCHAR_KIND = 0, 
        PyUnicode_1BYTE_KIND = 1, 
        PyUnicode_2BYTE_KIND = 2, 
        PyUnicode_4BYTE_KIND = 4, 
    }
    enum PyUnicode_WCHAR_KIND = PyUnicode_Kind.PyUnicode_WCHAR_KIND;
    enum PyUnicode_1BYTE_KIND = PyUnicode_Kind.PyUnicode_1BYTE_KIND;
    enum PyUnicode_2BYTE_KIND = PyUnicode_Kind.PyUnicode_2BYTE_KIND;
    enum PyUnicode_4BYTE_KIND = PyUnicode_Kind.PyUnicode_4BYTE_KIND;
    int _PyUnicode_CheckConsistency(_object*, int) @nogc nothrow;
    struct PyUnicodeObject
    {
        PyCompactUnicodeObject _base;
        static union _Anonymous_12
        {
            void* any;
            ubyte* latin1;
            ushort* ucs2;
            uint* ucs4;
        }
        _Anonymous_12 data;
    }
    struct PyCompactUnicodeObject
    {
        PyASCIIObject _base;
        c_long utf8_length;
        char* utf8;
        c_long wstr_length;
    }
    struct PyASCIIObject
    {
        _object ob_base;
        c_long length;
        c_long hash;
        static struct _Anonymous_13
        {
            import std.bitmanip: bitfields;
        
            align(4):
            mixin(bitfields!(
                uint, "interned", 2,
                uint, "kind", 3,
                uint, "compact", 1,
                uint, "ascii", 1,
                uint, "ready", 1,
                uint, "_anonymous_14", 24,
            ));
        }
        _Anonymous_13 state;
        int* wstr;
    }
    alias Py_UNICODE = int;
    void _PyTuple_DebugMallocStats(__sFILE*) @nogc nothrow;
    void _PyTuple_MaybeUntrack(_object*) @nogc nothrow;
    int _PyTuple_Resize(_object**, c_long) @nogc nothrow;
    alias sig_t = void function(int);
    struct PyTupleObject
    {
        PyVarObject ob_base;
        _object*[1] ob_item;
    }
    void _PyTraceback_Add(const(char)*, const(char)*, int) @nogc nothrow;
    struct sigvec
    {
        void function(int) sv_handler;
        int sv_mask;
        int sv_flags;
    }
    int _Py_DisplaySourceLine(_object*, _object*, int, int) @nogc nothrow;
    struct _traceback
    {
        _object ob_base;
        _traceback* tb_next;
        _frame* tb_frame;
        int tb_lasti;
        int tb_lineno;
    }
    alias PyTracebackObject = _traceback;
    struct sigstack
    {
        char* ss_sp;
        int ss_onstack;
    }
    int PySys_AddAuditHook(int function(const(char)*, _object*, void*), void*) @nogc nothrow;
    void function(int) signal(int, void function(int)) @nogc nothrow;
    int PySys_Audit(const(char)*, const(char)*, ...) @nogc nothrow;
    struct ostat
    {
        ushort st_dev;
        ulong st_ino;
        ushort st_mode;
        ushort st_nlink;
        ushort st_uid;
        ushort st_gid;
        ushort st_rdev;
        int st_size;
        timespec st_atimespec;
        timespec st_mtimespec;
        timespec st_ctimespec;
        int st_blksize;
        int st_blocks;
        uint st_flags;
        uint st_gen;
    }
    alias Py_AuditHookFunction = int function(const(char)*, _object*, void*);
    struct stat
    {
        int st_dev;
        ushort st_mode;
        ushort st_nlink;
        ulong st_ino;
        uint st_uid;
        uint st_gid;
        int st_rdev;
        timespec st_atimespec;
        timespec st_mtimespec;
        timespec st_ctimespec;
        timespec st_birthtimespec;
        long st_size;
        long st_blocks;
        int st_blksize;
        uint st_flags;
        uint st_gen;
        int st_lspare;
        long[2] st_qspare;
    }
    struct stat64
    {
        int st_dev;
        ushort st_mode;
        ushort st_nlink;
        ulong st_ino;
        uint st_uid;
        uint st_gid;
        int st_rdev;
        timespec st_atimespec;
        timespec st_mtimespec;
        timespec st_ctimespec;
        timespec st_birthtimespec;
        long st_size;
        long st_blocks;
        int st_blksize;
        uint st_flags;
        uint st_gen;
        int st_lspare;
        long[2] st_qspare;
    }
    c_ulong _PySys_GetSizeOf(_object*) @nogc nothrow;
    int _PySys_SetObjectId(_Py_Identifier*, _object*) @nogc nothrow;
    _object* _PySys_GetObjectId(_Py_Identifier*) @nogc nothrow;
    int function(_object*, _xid*) _PyCrossInterpreterData_Lookup(_object*) @nogc nothrow;
    int _PyCrossInterpreterData_RegisterClass(_typeobject*, int function(_object*, _xid*)) @nogc nothrow;
    alias crossinterpdatafunc = int function(_object*, _xid*);
    int _PyObject_CheckCrossInterpreterData(_object*) @nogc nothrow;
    void _PyCrossInterpreterData_Release(_xid*) @nogc nothrow;
    _object* _PyCrossInterpreterData_NewObject(_xid*) @nogc nothrow;
    int _PyObject_GetCrossInterpreterData(_object*, _xid*) @nogc nothrow;
    alias _PyCrossInterpreterData = _xid;
    struct _xid
    {
        void* data;
        _object* obj;
        long interp;
        _object* function(_xid*) new_object;
        void function(void*) free;
    }
    alias PyThreadFrameGetter = _frame* function(_ts*);
    _ts* PyThreadState_Next(_ts*) @nogc nothrow;
    _ts* PyInterpreterState_ThreadHead(_is*) @nogc nothrow;
    _is* PyInterpreterState_Next(_is*) @nogc nothrow;
    _is* PyInterpreterState_Head() @nogc nothrow;
    _is* PyInterpreterState_Main() @nogc nothrow;
    _object* _PyThread_CurrentFrames() @nogc nothrow;
    _is* _PyGILState_GetInterpreterStateUnsafe() @nogc nothrow;
    int PyGILState_Check() @nogc nothrow;
    _ts* _PyThreadState_UncheckedGet() @nogc nothrow;
    _ts* _PyThreadState_Prealloc(_is*) @nogc nothrow;
    void _PyState_ClearModules() @nogc nothrow;
    int chmod(const(char)*, ushort) @nogc nothrow;
    int fchmod(int, ushort) @nogc nothrow;
    int fstat(int, stat*) @nogc nothrow;
    int lstat(const(char)*, stat*) @nogc nothrow;
    int mkdir(const(char)*, ushort) @nogc nothrow;
    int mkfifo(const(char)*, ushort) @nogc nothrow;
    pragma(mangle, "_stat$INODE64") int stat_(const(char)*, stat*) @nogc nothrow;
    ushort umask(ushort) @nogc nothrow;
    int fchmodat(int, const(char)*, ushort, int) @nogc nothrow;
    int fstatat(int, const(char)*, stat*, int) @nogc nothrow;
    int mkdirat(int, const(char)*, ushort) @nogc nothrow;
    int _PyState_AddModule(_object*, PyModuleDef*) @nogc nothrow;
    int futimens(int, const(timespec)*) @nogc nothrow;
    int utimensat(int, const(char)*, const(timespec)*, int) @nogc nothrow;
    int chflags(const(char)*, uint) @nogc nothrow;
    int chmodx_np(const(char)*, _filesec*) @nogc nothrow;
    int fchflags(int, uint) @nogc nothrow;
    int fchmodx_np(int, _filesec*) @nogc nothrow;
    int fstatx_np(int, stat*, _filesec*) @nogc nothrow;
    int lchflags(const(char)*, uint) @nogc nothrow;
    int lchmod(const(char)*, ushort) @nogc nothrow;
    int lstatx_np(const(char)*, stat*, _filesec*) @nogc nothrow;
    int mkdirx_np(const(char)*, _filesec*) @nogc nothrow;
    int mkfifox_np(const(char)*, _filesec*) @nogc nothrow;
    int statx_np(const(char)*, stat*, _filesec*) @nogc nothrow;
    int umaskx_np(_filesec*) @nogc nothrow;
    int fstatx64_np(int, stat64*, _filesec*) @nogc nothrow;
    int lstatx64_np(const(char)*, stat64*, _filesec*) @nogc nothrow;
    int statx64_np(const(char)*, stat64*, _filesec*) @nogc nothrow;
    int fstat64(int, stat64*) @nogc nothrow;
    int lstat64(const(char)*, stat64*) @nogc nothrow;
    pragma(mangle, "_stat64") int stat64_(const(char)*, stat64*) @nogc nothrow;
    int renameat(int, const(char)*, int, const(char)*) @nogc nothrow;
    _is* _PyInterpreterState_Get() @nogc nothrow;
    struct _err_stackitem
    {
        _object* exc_type;
        _object* exc_value;
        _object* exc_traceback;
        _err_stackitem* previous_item;
    }
    int renamex_np(const(char)*, const(char)*, uint) @nogc nothrow;
    int renameatx_np(int, const(char)*, int, const(char)*, uint) @nogc nothrow;
    alias _PyErr_StackItem = _err_stackitem;
    alias Py_tracefunc = int function(_object*, _frame*, int, _object*);
    _object* _PyInterpreterState_GetMainModule(_is*) @nogc nothrow;
    void _PyInterpreterState_RequireIDRef(_is*, int) @nogc nothrow;
    int _PyInterpreterState_RequiresIDRef(_is*) @nogc nothrow;
    void PyMem_SetupDebugHooks() @nogc nothrow;
    void PyMem_SetAllocator(PyMemAllocatorDomain, PyMemAllocatorEx*) @nogc nothrow;
    void PyMem_GetAllocator(PyMemAllocatorDomain, PyMemAllocatorEx*) @nogc nothrow;
    struct PyMemAllocatorEx
    {
        void* ctx;
        void* function(void*, c_ulong) malloc;
        void* function(void*, c_ulong, c_ulong) calloc;
        void* function(void*, void*, c_ulong) realloc;
        void function(void*, void*) free;
    }
    enum _Anonymous_15
    {
        PYMEM_ALLOCATOR_NOT_SET = 0, 
        PYMEM_ALLOCATOR_DEFAULT = 1, 
        PYMEM_ALLOCATOR_DEBUG = 2, 
        PYMEM_ALLOCATOR_MALLOC = 3, 
        PYMEM_ALLOCATOR_MALLOC_DEBUG = 4, 
        PYMEM_ALLOCATOR_PYMALLOC = 5, 
        PYMEM_ALLOCATOR_PYMALLOC_DEBUG = 6, 
    }
    enum PYMEM_ALLOCATOR_NOT_SET = _Anonymous_15.PYMEM_ALLOCATOR_NOT_SET;
    enum PYMEM_ALLOCATOR_DEFAULT = _Anonymous_15.PYMEM_ALLOCATOR_DEFAULT;
    enum PYMEM_ALLOCATOR_DEBUG = _Anonymous_15.PYMEM_ALLOCATOR_DEBUG;
    enum PYMEM_ALLOCATOR_MALLOC = _Anonymous_15.PYMEM_ALLOCATOR_MALLOC;
    enum PYMEM_ALLOCATOR_MALLOC_DEBUG = _Anonymous_15.PYMEM_ALLOCATOR_MALLOC_DEBUG;
    enum PYMEM_ALLOCATOR_PYMALLOC = _Anonymous_15.PYMEM_ALLOCATOR_PYMALLOC;
    enum PYMEM_ALLOCATOR_PYMALLOC_DEBUG = _Anonymous_15.PYMEM_ALLOCATOR_PYMALLOC_DEBUG;
    alias PyMemAllocatorName = _Anonymous_15;
    enum _Anonymous_16
    {
        PYMEM_DOMAIN_RAW = 0, 
        PYMEM_DOMAIN_MEM = 1, 
        PYMEM_DOMAIN_OBJ = 2, 
    }
    enum PYMEM_DOMAIN_RAW = _Anonymous_16.PYMEM_DOMAIN_RAW;
    enum PYMEM_DOMAIN_MEM = _Anonymous_16.PYMEM_DOMAIN_MEM;
    enum PYMEM_DOMAIN_OBJ = _Anonymous_16.PYMEM_DOMAIN_OBJ;
    alias PyMemAllocatorDomain = _Anonymous_16;
    int* _PyMem_RawWcsdup(const(int)*) @nogc nothrow;
    struct itimerval
    {
        timeval it_interval;
        timeval it_value;
    }
    char* _PyMem_Strdup(const(char)*) @nogc nothrow;
    char* _PyMem_RawStrdup(const(char)*) @nogc nothrow;
    void* PyMem_Calloc(c_ulong, c_ulong) @nogc nothrow;
    struct timezone
    {
        int tz_minuteswest;
        int tz_dsttime;
    }
    const(char)* _PyMem_GetCurrentAllocatorName() @nogc nothrow;
    void PyMem_RawFree(void*) @nogc nothrow;
    void* PyMem_RawRealloc(void*, c_ulong) @nogc nothrow;
    void* PyMem_RawCalloc(c_ulong, c_ulong) @nogc nothrow;
    void* PyMem_RawMalloc(c_ulong) @nogc nothrow;
    char* _Py_SetLocaleFromEnv(int) @nogc nothrow;
    struct clockinfo
    {
        int hz;
        int tick;
        int tickadj;
        int stathz;
        int profhz;
    }
    int adjtime(const(timeval)*, timeval*) @nogc nothrow;
    int futimes(int, const(timeval)*) @nogc nothrow;
    int lutimes(const(char)*, const(timeval)*) @nogc nothrow;
    int settimeofday(const(timeval)*, const(timezone)*) @nogc nothrow;
    int getitimer(int, itimerval*) @nogc nothrow;
    int gettimeofday(timeval*, void*) @nogc nothrow;
    int setitimer(int, const(itimerval)*, itimerval*) @nogc nothrow;
    int utimes(const(char)*, const(timeval)*) @nogc nothrow;
    int _Py_LegacyLocaleDetected(int) @nogc nothrow;
    int _Py_CoerceLegacyLocale(int) @nogc nothrow;
    int _PyOS_URandomNonblock(void*, c_long) @nogc nothrow;
    int _PyOS_URandom(void*, c_long) @nogc nothrow;
    int _Py_IsFinalizing() @nogc nothrow;
    const(char)* _Py_gitversion() @nogc nothrow;
    const(char)* _Py_gitidentifier() @nogc nothrow;
    void _Py_SetProgramFullPath(const(int)*) @nogc nothrow;
    int Py_FdIsInteractive(__sFILE*, const(char)*) @nogc nothrow;
    void _Py_RestoreSignals() @nogc nothrow;
    void _Py_PyAtExit(void function(_object*), _object*) @nogc nothrow;
    void Py_ExitStatusException(PyStatus) @nogc nothrow;
    struct accessx_descriptor
    {
        uint ad_name_offset;
        int ad_flags;
        int[2] ad_pad;
    }
    int Py_RunMain() @nogc nothrow;
    PyStatus _Py_InitializeMain() @nogc nothrow;
    PyStatus _Py_InitializeFromWideArgs(const(PyConfig)*, c_long, int**) @nogc nothrow;
    PyStatus _Py_InitializeFromArgs(const(PyConfig)*, c_long, char**) @nogc nothrow;
    PyStatus Py_InitializeFromConfig(const(PyConfig)*) @nogc nothrow;
    int _Py_IsCoreInitialized() @nogc nothrow;
    PyStatus Py_PreInitializeFromArgs(const(PyPreConfig)*, c_long, int**) @nogc nothrow;
    PyStatus Py_PreInitializeFromBytesArgs(const(PyPreConfig)*, c_long, char**) @nogc nothrow;
    PyStatus Py_PreInitialize(const(PyPreConfig)*) @nogc nothrow;
    int Py_SetStandardStreamEncoding(const(char)*, const(char)*) @nogc nothrow;
    void _PyErr_WriteUnraisableMsg(const(char)*, _object*) @nogc nothrow;
    _object* _PyUnicodeTranslateError_Create(_object*, c_long, c_long, const(char)*) @nogc nothrow;
    _object* PyUnicodeTranslateError_Create(const(int)*, c_long, c_long, c_long, const(char)*) @nogc nothrow;
    int getattrlistbulk(int, void*, void*, c_ulong, ulong) @nogc nothrow;
    int getattrlistat(int, const(char)*, void*, void*, c_ulong, c_ulong) @nogc nothrow;
    int setattrlistat(int, const(char)*, void*, void*, c_ulong, uint) @nogc nothrow;
    int faccessat(int, const(char)*, int, int) @nogc nothrow;
    int fchownat(int, const(char)*, uint, uint, int) @nogc nothrow;
    int linkat(int, const(char)*, int, const(char)*, int) @nogc nothrow;
    c_long readlinkat(int, const(char)*, char*, c_ulong) @nogc nothrow;
    int symlinkat(const(char)*, int, const(char)*) @nogc nothrow;
    int unlinkat(int, const(char)*, int) @nogc nothrow;
    _object* PyUnicodeEncodeError_Create(const(char)*, const(int)*, c_long, c_long, c_long, const(char)*) @nogc nothrow;
    alias idtype_t = _Anonymous_17;
    enum _Anonymous_17
    {
        P_ALL = 0, 
        P_PID = 1, 
        P_PGID = 2, 
    }
    enum P_ALL = _Anonymous_17.P_ALL;
    enum P_PID = _Anonymous_17.P_PID;
    enum P_PGID = _Anonymous_17.P_PGID;
    _object* PyErr_ProgramTextObject(_object*, int) @nogc nothrow;
    void PyErr_SyntaxLocationObject(_object*, int, int) @nogc nothrow;
    int _PyErr_CheckSignals() @nogc nothrow;
    int PySignal_SetWakeupFd(int) @nogc nothrow;
    _object* _PyErr_TrySetFromCause(const(char)*, ...) @nogc nothrow;
    _object* _PyErr_FormatFromCause(_object*, const(char)*, ...) @nogc nothrow;
    void _PyErr_ChainExceptions(_object*, _object*, _object*) @nogc nothrow;
    _err_stackitem* _PyErr_GetTopmostException(_ts*) @nogc nothrow;
    void _PyErr_SetKeyError(_object*) @nogc nothrow;
    alias PyEnvironmentErrorObject = PyOSErrorObject;
    struct PyStopIterationObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
        _object* value;
    }
    union wait
    {
        int w_status;
        static struct _Anonymous_18
        {
            import std.bitmanip: bitfields;
        
            align(4):
            mixin(bitfields!(
                uint, "w_Termsig", 7,
                uint, "w_Coredump", 1,
                uint, "w_Retcode", 8,
                uint, "w_Filler", 16,
            ));
        }
        _Anonymous_18 w_T;
        static struct _Anonymous_19
        {
            import std.bitmanip: bitfields;
        
            align(4):
            mixin(bitfields!(
                uint, "w_Stopval", 8,
                uint, "w_Stopsig", 8,
                uint, "w_Filler", 16,
            ));
        }
        _Anonymous_19 w_S;
    }
    struct PyOSErrorObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
        _object* myerrno;
        _object* strerror;
        _object* filename;
        _object* filename2;
        c_long written;
    }
    struct PySystemExitObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
        _object* code;
    }
    pragma(mangle, "_wait") int wait_(int*) @nogc nothrow;
    int waitpid(int, int*, int) @nogc nothrow;
    int waitid(idtype_t, uint, __siginfo*, int) @nogc nothrow;
    int wait3(int*, int, rusage*) @nogc nothrow;
    int wait4(int, int*, int, rusage*) @nogc nothrow;
    struct tm
    {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        c_long tm_gmtoff;
        char* tm_zone;
    }
    extern __gshared char*[0] tzname;
    extern __gshared int getdate_err;
    pragma(mangle, "_timezone") extern __gshared c_long timezone_;
    extern __gshared int daylight;
    char* asctime(const(tm)*) @nogc nothrow;
    c_ulong clock() @nogc nothrow;
    char* ctime(const(c_long)*) @nogc nothrow;
    double difftime(c_long, c_long) @nogc nothrow;
    tm* getdate(const(char)*) @nogc nothrow;
    tm* gmtime(const(c_long)*) @nogc nothrow;
    tm* localtime(const(c_long)*) @nogc nothrow;
    c_long mktime(tm*) @nogc nothrow;
    c_ulong strftime(char*, c_ulong, const(char)*, const(tm)*) @nogc nothrow;
    char* strptime(const(char)*, const(char)*, tm*) @nogc nothrow;
    c_long time(c_long*) @nogc nothrow;
    void tzset() @nogc nothrow;
    char* asctime_r(const(tm)*, char*) @nogc nothrow;
    char* ctime_r(const(c_long)*, char*) @nogc nothrow;
    tm* gmtime_r(const(c_long)*, tm*) @nogc nothrow;
    tm* localtime_r(const(c_long)*, tm*) @nogc nothrow;
    c_long posix2time(c_long) @nogc nothrow;
    void tzsetwall() @nogc nothrow;
    c_long time2posix(c_long) @nogc nothrow;
    c_long timelocal(tm*) @nogc nothrow;
    c_long timegm(tm*) @nogc nothrow;
    int nanosleep(const(timespec)*, timespec*) @nogc nothrow;
    struct PyUnicodeErrorObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
        _object* encoding;
        _object* object;
        c_long start;
        c_long end;
        _object* reason;
    }
    alias clockid_t = _Anonymous_20;
    enum _Anonymous_20
    {
        _CLOCK_REALTIME = 0, 
        _CLOCK_MONOTONIC = 6, 
        _CLOCK_MONOTONIC_RAW = 4, 
        _CLOCK_MONOTONIC_RAW_APPROX = 5, 
        _CLOCK_UPTIME_RAW = 8, 
        _CLOCK_UPTIME_RAW_APPROX = 9, 
        _CLOCK_PROCESS_CPUTIME_ID = 12, 
        _CLOCK_THREAD_CPUTIME_ID = 16, 
    }
    enum _CLOCK_REALTIME = _Anonymous_20._CLOCK_REALTIME;
    enum _CLOCK_MONOTONIC = _Anonymous_20._CLOCK_MONOTONIC;
    enum _CLOCK_MONOTONIC_RAW = _Anonymous_20._CLOCK_MONOTONIC_RAW;
    enum _CLOCK_MONOTONIC_RAW_APPROX = _Anonymous_20._CLOCK_MONOTONIC_RAW_APPROX;
    enum _CLOCK_UPTIME_RAW = _Anonymous_20._CLOCK_UPTIME_RAW;
    enum _CLOCK_UPTIME_RAW_APPROX = _Anonymous_20._CLOCK_UPTIME_RAW_APPROX;
    enum _CLOCK_PROCESS_CPUTIME_ID = _Anonymous_20._CLOCK_PROCESS_CPUTIME_ID;
    enum _CLOCK_THREAD_CPUTIME_ID = _Anonymous_20._CLOCK_THREAD_CPUTIME_ID;
    struct PyImportErrorObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
        _object* msg;
        _object* name;
        _object* path;
    }
    struct PySyntaxErrorObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
        _object* msg;
        _object* filename;
        _object* lineno;
        _object* offset;
        _object* text;
        _object* print_file_and_line;
    }
    int clock_getres(clockid_t, timespec*) @nogc nothrow;
    int clock_gettime(clockid_t, timespec*) @nogc nothrow;
    ulong clock_gettime_nsec_np(clockid_t) @nogc nothrow;
    int clock_settime(clockid_t, const(timespec)*) @nogc nothrow;
    struct PyBaseExceptionObject
    {
        _object ob_base;
        _object* dict;
        _object* args;
        _object* traceback;
        _object* context;
        _object* cause;
        char suppress_context;
    }
    int timespec_get(timespec*, int) @nogc nothrow;
    _object* _PyObject_GC_Calloc(c_ulong) @nogc nothrow;
    _object* _PyObject_GC_Malloc(c_ulong) @nogc nothrow;
    struct PyGC_Head
    {
        c_ulong _gc_next;
        c_ulong _gc_prev;
    }
    c_long _PyGC_CollectIfEnabled() @nogc nothrow;
    c_long _PyGC_CollectNoFail() @nogc nothrow;
    void PyObject_SetArenaAllocator(PyObjectArenaAllocator*) @nogc nothrow;
    void PyObject_GetArenaAllocator(PyObjectArenaAllocator*) @nogc nothrow;
    struct PyObjectArenaAllocator
    {
        void* ctx;
        void* function(void*, c_ulong) alloc;
        void function(void*, void*, c_ulong) free;
    }
    int _PyObject_DebugMallocStats(__sFILE*) @nogc nothrow;
    c_long _Py_GetAllocatedBlocks() @nogc nothrow;
    int _PyObject_CheckConsistency(_object*, int) @nogc nothrow;
    void _PyObject_AssertFailed(_object*, const(char)*, const(char)*, const(char)*, int, const(char)*) @nogc nothrow;
    void _PyObject_DebugTypeStats(__sFILE*) @nogc nothrow;
    void _PyDebugAllocatorStats(__sFILE*, const(char)*, int, c_ulong) @nogc nothrow;
    void _PyTrash_destroy_chain() @nogc nothrow;
    void _PyTrash_deposit_object(_object*) @nogc nothrow;
    extern __gshared int[0] _Py_SwappedOp;
    extern __gshared _typeobject _PyNotImplemented_Type;
    extern __gshared _typeobject _PyNone_Type;
    static void _Py_Dealloc_inline(_object*) @nogc nothrow;
    int _PyObject_GenericSetAttrWithDict(_object*, _object*, _object*, _object*) @nogc nothrow;
    _object* _PyObject_GenericGetAttrWithDict(_object*, _object*, _object*, int) @nogc nothrow;
    int PyObject_CallFinalizerFromDealloc(_object*) @nogc nothrow;
    void PyObject_CallFinalizer(_object*) @nogc nothrow;
    _object* _PyObject_NextNotImplemented(_object*) @nogc nothrow;
    _object** _PyObject_GetDictPtr(_object*) @nogc nothrow;
    int _PyObject_LookupAttrId(_object*, _Py_Identifier*, _object**) @nogc nothrow;
    int _PyObject_LookupAttr(_object*, _object*, _object**) @nogc nothrow;
    int _PyObject_HasAttrId(_object*, _Py_Identifier*) @nogc nothrow;
    int _PyObject_SetAttrId(_object*, _Py_Identifier*, _object*) @nogc nothrow;
    _object* _PyObject_GetAttrId(_object*, _Py_Identifier*) @nogc nothrow;
    int _PyObject_IsAbstract(_object*) @nogc nothrow;
    int _PyObject_IsFreed(_object*) @nogc nothrow;
    void _PyObject_Dump(_object*) @nogc nothrow;
    void _Py_BreakPoint() @nogc nothrow;
    int PyObject_Print(_object*, __sFILE*, int) @nogc nothrow;
    _object* _PyType_GetTextSignatureFromInternalDoc(const(char)*, const(char)*) @nogc nothrow;
    _object* _PyType_GetDocFromInternalDoc(const(char)*, const(char)*) @nogc nothrow;
    _typeobject* _PyType_CalculateMetaclass(_typeobject*, _object*) @nogc nothrow;
    _object* _PyObject_LookupSpecial(_object*, _Py_Identifier*) @nogc nothrow;
    _object* _PyType_LookupId(_typeobject*, _Py_Identifier*) @nogc nothrow;
    _object* _PyType_Lookup(_typeobject*, _object*) @nogc nothrow;
    const(char)* _PyType_Name(_typeobject*) @nogc nothrow;
    struct _heaptypeobject
    {
        _typeobject ht_type;
        PyAsyncMethods as_async;
        PyNumberMethods as_number;
        PyMappingMethods as_mapping;
        PySequenceMethods as_sequence;
        PyBufferProcs as_buffer;
        _object* ht_name;
        _object* ht_slots;
        _object* ht_qualname;
        _dictkeysobject* ht_cached_keys;
    }
    alias PyHeapTypeObject = _heaptypeobject;
    struct PyGetSetDef
    {
        const(char)* name;
        _object* function(_object*, void*) get;
        int function(_object*, _object*, void*) set;
        const(char)* doc;
        void* closure;
    }
    struct PyMemberDef
    {
        const(char)* name;
        int type;
        c_long offset;
        int flags;
        const(char)* doc;
    }
    struct PyMethodDef
    {
        const(char)* ml_name;
        _object* function(_object*, _object*) ml_meth;
        int ml_flags;
        const(char)* ml_doc;
    }
    alias PyTypeObject = _typeobject;
    alias printfunc = c_long;
    struct PyBufferProcs
    {
        int function(_object*, bufferinfo*, int) bf_getbuffer;
        void function(_object*, bufferinfo*) bf_releasebuffer;
    }
    struct PyAsyncMethods
    {
        _object* function(_object*) am_await;
        _object* function(_object*) am_aiter;
        _object* function(_object*) am_anext;
    }
    struct PyMappingMethods
    {
        c_long function(_object*) mp_length;
        _object* function(_object*, _object*) mp_subscript;
        int function(_object*, _object*, _object*) mp_ass_subscript;
    }
    struct PySequenceMethods
    {
        c_long function(_object*) sq_length;
        _object* function(_object*, _object*) sq_concat;
        _object* function(_object*, c_long) sq_repeat;
        _object* function(_object*, c_long) sq_item;
        void* was_sq_slice;
        int function(_object*, c_long, _object*) sq_ass_item;
        void* was_sq_ass_slice;
        int function(_object*, _object*) sq_contains;
        _object* function(_object*, _object*) sq_inplace_concat;
        _object* function(_object*, c_long) sq_inplace_repeat;
    }
    struct PyNumberMethods
    {
        _object* function(_object*, _object*) nb_add;
        _object* function(_object*, _object*) nb_subtract;
        _object* function(_object*, _object*) nb_multiply;
        _object* function(_object*, _object*) nb_remainder;
        _object* function(_object*, _object*) nb_divmod;
        _object* function(_object*, _object*, _object*) nb_power;
        _object* function(_object*) nb_negative;
        _object* function(_object*) nb_positive;
        _object* function(_object*) nb_absolute;
        int function(_object*) nb_bool;
        _object* function(_object*) nb_invert;
        _object* function(_object*, _object*) nb_lshift;
        _object* function(_object*, _object*) nb_rshift;
        _object* function(_object*, _object*) nb_and;
        _object* function(_object*, _object*) nb_xor;
        _object* function(_object*, _object*) nb_or;
        _object* function(_object*) nb_int;
        void* nb_reserved;
        _object* function(_object*) nb_float;
        _object* function(_object*, _object*) nb_inplace_add;
        _object* function(_object*, _object*) nb_inplace_subtract;
        _object* function(_object*, _object*) nb_inplace_multiply;
        _object* function(_object*, _object*) nb_inplace_remainder;
        _object* function(_object*, _object*, _object*) nb_inplace_power;
        _object* function(_object*, _object*) nb_inplace_lshift;
        _object* function(_object*, _object*) nb_inplace_rshift;
        _object* function(_object*, _object*) nb_inplace_and;
        _object* function(_object*, _object*) nb_inplace_xor;
        _object* function(_object*, _object*) nb_inplace_or;
        _object* function(_object*, _object*) nb_floor_divide;
        _object* function(_object*, _object*) nb_true_divide;
        _object* function(_object*, _object*) nb_inplace_floor_divide;
        _object* function(_object*, _object*) nb_inplace_true_divide;
        _object* function(_object*) nb_index;
        _object* function(_object*, _object*) nb_matrix_multiply;
        _object* function(_object*, _object*) nb_inplace_matrix_multiply;
    }
    alias vectorcallfunc = _object* function(_object*, _object**, c_ulong, _object*);
    alias releasebufferproc = void function(_object*, bufferinfo*);
    alias getbufferproc = int function(_object*, bufferinfo*, int);
    struct bufferinfo
    {
        void* buf;
        _object* obj;
        c_long len;
        c_long itemsize;
        int readonly;
        int ndim;
        char* format;
        c_long* shape;
        c_long* strides;
        c_long* suboffsets;
        void* internal;
    }
    alias Py_buffer = bufferinfo;
    struct _Py_Identifier
    {
        _Py_Identifier* next;
        const(char)* string;
        _object* object;
    }
    PyStatus PyConfig_SetWideStringList(PyConfig*, PyWideStringList*, c_long, int**) @nogc nothrow;
    PyStatus PyConfig_SetArgv(PyConfig*, c_long, int**) @nogc nothrow;
    PyStatus PyConfig_SetBytesArgv(PyConfig*, c_long, char**) @nogc nothrow;
    PyStatus PyConfig_Read(PyConfig*) @nogc nothrow;
    PyStatus PyConfig_SetBytesString(PyConfig*, int**, const(char)*) @nogc nothrow;
    PyStatus PyConfig_SetString(PyConfig*, int**, const(int)*) @nogc nothrow;
    void PyConfig_Clear(PyConfig*) @nogc nothrow;
    void PyConfig_InitIsolatedConfig(PyConfig*) @nogc nothrow;
    void PyConfig_InitPythonConfig(PyConfig*) @nogc nothrow;
    struct PyConfig
    {
        int _config_init;
        int isolated;
        int use_environment;
        int dev_mode;
        int install_signal_handlers;
        int use_hash_seed;
        c_ulong hash_seed;
        int faulthandler;
        int tracemalloc;
        int import_time;
        int show_ref_count;
        int show_alloc_count;
        int dump_refs;
        int malloc_stats;
        int* filesystem_encoding;
        int* filesystem_errors;
        int* pycache_prefix;
        int parse_argv;
        PyWideStringList argv;
        int* program_name;
        PyWideStringList xoptions;
        PyWideStringList warnoptions;
        int site_import;
        int bytes_warning;
        int inspect;
        int interactive;
        int optimization_level;
        int parser_debug;
        int write_bytecode;
        int verbose;
        int quiet;
        int user_site_directory;
        int configure_c_stdio;
        int buffered_stdio;
        int* stdio_encoding;
        int* stdio_errors;
        int* check_hash_pycs_mode;
        int pathconfig_warnings;
        int* pythonpath_env;
        int* home;
        int module_search_paths_set;
        PyWideStringList module_search_paths;
        int* executable;
        int* base_executable;
        int* prefix;
        int* base_prefix;
        int* exec_prefix;
        int* base_exec_prefix;
        int skip_source_first_line;
        int* run_command;
        int* run_module;
        int* run_filename;
        int _install_importlib;
        int _init_main;
    }
    void PyPreConfig_InitIsolatedConfig(PyPreConfig*) @nogc nothrow;
    void PyPreConfig_InitPythonConfig(PyPreConfig*) @nogc nothrow;
    struct PyPreConfig
    {
        int _config_init;
        int parse_argv;
        int isolated;
        int use_environment;
        int configure_locale;
        int coerce_c_locale;
        int coerce_c_locale_warn;
        int utf8_mode;
        int dev_mode;
        int allocator;
    }
    PyStatus PyWideStringList_Insert(PyWideStringList*, c_long, const(int)*) @nogc nothrow;
    PyStatus PyWideStringList_Append(PyWideStringList*, const(int)*) @nogc nothrow;
    struct PyWideStringList
    {
        c_long length;
        int** items;
    }
    int PyStatus_Exception(PyStatus) @nogc nothrow;
    int PyStatus_IsExit(PyStatus) @nogc nothrow;
    int PyStatus_IsError(PyStatus) @nogc nothrow;
    PyStatus PyStatus_Exit(int) @nogc nothrow;
    PyStatus PyStatus_NoMemory() @nogc nothrow;
    PyStatus PyStatus_Error(const(char)*) @nogc nothrow;
    PyStatus PyStatus_Ok() @nogc nothrow;
    struct PyStatus
    {
        static enum _Anonymous_21
        {
            _PyStatus_TYPE_OK = 0, 
            _PyStatus_TYPE_ERROR = 1, 
            _PyStatus_TYPE_EXIT = 2, 
        }
        enum _PyStatus_TYPE_OK = _Anonymous_21._PyStatus_TYPE_OK;
        enum _PyStatus_TYPE_ERROR = _Anonymous_21._PyStatus_TYPE_ERROR;
        enum _PyStatus_TYPE_EXIT = _Anonymous_21._PyStatus_TYPE_EXIT;
        _Anonymous_21 _type;
        const(char)* func;
        const(char)* err_msg;
        int exitcode;
    }
    int PyFile_SetOpenCodeHook(_object* function(_object*, void*), void*) @nogc nothrow;
    _object* PyFile_OpenCodeObject(_object*) @nogc nothrow;
    _object* PyFile_OpenCode(const(char)*) @nogc nothrow;
    alias Py_OpenCodeHookFunction = _object* function(_object*, void*);
    extern __gshared _typeobject PyStdPrinter_Type;
    _object* PyFile_NewStdPrinter(int) @nogc nothrow;
    extern __gshared int Py_UTF8Mode;
    extern __gshared const(char)* Py_FileSystemDefaultEncodeErrors;
    char* Py_UniversalNewlineFgets(char*, int, __sFILE*, _object*) @nogc nothrow;
    _object* _PyDictView_Intersect(_object*, _object*) @nogc nothrow;
    _object* _PyDictView_New(_object*, _typeobject*) @nogc nothrow;
    struct _PyDictViewObject
    {
        _object ob_base;
        PyDictObject* dv_dict;
    }
    _object* _PyDict_LoadGlobal(PyDictObject*, PyDictObject*, _object*) @nogc nothrow;
    int _PyObjectDict_SetItem(_typeobject*, _object**, _object*, _object*) @nogc nothrow;
    void _PyDict_DebugMallocStats(__sFILE*) @nogc nothrow;
    int _PyDict_DelItemId(_object*, _Py_Identifier*) @nogc nothrow;
    int _PyDict_SetItemId(_object*, _Py_Identifier*, _object*) @nogc nothrow;
    _object* _PyDict_GetItemId(_object*, _Py_Identifier*) @nogc nothrow;
    int _PyDict_MergeEx(_object*, _object*, int) @nogc nothrow;
    int PyDict_ClearFreeList() @nogc nothrow;
    _object* _PyDict_FromKeys(_object*, _object*, _object*) @nogc nothrow;
    _object* _PyDict_Pop_KnownHash(_object*, _object*, c_long, _object*) @nogc nothrow;
    _object* _PyDict_Pop(_object*, _object*, _object*) @nogc nothrow;
    c_long _PyDict_SizeOf(PyDictObject*) @nogc nothrow;
    c_long _PyDict_KeysSize(_dictkeysobject*) @nogc nothrow;
    int _PyDict_HasOnlyStringKeys(_object*) @nogc nothrow;
    void _PyDict_MaybeUntrack(_object*) @nogc nothrow;
    _object* _PyDict_NewPresized(c_long) @nogc nothrow;
    int _PyDict_Contains(_object*, _object*, c_long) @nogc nothrow;
    int _PyDict_Next(_object*, c_long*, _object**, _object**, c_long*) @nogc nothrow;
    _object* PyObject_GenericGetDict(_object*, void*) @nogc nothrow;
    _dictkeysobject* _PyDict_NewKeysForClass() @nogc nothrow;
    int _PyDict_DelItemIf(_object*, _object*, int function(_object*)) @nogc nothrow;
    int _PyDict_DelItem_KnownHash(_object*, _object*, c_long) @nogc nothrow;
    int _PyDict_SetItem_KnownHash(_object*, _object*, _object*, c_long) @nogc nothrow;
    _object* PyDict_SetDefault(_object*, _object*, _object*) @nogc nothrow;
    _object* _PyDict_GetItemStringWithError(_object*, const(char)*) @nogc nothrow;
    _object* _PyDict_GetItemIdWithError(_object*, _Py_Identifier*) @nogc nothrow;
    _object* _PyDict_GetItem_KnownHash(_object*, _object*, c_long) @nogc nothrow;
    struct PyDictObject
    {
        _object ob_base;
        c_long ma_used;
        ulong ma_version_tag;
        _dictkeysobject* ma_keys;
        _object** ma_values;
    }
    alias PyDictKeysObject = _dictkeysobject;
    int _Py_convert_optional_to_ssize_t(_object*, void*) @nogc nothrow;
    void _Py_add_one_to_index_C(int, c_long*, const(c_long)*) @nogc nothrow;
    void _Py_add_one_to_index_F(int, c_long*, const(c_long)*) @nogc nothrow;
    void _Py_FreeCharPArray(char**) @nogc nothrow;
    char** _PySequence_BytesToCharpArray(_object*) @nogc nothrow;
    int _PyObject_RealIsSubclass(_object*, _object*) @nogc nothrow;
    int _PyObject_RealIsInstance(_object*, _object*) @nogc nothrow;
    void _exit(int) @nogc nothrow;
    int access(const(char)*, int) @nogc nothrow;
    uint alarm(uint) @nogc nothrow;
    int chdir(const(char)*) @nogc nothrow;
    int chown(const(char)*, uint, uint) @nogc nothrow;
    int close(int) @nogc nothrow;
    int dup(int) @nogc nothrow;
    int dup2(int, int) @nogc nothrow;
    int execl(const(char)*, const(char)*, ...) @nogc nothrow;
    int execle(const(char)*, const(char)*, ...) @nogc nothrow;
    int execlp(const(char)*, const(char)*, ...) @nogc nothrow;
    int execv(const(char)*, char**) @nogc nothrow;
    int execve(const(char)*, char**, char**) @nogc nothrow;
    int execvp(const(char)*, char**) @nogc nothrow;
    int fork() @nogc nothrow;
    c_long fpathconf(int, int) @nogc nothrow;
    char* getcwd(char*, c_ulong) @nogc nothrow;
    uint getegid() @nogc nothrow;
    uint geteuid() @nogc nothrow;
    uint getgid() @nogc nothrow;
    int getgroups(int, uint*) @nogc nothrow;
    char* getlogin() @nogc nothrow;
    int getpgrp() @nogc nothrow;
    int getpid() @nogc nothrow;
    int getppid() @nogc nothrow;
    uint getuid() @nogc nothrow;
    int isatty(int) @nogc nothrow;
    int link(const(char)*, const(char)*) @nogc nothrow;
    long lseek(int, long, int) @nogc nothrow;
    c_long pathconf(const(char)*, int) @nogc nothrow;
    int pause() @nogc nothrow;
    int pipe(int*) @nogc nothrow;
    c_long read(int, void*, c_ulong) @nogc nothrow;
    int rmdir(const(char)*) @nogc nothrow;
    int setgid(uint) @nogc nothrow;
    int setpgid(int, int) @nogc nothrow;
    int setsid() @nogc nothrow;
    int setuid(uint) @nogc nothrow;
    uint sleep(uint) @nogc nothrow;
    c_long sysconf(int) @nogc nothrow;
    int tcgetpgrp(int) @nogc nothrow;
    int tcsetpgrp(int, int) @nogc nothrow;
    char* ttyname(int) @nogc nothrow;
    int ttyname_r(int, char*, c_ulong) @nogc nothrow;
    int unlink(const(char)*) @nogc nothrow;
    c_long write(int, const(void)*, c_ulong) @nogc nothrow;
    c_ulong confstr(int, char*, c_ulong) @nogc nothrow;
    int getopt(int, char**, const(char)*) @nogc nothrow;
    extern __gshared char* optarg;
    extern __gshared int optind;
    extern __gshared int opterr;
    extern __gshared int optopt;
    c_long _PySequence_IterSearch(_object*, _object*, int) @nogc nothrow;
    void PyBuffer_Release(bufferinfo*) @nogc nothrow;
    void* brk(const(void)*) @nogc nothrow;
    int chroot(const(char)*) @nogc nothrow;
    char* crypt(const(char)*, const(char)*) @nogc nothrow;
    void encrypt(char*, int) @nogc nothrow;
    int fchdir(int) @nogc nothrow;
    c_long gethostid() @nogc nothrow;
    int getpgid(int) @nogc nothrow;
    int getsid(int) @nogc nothrow;
    int getdtablesize() @nogc nothrow;
    int getpagesize() @nogc nothrow;
    char* getpass(const(char)*) @nogc nothrow;
    char* getwd(char*) @nogc nothrow;
    int lchown(const(char)*, uint, uint) @nogc nothrow;
    int lockf(int, int, long) @nogc nothrow;
    int nice(int) @nogc nothrow;
    c_long pread(int, void*, c_ulong, long) @nogc nothrow;
    c_long pwrite(int, const(void)*, c_ulong, long) @nogc nothrow;
    void* sbrk(int) @nogc nothrow;
    int setpgrp() @nogc nothrow;
    int setregid(uint, uint) @nogc nothrow;
    int setreuid(uint, uint) @nogc nothrow;
    void sync() @nogc nothrow;
    int truncate(const(char)*, long) @nogc nothrow;
    uint ualarm(uint, uint) @nogc nothrow;
    int usleep(uint) @nogc nothrow;
    int vfork() @nogc nothrow;
    int fsync(int) @nogc nothrow;
    int ftruncate(int, long) @nogc nothrow;
    int getlogin_r(char*, c_ulong) @nogc nothrow;
    int fchown(int, uint, uint) @nogc nothrow;
    int gethostname(char*, c_ulong) @nogc nothrow;
    c_long readlink(const(char)*, char*, c_ulong) @nogc nothrow;
    int setegid(uint) @nogc nothrow;
    int seteuid(uint) @nogc nothrow;
    int symlink(const(char)*, const(char)*) @nogc nothrow;
    int accessx_np(const(accessx_descriptor)*, c_ulong, int*, uint) @nogc nothrow;
    int acct(const(char)*) @nogc nothrow;
    int add_profil(char*, c_ulong, c_ulong, uint) @nogc nothrow;
    void endusershell() @nogc nothrow;
    int execvP(const(char)*, const(char)*, char**) @nogc nothrow;
    char* fflagstostr(c_ulong) @nogc nothrow;
    int getdomainname(char*, int) @nogc nothrow;
    int getgrouplist(const(char)*, int, int*, int*) @nogc nothrow;
    ushort getmode(const(void)*, ushort) @nogc nothrow;
    int getpeereid(int, uint*, uint*) @nogc nothrow;
    int getsgroups_np(int*, ubyte*) @nogc nothrow;
    char* getusershell() @nogc nothrow;
    int getwgroups_np(int*, ubyte*) @nogc nothrow;
    int initgroups(const(char)*, int) @nogc nothrow;
    int issetugid() @nogc nothrow;
    char* mkdtemp(char*) @nogc nothrow;
    int mknod(const(char)*, ushort, int) @nogc nothrow;
    int mkpath_np(const(char)*, ushort) @nogc nothrow;
    int mkpathat_np(int, const(char)*, ushort) @nogc nothrow;
    int mkstemps(char*, int) @nogc nothrow;
    int mkostemp(char*, int) @nogc nothrow;
    int mkostemps(char*, int, int) @nogc nothrow;
    int mkstemp_dprotected_np(char*, int, int) @nogc nothrow;
    char* mkdtempat_np(int, char*) @nogc nothrow;
    int mkstempsat_np(int, char*, int) @nogc nothrow;
    int mkostempsat_np(int, char*, int, int) @nogc nothrow;
    int nfssvc(int, void*) @nogc nothrow;
    int profil(char*, c_ulong, c_ulong, uint) @nogc nothrow;
    int pthread_setugid_np(uint, uint) @nogc nothrow;
    int pthread_getugid_np(uint*, uint*) @nogc nothrow;
    int reboot(int) @nogc nothrow;
    int revoke(const(char)*) @nogc nothrow;
    int rcmd(char**, int, const(char)*, const(char)*, const(char)*, int*) @nogc nothrow;
    int rcmd_af(char**, int, const(char)*, const(char)*, const(char)*, int*, int) @nogc nothrow;
    int rresvport(int*) @nogc nothrow;
    int rresvport_af(int*, int) @nogc nothrow;
    int iruserok(c_ulong, int, const(char)*, const(char)*) @nogc nothrow;
    int iruserok_sa(const(void)*, int, int, const(char)*, const(char)*) @nogc nothrow;
    int ruserok(const(char)*, int, const(char)*, const(char)*) @nogc nothrow;
    int setdomainname(const(char)*, int) @nogc nothrow;
    int setgroups(int, const(uint)*) @nogc nothrow;
    void sethostid(c_long) @nogc nothrow;
    int sethostname(const(char)*, int) @nogc nothrow;
    int setlogin(const(char)*) @nogc nothrow;
    void* setmode(const(char)*) @nogc nothrow;
    int setrgid(uint) @nogc nothrow;
    int setruid(uint) @nogc nothrow;
    int setsgroups_np(int, const(ubyte*)) @nogc nothrow;
    void setusershell() @nogc nothrow;
    int setwgroups_np(int, const(ubyte*)) @nogc nothrow;
    int strtofflags(char**, c_ulong*, c_ulong*) @nogc nothrow;
    int swapon(const(char)*) @nogc nothrow;
    int ttyslot() @nogc nothrow;
    int undelete(const(char)*) @nogc nothrow;
    int unwhiteout(const(char)*) @nogc nothrow;
    int syscall(int, ...) @nogc nothrow;
    int fgetattrlist(int, void*, void*, c_ulong, uint) @nogc nothrow;
    int fsetattrlist(int, void*, void*, c_ulong, uint) @nogc nothrow;
    int getattrlist(const(char)*, void*, void*, c_ulong, uint) @nogc nothrow;
    int setattrlist(const(char)*, void*, void*, c_ulong, uint) @nogc nothrow;
    int exchangedata(const(char)*, const(char)*, uint) @nogc nothrow;
    int getdirentriesattr(int, void*, void*, c_ulong, uint*, uint*, uint*, uint) @nogc nothrow;
    struct fssearchblock;
    struct searchstate;
    int searchfs(const(char)*, fssearchblock*, c_ulong*, uint, uint, searchstate*) @nogc nothrow;
    int fsctl(const(char)*, c_ulong, void*, uint) @nogc nothrow;
    int ffsctl(int, c_ulong, void*, uint) @nogc nothrow;
    int PyBuffer_FillInfo(bufferinfo*, _object*, void*, c_long, int, int) @nogc nothrow;
    int fsync_volume_np(int, int) @nogc nothrow;
    int sync_volume_np(const(char)*, int) @nogc nothrow;
    extern __gshared int optreset;
    int btowc(int) @nogc nothrow;
    int fgetwc(__sFILE*) @nogc nothrow;
    int* fgetws(int*, int, __sFILE*) @nogc nothrow;
    int fputwc(int, __sFILE*) @nogc nothrow;
    int fputws(const(int)*, __sFILE*) @nogc nothrow;
    int fwide(__sFILE*, int) @nogc nothrow;
    int fwprintf(__sFILE*, const(int)*, ...) @nogc nothrow;
    int fwscanf(__sFILE*, const(int)*, ...) @nogc nothrow;
    int getwc(__sFILE*) @nogc nothrow;
    int getwchar() @nogc nothrow;
    c_ulong mbrlen(const(char)*, c_ulong, __mbstate_t*) @nogc nothrow;
    c_ulong mbrtowc(int*, const(char)*, c_ulong, __mbstate_t*) @nogc nothrow;
    int mbsinit(const(__mbstate_t)*) @nogc nothrow;
    c_ulong mbsrtowcs(int*, const(char)**, c_ulong, __mbstate_t*) @nogc nothrow;
    int putwc(int, __sFILE*) @nogc nothrow;
    int putwchar(int) @nogc nothrow;
    int swprintf(int*, c_ulong, const(int)*, ...) @nogc nothrow;
    int swscanf(const(int)*, const(int)*, ...) @nogc nothrow;
    int ungetwc(int, __sFILE*) @nogc nothrow;
    int vfwprintf(__sFILE*, const(int)*, va_list*) @nogc nothrow;
    int vswprintf(int*, c_ulong, const(int)*, va_list*) @nogc nothrow;
    int vwprintf(const(int)*, va_list*) @nogc nothrow;
    c_ulong wcrtomb(char*, int, __mbstate_t*) @nogc nothrow;
    int* wcscat(int*, const(int)*) @nogc nothrow;
    int* wcschr(const(int)*, int) @nogc nothrow;
    int wcscmp(const(int)*, const(int)*) @nogc nothrow;
    int wcscoll(const(int)*, const(int)*) @nogc nothrow;
    int* wcscpy(int*, const(int)*) @nogc nothrow;
    c_ulong wcscspn(const(int)*, const(int)*) @nogc nothrow;
    c_ulong wcsftime(int*, c_ulong, const(int)*, const(tm)*) @nogc nothrow;
    c_ulong wcslen(const(int)*) @nogc nothrow;
    int* wcsncat(int*, const(int)*, c_ulong) @nogc nothrow;
    int wcsncmp(const(int)*, const(int)*, c_ulong) @nogc nothrow;
    int* wcsncpy(int*, const(int)*, c_ulong) @nogc nothrow;
    int* wcspbrk(const(int)*, const(int)*) @nogc nothrow;
    int* wcsrchr(const(int)*, int) @nogc nothrow;
    c_ulong wcsrtombs(char*, const(int)**, c_ulong, __mbstate_t*) @nogc nothrow;
    c_ulong wcsspn(const(int)*, const(int)*) @nogc nothrow;
    int* wcsstr(const(int)*, const(int)*) @nogc nothrow;
    c_ulong wcsxfrm(int*, const(int)*, c_ulong) @nogc nothrow;
    int wctob(int) @nogc nothrow;
    double wcstod(const(int)*, int**) @nogc nothrow;
    int* wcstok(int*, const(int)*, int**) @nogc nothrow;
    c_long wcstol(const(int)*, int**, int) @nogc nothrow;
    c_ulong wcstoul(const(int)*, int**, int) @nogc nothrow;
    int* wmemchr(const(int)*, int, c_ulong) @nogc nothrow;
    int wmemcmp(const(int)*, const(int)*, c_ulong) @nogc nothrow;
    int* wmemcpy(int*, const(int)*, c_ulong) @nogc nothrow;
    int* wmemmove(int*, const(int)*, c_ulong) @nogc nothrow;
    int* wmemset(int*, int, c_ulong) @nogc nothrow;
    int wprintf(const(int)*, ...) @nogc nothrow;
    int wscanf(const(int)*, ...) @nogc nothrow;
    int wcswidth(const(int)*, c_ulong) @nogc nothrow;
    int wcwidth(int) @nogc nothrow;
    int vfwscanf(__sFILE*, const(int)*, va_list*) @nogc nothrow;
    int vswscanf(const(int)*, const(int)*, va_list*) @nogc nothrow;
    int vwscanf(const(int)*, va_list*) @nogc nothrow;
    float wcstof(const(int)*, int**) @nogc nothrow;
    real wcstold(const(int)*, int**) @nogc nothrow;
    long wcstoll(const(int)*, int**, int) @nogc nothrow;
    ulong wcstoull(const(int)*, int**, int) @nogc nothrow;
    c_ulong mbsnrtowcs(int*, const(char)**, c_ulong, c_ulong, __mbstate_t*) @nogc nothrow;
    int* wcpcpy(int*, const(int)*) @nogc nothrow;
    int* wcpncpy(int*, const(int)*, c_ulong) @nogc nothrow;
    int* wcsdup(const(int)*) @nogc nothrow;
    int wcscasecmp(const(int)*, const(int)*) @nogc nothrow;
    int wcsncasecmp(const(int)*, const(int)*, c_ulong) @nogc nothrow;
    c_ulong wcsnlen(const(int)*, c_ulong) @nogc nothrow;
    c_ulong wcsnrtombs(char*, const(int)**, c_ulong, c_ulong, __mbstate_t*) @nogc nothrow;
    __sFILE* open_wmemstream(int**, c_ulong*) @nogc nothrow;
    int* fgetwln(__sFILE*, c_ulong*) @nogc nothrow;
    c_ulong wcslcat(int*, const(int)*, c_ulong) @nogc nothrow;
    c_ulong wcslcpy(int*, const(int)*, c_ulong) @nogc nothrow;
    void PyBuffer_FillContiguousStrides(int, c_long*, c_long*, int, char) @nogc nothrow;
    int iswblank(int) @nogc nothrow;
    int iswascii(int) @nogc nothrow;
    int iswhexnumber(int) @nogc nothrow;
    int iswideogram(int) @nogc nothrow;
    int iswnumber(int) @nogc nothrow;
    int iswphonogram(int) @nogc nothrow;
    int iswrune(int) @nogc nothrow;
    int iswspecial(int) @nogc nothrow;
    int nextwctype(int, uint) @nogc nothrow;
    int towctrans(int, int) @nogc nothrow;
    int wctrans(const(char)*) @nogc nothrow;
    int PyBuffer_IsContiguous(const(bufferinfo)*, char) @nogc nothrow;
    int PyObject_CopyData(_object*, _object*) @nogc nothrow;
    int PyBuffer_FromContiguous(bufferinfo*, void*, c_long, char) @nogc nothrow;
    int PyBuffer_ToContiguous(void*, bufferinfo*, c_long, char) @nogc nothrow;
    int PyBuffer_SizeFromFormat(const(char)*) @nogc nothrow;
    void* PyBuffer_GetPointer(bufferinfo*, c_long*) @nogc nothrow;
    int PyObject_GetBuffer(_object*, bufferinfo*, int) @nogc nothrow;
    c_long PyObject_LengthHint(_object*, c_long) @nogc nothrow;
    int _PyObject_HasLen(_object*) @nogc nothrow;
    _object* _PyObject_CallMethodIdObjArgs(_object*, _Py_Identifier*, ...) @nogc nothrow;
    alias max_align_t = real;
    _object* _PyObject_CallMethodId_SizeT(_object*, _Py_Identifier*, const(char)*, ...) @nogc nothrow;
    _object* _PyObject_CallMethodId(_object*, _Py_Identifier*, const(char)*, ...) @nogc nothrow;
    _object* _PyObject_FastCall_Prepend(_object*, _object*, _object**, c_long) @nogc nothrow;
    _object* _PyObject_Call_Prepend(_object*, _object*, _object*, _object*) @nogc nothrow;
    static _object* _PyObject_CallNoArg(_object*) @nogc nothrow;
    static _object* _PyObject_FastCall(_object*, _object**, c_long) @nogc nothrow;
    _object* PyVectorcall_Call(_object*, _object*, _object*) @nogc nothrow;
    _object* _PyObject_FastCallDict(_object*, _object**, c_ulong, _object*) @nogc nothrow;
    static _object* _PyObject_Vectorcall(_object*, _object**, c_ulong, _object*) @nogc nothrow;
    static _object* function(_object*, _object**, c_ulong, _object*) _PyVectorcall_Function(_object*) @nogc nothrow;
    static c_long PyVectorcall_NARGS(c_ulong) @nogc nothrow;
    _object* _PyObject_MakeTpCall(_object*, _object**, c_long, _object*) @nogc nothrow;
    _object* _Py_CheckFunctionResult(_object*, _object*, const(char)*) @nogc nothrow;
    alias ptrdiff_t = c_long;
    int _PyStack_UnpackDict(_object**, c_long, _object*, _object***, _object**) @nogc nothrow;
    _object* _PyStack_AsDict(_object**, _object*) @nogc nothrow;
    int PyContext_ClearFreeList() @nogc nothrow;
    _object* PyObject_Call(_object*, _object*, _object*) @nogc nothrow;
    _object* PyObject_CallObject(_object*, _object*) @nogc nothrow;
    _object* PyObject_CallFunction(_object*, const(char)*, ...) @nogc nothrow;
    _object* PyObject_CallMethod(_object*, const(char)*, const(char)*, ...) @nogc nothrow;
    _object* _PyObject_CallFunction_SizeT(_object*, const(char)*, ...) @nogc nothrow;
    _object* _PyObject_CallMethod_SizeT(_object*, const(char)*, const(char)*, ...) @nogc nothrow;
    _object* PyObject_CallFunctionObjArgs(_object*, ...) @nogc nothrow;
    _object* PyObject_CallMethodObjArgs(_object*, _object*, ...) @nogc nothrow;
    _object* PyObject_Type(_object*) @nogc nothrow;
    c_long PyObject_Size(_object*) @nogc nothrow;
    c_long PyObject_Length(_object*) @nogc nothrow;
    _object* PyObject_GetItem(_object*, _object*) @nogc nothrow;
    int PyObject_SetItem(_object*, _object*, _object*) @nogc nothrow;
    int PyObject_DelItemString(_object*, const(char)*) @nogc nothrow;
    int PyObject_DelItem(_object*, _object*) @nogc nothrow;
    int PyObject_AsCharBuffer(_object*, const(char)**, c_long*) @nogc nothrow;
    int PyObject_CheckReadBuffer(_object*) @nogc nothrow;
    int PyObject_AsReadBuffer(_object*, const(void)**, c_long*) @nogc nothrow;
    int PyObject_AsWriteBuffer(_object*, void**, c_long*) @nogc nothrow;
    _object* PyObject_Format(_object*, _object*) @nogc nothrow;
    _object* PyObject_GetIter(_object*) @nogc nothrow;
    pragma(mangle, "_PyIter_Check")     int PyIter_Check_(_object*) @nogc nothrow;
    _object* PyIter_Next(_object*) @nogc nothrow;
    int PyNumber_Check(_object*) @nogc nothrow;
    _object* PyNumber_Add(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Subtract(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Multiply(_object*, _object*) @nogc nothrow;
    _object* PyNumber_MatrixMultiply(_object*, _object*) @nogc nothrow;
    _object* PyNumber_FloorDivide(_object*, _object*) @nogc nothrow;
    _object* PyNumber_TrueDivide(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Remainder(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Divmod(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Power(_object*, _object*, _object*) @nogc nothrow;
    _object* PyNumber_Negative(_object*) @nogc nothrow;
    _object* PyNumber_Positive(_object*) @nogc nothrow;
    _object* PyNumber_Absolute(_object*) @nogc nothrow;
    _object* PyNumber_Invert(_object*) @nogc nothrow;
    _object* PyNumber_Lshift(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Rshift(_object*, _object*) @nogc nothrow;
    _object* PyNumber_And(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Xor(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Or(_object*, _object*) @nogc nothrow;
    pragma(mangle, "_PyIndex_Check")     int PyIndex_Check_(_object*) @nogc nothrow;
    _object* PyNumber_Index(_object*) @nogc nothrow;
    c_long PyNumber_AsSsize_t(_object*, _object*) @nogc nothrow;
    _object* PyNumber_Long(_object*) @nogc nothrow;
    _object* PyNumber_Float(_object*) @nogc nothrow;
    _object* PyNumber_InPlaceAdd(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceSubtract(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceMultiply(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceMatrixMultiply(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceFloorDivide(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceTrueDivide(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceRemainder(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlacePower(_object*, _object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceLshift(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceRshift(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceAnd(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceXor(_object*, _object*) @nogc nothrow;
    _object* PyNumber_InPlaceOr(_object*, _object*) @nogc nothrow;
    _object* PyNumber_ToBase(_object*, int) @nogc nothrow;
    int PySequence_Check(_object*) @nogc nothrow;
    c_long PySequence_Size(_object*) @nogc nothrow;
    c_long PySequence_Length(_object*) @nogc nothrow;
    _object* _PyContext_NewHamtForTests() @nogc nothrow;
    _object* PySequence_Concat(_object*, _object*) @nogc nothrow;
    _object* PySequence_Repeat(_object*, c_long) @nogc nothrow;
    _object* PySequence_GetItem(_object*, c_long) @nogc nothrow;
    _object* PySequence_GetSlice(_object*, c_long, c_long) @nogc nothrow;
    int PySequence_SetItem(_object*, c_long, _object*) @nogc nothrow;
    int PySequence_DelItem(_object*, c_long) @nogc nothrow;
    int PySequence_SetSlice(_object*, c_long, c_long, _object*) @nogc nothrow;
    int PySequence_DelSlice(_object*, c_long, c_long) @nogc nothrow;
    _object* PySequence_Tuple(_object*) @nogc nothrow;
    _object* PySequence_List(_object*) @nogc nothrow;
    _object* PySequence_Fast(_object*, const(char)*) @nogc nothrow;
    int PyContextVar_Reset(_object*, _object*) @nogc nothrow;
    c_long PySequence_Count(_object*, _object*) @nogc nothrow;
    int PySequence_Contains(_object*, _object*) @nogc nothrow;
    int PySequence_In(_object*, _object*) @nogc nothrow;
    _object* PyContextVar_Set(_object*, _object*) @nogc nothrow;
    c_long PySequence_Index(_object*, _object*) @nogc nothrow;
    _object* PySequence_InPlaceConcat(_object*, _object*) @nogc nothrow;
    _object* PySequence_InPlaceRepeat(_object*, c_long) @nogc nothrow;
    int PyMapping_Check(_object*) @nogc nothrow;
    c_long PyMapping_Size(_object*) @nogc nothrow;
    c_long PyMapping_Length(_object*) @nogc nothrow;
    int PyContextVar_Get(_object*, _object*, _object**) @nogc nothrow;
    int PyMapping_HasKeyString(_object*, const(char)*) @nogc nothrow;
    int PyMapping_HasKey(_object*, _object*) @nogc nothrow;
    _object* PyMapping_Keys(_object*) @nogc nothrow;
    _object* PyMapping_Values(_object*) @nogc nothrow;
    _object* PyMapping_Items(_object*) @nogc nothrow;
    _object* PyMapping_GetItemString(_object*, const(char)*) @nogc nothrow;
    int PyMapping_SetItemString(_object*, const(char)*, _object*) @nogc nothrow;
    int PyObject_IsInstance(_object*, _object*) @nogc nothrow;
    int PyObject_IsSubclass(_object*, _object*) @nogc nothrow;
    _object* PyContextVar_New(const(char)*, _object*) @nogc nothrow;
    extern __gshared _typeobject PyFilter_Type;
    extern __gshared _typeobject PyMap_Type;
    extern __gshared _typeobject PyZip_Type;
    int PyContext_Exit(_object*) @nogc nothrow;
    extern __gshared _typeobject PyBool_Type;
    extern __gshared _longobject _Py_FalseStruct;
    extern __gshared _longobject _Py_TrueStruct;
    int PyContext_Enter(_object*) @nogc nothrow;
    _object* PyContext_CopyCurrent() @nogc nothrow;
    _object* PyBool_FromLong(c_long) @nogc nothrow;
    _object* PyContext_Copy(_object*) @nogc nothrow;
    struct PyByteArrayObject
    {
        PyVarObject ob_base;
        c_long ob_alloc;
        char* ob_bytes;
        char* ob_start;
        int ob_exports;
    }
    extern __gshared _typeobject PyByteArray_Type;
    extern __gshared _typeobject PyByteArrayIter_Type;
    _object* PyContext_New() @nogc nothrow;
    _object* PyByteArray_FromObject(_object*) @nogc nothrow;
    _object* PyByteArray_Concat(_object*, _object*) @nogc nothrow;
    _object* PyByteArray_FromStringAndSize(const(char)*, c_long) @nogc nothrow;
    c_long PyByteArray_Size(_object*) @nogc nothrow;
    char* PyByteArray_AsString(_object*) @nogc nothrow;
    int PyByteArray_Resize(_object*, c_long) @nogc nothrow;
    struct _pycontexttokenobject;
    extern __gshared char[0] _PyByteArray_empty_string;
    alias PyContextToken = _pycontexttokenobject;
    struct PyBytesObject
    {
        PyVarObject ob_base;
        c_long ob_shash;
        char[1] ob_sval;
    }
    extern __gshared _typeobject PyBytes_Type;
    extern __gshared _typeobject PyBytesIter_Type;
    extern __gshared _typeobject PyContextToken_Type;
    _object* PyBytes_FromStringAndSize(const(char)*, c_long) @nogc nothrow;
    _object* PyBytes_FromString(const(char)*) @nogc nothrow;
    _object* PyBytes_FromObject(_object*) @nogc nothrow;
    _object* PyBytes_FromFormatV(const(char)*, va_list*) @nogc nothrow;
    _object* PyBytes_FromFormat(const(char)*, ...) @nogc nothrow;
    c_long PyBytes_Size(_object*) @nogc nothrow;
    char* PyBytes_AsString(_object*) @nogc nothrow;
    _object* PyBytes_Repr(_object*, int) @nogc nothrow;
    void PyBytes_Concat(_object**, _object*) @nogc nothrow;
    void PyBytes_ConcatAndDel(_object**, _object*) @nogc nothrow;
    int _PyBytes_Resize(_object**, c_long) @nogc nothrow;
    _object* _PyBytes_FormatEx(const(char)*, c_long, _object*, int) @nogc nothrow;
    _object* _PyBytes_FromHex(_object*, int) @nogc nothrow;
    _object* PyBytes_DecodeEscape(const(char)*, c_long, const(char)*, c_long, const(char)*) @nogc nothrow;
    _object* _PyBytes_DecodeEscape(const(char)*, c_long, const(char)*, c_long, const(char)*, const(char)**) @nogc nothrow;
    struct _pycontextvarobject;
    alias PyContextVar = _pycontextvarobject;
    _object* _PyBytes_Join(_object*, _object*) @nogc nothrow;
    int PyBytes_AsStringAndSize(_object*, char**, c_long*) @nogc nothrow;
    c_long _PyBytes_InsertThousandsGroupingLocale(char*, c_long, char*, c_long, c_long) @nogc nothrow;
    c_long _PyBytes_InsertThousandsGrouping(char*, c_long, char*, c_long, c_long, const(char)*, const(char)*) @nogc nothrow;
    extern __gshared _typeobject PyContextVar_Type;
    struct _pycontextobject;
    alias PyContext = _pycontextobject;
    extern __gshared _typeobject PyContext_Type;
    struct _PyBytesWriter
    {
        _object* buffer;
        c_long allocated;
        c_long min_size;
        int use_bytearray;
        int overallocate;
        int use_small_buffer;
        char[512] small_buffer;
    }
    void _PyBytesWriter_Init(_PyBytesWriter*) @nogc nothrow;
    _object* _PyBytesWriter_Finish(_PyBytesWriter*, void*) @nogc nothrow;
    void _PyBytesWriter_Dealloc(_PyBytesWriter*) @nogc nothrow;
    void* _PyBytesWriter_Alloc(_PyBytesWriter*, c_long) @nogc nothrow;
    void* _PyBytesWriter_Prepare(_PyBytesWriter*, void*, c_long) @nogc nothrow;
    void* _PyBytesWriter_Resize(_PyBytesWriter*, void*, c_long) @nogc nothrow;
    void* _PyBytesWriter_WriteBytes(_PyBytesWriter*, void*, const(void)*, c_long) @nogc nothrow;
    struct PyCellObject
    {
        _object ob_base;
        _object* ob_ref;
    }
    extern __gshared _typeobject PyCell_Type;
    int _PyComplex_FormatAdvancedWriter(_PyUnicodeWriter*, _object*, _object*, c_long, c_long) @nogc nothrow;
    _object* PyCell_New(_object*) @nogc nothrow;
    _object* PyCell_Get(_object*) @nogc nothrow;
    int PyCell_Set(_object*, _object*) @nogc nothrow;
    Py_complex PyComplex_AsCComplex(_object*) @nogc nothrow;
    _object* PyEval_CallObjectWithKeywords(_object*, _object*, _object*) @nogc nothrow;
    double PyComplex_ImagAsDouble(_object*) @nogc nothrow;
    _object* PyEval_CallFunction(_object*, const(char)*, ...) @nogc nothrow;
    _object* PyEval_CallMethod(_object*, const(char)*, const(char)*, ...) @nogc nothrow;
    void PyEval_SetProfile(int function(_object*, _frame*, int, _object*), _object*) @nogc nothrow;
    void PyEval_SetTrace(int function(_object*, _frame*, int, _object*), _object*) @nogc nothrow;
    void _PyEval_SetCoroutineOriginTrackingDepth(int) @nogc nothrow;
    int _PyEval_GetCoroutineOriginTrackingDepth() @nogc nothrow;
    void _PyEval_SetAsyncGenFirstiter(_object*) @nogc nothrow;
    _object* _PyEval_GetAsyncGenFirstiter() @nogc nothrow;
    void _PyEval_SetAsyncGenFinalizer(_object*) @nogc nothrow;
    _object* _PyEval_GetAsyncGenFinalizer() @nogc nothrow;
    _object* PyEval_GetBuiltins() @nogc nothrow;
    _object* PyEval_GetGlobals() @nogc nothrow;
    _object* PyEval_GetLocals() @nogc nothrow;
    _frame* PyEval_GetFrame() @nogc nothrow;
    _object* _PyEval_GetBuiltinId(_Py_Identifier*) @nogc nothrow;
    int PyEval_MergeCompilerFlags(PyCompilerFlags*) @nogc nothrow;
    int Py_AddPendingCall(int function(void*), void*) @nogc nothrow;
    int Py_MakePendingCalls() @nogc nothrow;
    void Py_SetRecursionLimit(int) @nogc nothrow;
    int Py_GetRecursionLimit() @nogc nothrow;
    double PyComplex_RealAsDouble(_object*) @nogc nothrow;
    int _Py_CheckRecursiveCall(const(char)*) @nogc nothrow;
    extern __gshared int _Py_CheckRecursionLimit;
    _object* PyComplex_FromDoubles(double, double) @nogc nothrow;
    _object* PyComplex_FromCComplex(Py_complex) @nogc nothrow;
    const(char)* PyEval_GetFuncName(_object*) @nogc nothrow;
    const(char)* PyEval_GetFuncDesc(_object*) @nogc nothrow;
    _object* PyEval_EvalFrame(_frame*) @nogc nothrow;
    _object* PyEval_EvalFrameEx(_frame*, int) @nogc nothrow;
    _object* _PyEval_EvalFrameDefault(_frame*, int) @nogc nothrow;
    _ts* PyEval_SaveThread() @nogc nothrow;
    void PyEval_RestoreThread(_ts*) @nogc nothrow;
    int PyEval_ThreadsInitialized() @nogc nothrow;
    void PyEval_InitThreads() @nogc nothrow;
    void PyEval_AcquireLock() @nogc nothrow;
    void PyEval_ReleaseLock() @nogc nothrow;
    void PyEval_AcquireThread(_ts*) @nogc nothrow;
    void PyEval_ReleaseThread(_ts*) @nogc nothrow;
    void _PyEval_SetSwitchInterval(c_ulong) @nogc nothrow;
    c_ulong _PyEval_GetSwitchInterval() @nogc nothrow;
    c_long _PyEval_RequestCodeExtraIndex(void function(void*)) @nogc nothrow;
    extern __gshared _typeobject PyComplex_Type;
    int _PyEval_SliceIndex(_object*, c_long*) @nogc nothrow;
    int _PyEval_SliceIndexNotNone(_object*, c_long*) @nogc nothrow;
    struct PyComplexObject
    {
        _object ob_base;
        Py_complex cval;
    }
    double _Py_c_abs(Py_complex) @nogc nothrow;
    Py_complex _Py_c_pow(Py_complex, Py_complex) @nogc nothrow;
    Py_complex _Py_c_quot(Py_complex, Py_complex) @nogc nothrow;
    Py_complex _Py_c_prod(Py_complex, Py_complex) @nogc nothrow;
    struct PyMethodObject
    {
        _object ob_base;
        _object* im_func;
        _object* im_self;
        _object* im_weakreflist;
        _object* function(_object*, _object**, c_ulong, _object*) vectorcall;
    }
    extern __gshared _typeobject PyMethod_Type;
    _object* PyMethod_New(_object*, _object*) @nogc nothrow;
    _object* PyMethod_Function(_object*) @nogc nothrow;
    _object* PyMethod_Self(_object*) @nogc nothrow;
    Py_complex _Py_c_neg(Py_complex) @nogc nothrow;
    int PyMethod_ClearFreeList() @nogc nothrow;
    struct PyInstanceMethodObject
    {
        _object ob_base;
        _object* func;
    }
    extern __gshared _typeobject PyInstanceMethod_Type;
    Py_complex _Py_c_diff(Py_complex, Py_complex) @nogc nothrow;
    _object* PyInstanceMethod_New(_object*) @nogc nothrow;
    _object* PyInstanceMethod_Function(_object*) @nogc nothrow;
    Py_complex _Py_c_sum(Py_complex, Py_complex) @nogc nothrow;
    alias _Py_CODEUNIT = ushort;
    struct _PyOpcache;
    struct PyCodeObject
    {
        _object ob_base;
        int co_argcount;
        int co_posonlyargcount;
        int co_kwonlyargcount;
        int co_nlocals;
        int co_stacksize;
        int co_flags;
        int co_firstlineno;
        _object* co_code;
        _object* co_consts;
        _object* co_names;
        _object* co_varnames;
        _object* co_freevars;
        _object* co_cellvars;
        c_long* co_cell2arg;
        _object* co_filename;
        _object* co_name;
        _object* co_lnotab;
        void* co_zombieframe;
        _object* co_weakreflist;
        void* co_extra;
        ubyte* co_opcache_map;
        _PyOpcache* co_opcache;
        int co_opcache_flag;
        ubyte co_opcache_size;
    }
    struct Py_complex
    {
        double real_;
        double imag;
    }
    int _PyAST_Optimize(_mod*, _arena*, int) @nogc nothrow;
    int PyCompile_OpcodeStackEffectWithJump(int, int, int) @nogc nothrow;
    int PyCompile_OpcodeStackEffect(int, int) @nogc nothrow;
    _object* _Py_Mangle(_object*, _object*) @nogc nothrow;
    PyFutureFeatures* PyFuture_FromASTObject(_mod*, _object*) @nogc nothrow;
    PyFutureFeatures* PyFuture_FromAST(_mod*, const(char)*) @nogc nothrow;
    PyCodeObject* PyAST_CompileObject(_mod*, _object*, PyCompilerFlags*, int, _arena*) @nogc nothrow;
    PyCodeObject* PyAST_CompileEx(_mod*, const(char)*, PyCompilerFlags*, int, _arena*) @nogc nothrow;
    struct _mod;
    struct PyFutureFeatures
    {
        int ff_features;
        int ff_lineno;
    }
    extern __gshared _typeobject PyCode_Type;
    struct PyCompilerFlags
    {
        int cf_flags;
        int cf_feature_version;
    }
    PyCodeObject* PyNode_Compile(_node*, const(char)*) @nogc nothrow;
    PyCodeObject* PyCode_New(int, int, int, int, int, _object*, _object*, _object*, _object*, _object*, _object*, _object*, _object*, int, _object*) @nogc nothrow;
    PyCodeObject* PyCode_NewWithPosOnlyArgs(int, int, int, int, int, int, _object*, _object*, _object*, _object*, _object*, _object*, _object*, _object*, int, _object*) @nogc nothrow;
    PyCodeObject* PyCode_NewEmpty(const(char)*, const(char)*, int) @nogc nothrow;
    int PyCode_Addr2Line(PyCodeObject*, int) @nogc nothrow;
    alias PyAddrPair = _addr_pair;
    struct _addr_pair
    {
        int ap_lower;
        int ap_upper;
    }
    int _PyCode_CheckLineNumber(PyCodeObject*, int, _addr_pair*) @nogc nothrow;
    _object* _PyCode_ConstantKey(_object*) @nogc nothrow;
    _object* PyCode_Optimize(_object*, _object*, _object*, _object*) @nogc nothrow;
    int _PyCode_GetExtra(_object*, c_long, void**) @nogc nothrow;
    int _PyCode_SetExtra(_object*, c_long, void*) @nogc nothrow;
    int PyCodec_Register(_object*) @nogc nothrow;
    _object* _PyCodec_Lookup(const(char)*) @nogc nothrow;
    int _PyCodec_Forget(const(char)*) @nogc nothrow;
    int PyCodec_KnownEncoding(const(char)*) @nogc nothrow;
    _object* PyCodec_Encode(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* PyCodec_Decode(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* _PyCodec_LookupTextEncoding(const(char)*, const(char)*) @nogc nothrow;
    _object* _PyCodec_EncodeText(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* _PyCodec_DecodeText(_object*, const(char)*, const(char)*) @nogc nothrow;
    _object* _PyCodecInfo_GetIncrementalDecoder(_object*, const(char)*) @nogc nothrow;
    _object* _PyCodecInfo_GetIncrementalEncoder(_object*, const(char)*) @nogc nothrow;
    _object* PyCodec_Encoder(const(char)*) @nogc nothrow;
    _object* PyCodec_Decoder(const(char)*) @nogc nothrow;
    _object* PyCodec_IncrementalEncoder(const(char)*, const(char)*) @nogc nothrow;
    _object* PyCodec_IncrementalDecoder(const(char)*, const(char)*) @nogc nothrow;
    _object* PyCodec_StreamReader(const(char)*, _object*, const(char)*) @nogc nothrow;
    _object* PyCodec_StreamWriter(const(char)*, _object*, const(char)*) @nogc nothrow;
    int PyCodec_RegisterError(const(char)*, _object*) @nogc nothrow;
    _object* PyCodec_LookupError(const(char)*) @nogc nothrow;
    _object* PyCodec_StrictErrors(_object*) @nogc nothrow;
    _object* PyCodec_IgnoreErrors(_object*) @nogc nothrow;
    _object* PyCodec_ReplaceErrors(_object*) @nogc nothrow;
    _object* PyCodec_XMLCharRefReplaceErrors(_object*) @nogc nothrow;
    _object* PyCodec_BackslashReplaceErrors(_object*) @nogc nothrow;
    _object* PyCodec_NameReplaceErrors(_object*) @nogc nothrow;
    extern __gshared const(char)* Py_hexdigits;
    struct _node;
    

    

    

    


    static if(!is(typeof(PyCF_MASK))) {
        private enum enumMixinStr_PyCF_MASK = `enum PyCF_MASK = ( CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_WITH_STATEMENT | CO_FUTURE_PRINT_FUNCTION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_BARRY_AS_BDFL | CO_FUTURE_GENERATOR_STOP | CO_FUTURE_ANNOTATIONS );`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_MASK); }))) {
            mixin(enumMixinStr_PyCF_MASK);
        }
    }
    
    #ifdef PyCF_MASK_OBSOLETE
    
    #endif
    static if(!is(typeof(PyCF_MASK_OBSOLETE))) {
        private enum enumMixinStr_PyCF_MASK_OBSOLETE = `enum PyCF_MASK_OBSOLETE = ( CO_NESTED );`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_MASK_OBSOLETE); }))) {
            mixin(enumMixinStr_PyCF_MASK_OBSOLETE);
        }
    }
    
    #ifdef PyCF_SOURCE_IS_UTF8
    
    #endif
    static if(!is(typeof(PyCF_SOURCE_IS_UTF8))) {
        private enum enumMixinStr_PyCF_SOURCE_IS_UTF8 = `enum PyCF_SOURCE_IS_UTF8 = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_SOURCE_IS_UTF8); }))) {
            mixin(enumMixinStr_PyCF_SOURCE_IS_UTF8);
        }
    }
    
    #ifdef PyCF_DONT_IMPLY_DEDENT
    
    #endif
    static if(!is(typeof(PyCF_DONT_IMPLY_DEDENT))) {
        private enum enumMixinStr_PyCF_DONT_IMPLY_DEDENT = `enum PyCF_DONT_IMPLY_DEDENT = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_DONT_IMPLY_DEDENT); }))) {
            mixin(enumMixinStr_PyCF_DONT_IMPLY_DEDENT);
        }
    }
    
    #ifdef PyCF_ONLY_AST
    
    #endif
    static if(!is(typeof(PyCF_ONLY_AST))) {
        private enum enumMixinStr_PyCF_ONLY_AST = `enum PyCF_ONLY_AST = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_ONLY_AST); }))) {
            mixin(enumMixinStr_PyCF_ONLY_AST);
        }
    }
    
    #ifdef PyCF_IGNORE_COOKIE
    
    #endif
    static if(!is(typeof(PyCF_IGNORE_COOKIE))) {
        private enum enumMixinStr_PyCF_IGNORE_COOKIE = `enum PyCF_IGNORE_COOKIE = 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_IGNORE_COOKIE); }))) {
            mixin(enumMixinStr_PyCF_IGNORE_COOKIE);
        }
    }
    
    #ifdef PyCF_TYPE_COMMENTS
    
    #endif
    static if(!is(typeof(PyCF_TYPE_COMMENTS))) {
        private enum enumMixinStr_PyCF_TYPE_COMMENTS = `enum PyCF_TYPE_COMMENTS = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_TYPE_COMMENTS); }))) {
            mixin(enumMixinStr_PyCF_TYPE_COMMENTS);
        }
    }
    
    #ifdef PyCF_ALLOW_TOP_LEVEL_AWAIT
    
    #endif
    static if(!is(typeof(PyCF_ALLOW_TOP_LEVEL_AWAIT))) {
        private enum enumMixinStr_PyCF_ALLOW_TOP_LEVEL_AWAIT = `enum PyCF_ALLOW_TOP_LEVEL_AWAIT = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_PyCF_ALLOW_TOP_LEVEL_AWAIT); }))) {
            mixin(enumMixinStr_PyCF_ALLOW_TOP_LEVEL_AWAIT);
        }
    }
    
    #define PyCode_Check( op ) ( Py_TYPE ( op ) == & PyCode_Type )

    


    static if(!is(typeof(CO_MAXBLOCKS))) {
        private enum enumMixinStr_CO_MAXBLOCKS = `enum CO_MAXBLOCKS = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_MAXBLOCKS); }))) {
            mixin(enumMixinStr_CO_MAXBLOCKS);
        }
    }
    
    #ifdef _PyCompilerFlags_INIT
    
    #endif
    static if(!is(typeof(_PyCompilerFlags_INIT))) {
        private enum enumMixinStr__PyCompilerFlags_INIT = `enum _PyCompilerFlags_INIT = cast( PyCompilerFlags ) { . cf_flags = 0 , . cf_feature_version = PY_MINOR_VERSION };`;
        static if(is(typeof({ mixin(enumMixinStr__PyCompilerFlags_INIT); }))) {
            mixin(enumMixinStr__PyCompilerFlags_INIT);
        }
    }
    
    #define PY_PARSER_REQUIRES_FUTURE_KEYWORD 

    


    static if(!is(typeof(CO_CELL_NOT_AN_ARG))) {
        private enum enumMixinStr_CO_CELL_NOT_AN_ARG = `enum CO_CELL_NOT_AN_ARG = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_CO_CELL_NOT_AN_ARG); }))) {
            mixin(enumMixinStr_CO_CELL_NOT_AN_ARG);
        }
    }
    
    #ifdef FUTURE_NESTED_SCOPES
    
    #endif
    static if(!is(typeof(FUTURE_NESTED_SCOPES))) {
        private enum enumMixinStr_FUTURE_NESTED_SCOPES = `enum FUTURE_NESTED_SCOPES = "nested_scopes";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_NESTED_SCOPES); }))) {
            mixin(enumMixinStr_FUTURE_NESTED_SCOPES);
        }
    }
    
    #ifdef FUTURE_GENERATORS
    
    #endif
    static if(!is(typeof(FUTURE_GENERATORS))) {
        private enum enumMixinStr_FUTURE_GENERATORS = `enum FUTURE_GENERATORS = "generators";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_GENERATORS); }))) {
            mixin(enumMixinStr_FUTURE_GENERATORS);
        }
    }
    
    #ifdef FUTURE_DIVISION
    
    #endif
    static if(!is(typeof(FUTURE_DIVISION))) {
        private enum enumMixinStr_FUTURE_DIVISION = `enum FUTURE_DIVISION = "division";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_DIVISION); }))) {
            mixin(enumMixinStr_FUTURE_DIVISION);
        }
    }
    
    #ifdef FUTURE_ABSOLUTE_IMPORT
    
    #endif
    static if(!is(typeof(FUTURE_ABSOLUTE_IMPORT))) {
        private enum enumMixinStr_FUTURE_ABSOLUTE_IMPORT = `enum FUTURE_ABSOLUTE_IMPORT = "absolute_import";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_ABSOLUTE_IMPORT); }))) {
            mixin(enumMixinStr_FUTURE_ABSOLUTE_IMPORT);
        }
    }
    
    #ifdef FUTURE_WITH_STATEMENT
    
    #endif
    static if(!is(typeof(FUTURE_WITH_STATEMENT))) {
        private enum enumMixinStr_FUTURE_WITH_STATEMENT = `enum FUTURE_WITH_STATEMENT = "with_statement";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_WITH_STATEMENT); }))) {
            mixin(enumMixinStr_FUTURE_WITH_STATEMENT);
        }
    }
    
    #ifdef FUTURE_PRINT_FUNCTION
    
    #endif
    static if(!is(typeof(FUTURE_PRINT_FUNCTION))) {
        private enum enumMixinStr_FUTURE_PRINT_FUNCTION = `enum FUTURE_PRINT_FUNCTION = "print_function";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_PRINT_FUNCTION); }))) {
            mixin(enumMixinStr_FUTURE_PRINT_FUNCTION);
        }
    }
    
    #ifdef FUTURE_UNICODE_LITERALS
    
    #endif
    static if(!is(typeof(FUTURE_UNICODE_LITERALS))) {
        private enum enumMixinStr_FUTURE_UNICODE_LITERALS = `enum FUTURE_UNICODE_LITERALS = "unicode_literals";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_UNICODE_LITERALS); }))) {
            mixin(enumMixinStr_FUTURE_UNICODE_LITERALS);
        }
    }
    
    #ifdef FUTURE_BARRY_AS_BDFL
    
    #endif
    static if(!is(typeof(FUTURE_BARRY_AS_BDFL))) {
        private enum enumMixinStr_FUTURE_BARRY_AS_BDFL = `enum FUTURE_BARRY_AS_BDFL = "barry_as_FLUFL";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_BARRY_AS_BDFL); }))) {
            mixin(enumMixinStr_FUTURE_BARRY_AS_BDFL);
        }
    }
    
    #ifdef FUTURE_GENERATOR_STOP
    
    #endif
    static if(!is(typeof(FUTURE_GENERATOR_STOP))) {
        private enum enumMixinStr_FUTURE_GENERATOR_STOP = `enum FUTURE_GENERATOR_STOP = "generator_stop";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_GENERATOR_STOP); }))) {
            mixin(enumMixinStr_FUTURE_GENERATOR_STOP);
        }
    }
    
    #ifdef FUTURE_ANNOTATIONS
    
    #endif
    static if(!is(typeof(FUTURE_ANNOTATIONS))) {
        private enum enumMixinStr_FUTURE_ANNOTATIONS = `enum FUTURE_ANNOTATIONS = "annotations";`;
        static if(is(typeof({ mixin(enumMixinStr_FUTURE_ANNOTATIONS); }))) {
            mixin(enumMixinStr_FUTURE_ANNOTATIONS);
        }
    }
    
    #ifdef CO_FUTURE_ANNOTATIONS
    
    #endif
    static if(!is(typeof(CO_FUTURE_ANNOTATIONS))) {
        private enum enumMixinStr_CO_FUTURE_ANNOTATIONS = `enum CO_FUTURE_ANNOTATIONS = 0x100000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_ANNOTATIONS); }))) {
            mixin(enumMixinStr_CO_FUTURE_ANNOTATIONS);
        }
    }
    
    #define PyAST_Compile( mod , s , f , ar ) PyAST_CompileEx ( mod , s , f , - 1 , ar )

    


    static if(!is(typeof(CO_FUTURE_GENERATOR_STOP))) {
        private enum enumMixinStr_CO_FUTURE_GENERATOR_STOP = `enum CO_FUTURE_GENERATOR_STOP = 0x80000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_GENERATOR_STOP); }))) {
            mixin(enumMixinStr_CO_FUTURE_GENERATOR_STOP);
        }
    }
    
    #ifdef CO_FUTURE_BARRY_AS_BDFL
    
    #endif
    static if(!is(typeof(CO_FUTURE_BARRY_AS_BDFL))) {
        private enum enumMixinStr_CO_FUTURE_BARRY_AS_BDFL = `enum CO_FUTURE_BARRY_AS_BDFL = 0x40000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_BARRY_AS_BDFL); }))) {
            mixin(enumMixinStr_CO_FUTURE_BARRY_AS_BDFL);
        }
    }
    
    #ifdef CO_FUTURE_UNICODE_LITERALS
    
    #endif
    static if(!is(typeof(CO_FUTURE_UNICODE_LITERALS))) {
        private enum enumMixinStr_CO_FUTURE_UNICODE_LITERALS = `enum CO_FUTURE_UNICODE_LITERALS = 0x20000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_UNICODE_LITERALS); }))) {
            mixin(enumMixinStr_CO_FUTURE_UNICODE_LITERALS);
        }
    }
    
    #ifdef CO_FUTURE_PRINT_FUNCTION
    
    #endif
    static if(!is(typeof(CO_FUTURE_PRINT_FUNCTION))) {
        private enum enumMixinStr_CO_FUTURE_PRINT_FUNCTION = `enum CO_FUTURE_PRINT_FUNCTION = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_PRINT_FUNCTION); }))) {
            mixin(enumMixinStr_CO_FUTURE_PRINT_FUNCTION);
        }
    }
    
    #ifdef CO_FUTURE_WITH_STATEMENT
    
    #endif
    static if(!is(typeof(CO_FUTURE_WITH_STATEMENT))) {
        private enum enumMixinStr_CO_FUTURE_WITH_STATEMENT = `enum CO_FUTURE_WITH_STATEMENT = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_WITH_STATEMENT); }))) {
            mixin(enumMixinStr_CO_FUTURE_WITH_STATEMENT);
        }
    }
    
    #ifdef CO_FUTURE_ABSOLUTE_IMPORT
    
    #endif
    static if(!is(typeof(CO_FUTURE_ABSOLUTE_IMPORT))) {
        private enum enumMixinStr_CO_FUTURE_ABSOLUTE_IMPORT = `enum CO_FUTURE_ABSOLUTE_IMPORT = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_ABSOLUTE_IMPORT); }))) {
            mixin(enumMixinStr_CO_FUTURE_ABSOLUTE_IMPORT);
        }
    }
    
    #ifdef CO_FUTURE_DIVISION
    
    #endif
    static if(!is(typeof(CO_FUTURE_DIVISION))) {
        private enum enumMixinStr_CO_FUTURE_DIVISION = `enum CO_FUTURE_DIVISION = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_FUTURE_DIVISION); }))) {
            mixin(enumMixinStr_CO_FUTURE_DIVISION);
        }
    }
    
    #ifdef CO_ASYNC_GENERATOR
    
    #endif
    static if(!is(typeof(CO_ASYNC_GENERATOR))) {
        private enum enumMixinStr_CO_ASYNC_GENERATOR = `enum CO_ASYNC_GENERATOR = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_ASYNC_GENERATOR); }))) {
            mixin(enumMixinStr_CO_ASYNC_GENERATOR);
        }
    }
    
    #ifdef CO_ITERABLE_COROUTINE
    
    #endif
    static if(!is(typeof(CO_ITERABLE_COROUTINE))) {
        private enum enumMixinStr_CO_ITERABLE_COROUTINE = `enum CO_ITERABLE_COROUTINE = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_ITERABLE_COROUTINE); }))) {
            mixin(enumMixinStr_CO_ITERABLE_COROUTINE);
        }
    }
    
    #ifdef CO_COROUTINE
    
    #endif
    static if(!is(typeof(CO_COROUTINE))) {
        private enum enumMixinStr_CO_COROUTINE = `enum CO_COROUTINE = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_COROUTINE); }))) {
            mixin(enumMixinStr_CO_COROUTINE);
        }
    }
    
    #ifdef PY_INVALID_STACK_EFFECT
    
    #endif
    static if(!is(typeof(PY_INVALID_STACK_EFFECT))) {
        private enum enumMixinStr_PY_INVALID_STACK_EFFECT = `enum PY_INVALID_STACK_EFFECT = INT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_INVALID_STACK_EFFECT); }))) {
            mixin(enumMixinStr_PY_INVALID_STACK_EFFECT);
        }
    }
    
    #ifdef CO_NOFREE
    
    #endif
    static if(!is(typeof(CO_NOFREE))) {
        private enum enumMixinStr_CO_NOFREE = `enum CO_NOFREE = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_NOFREE); }))) {
            mixin(enumMixinStr_CO_NOFREE);
        }
    }
    
    #ifdef CO_GENERATOR
    
    #endif
    static if(!is(typeof(CO_GENERATOR))) {
        private enum enumMixinStr_CO_GENERATOR = `enum CO_GENERATOR = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_GENERATOR); }))) {
            mixin(enumMixinStr_CO_GENERATOR);
        }
    }
    
    #ifdef CO_NESTED
    
    #endif
    static if(!is(typeof(CO_NESTED))) {
        private enum enumMixinStr_CO_NESTED = `enum CO_NESTED = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_NESTED); }))) {
            mixin(enumMixinStr_CO_NESTED);
        }
    }
    
    #ifdef CO_VARKEYWORDS
    
    #endif
    static if(!is(typeof(CO_VARKEYWORDS))) {
        private enum enumMixinStr_CO_VARKEYWORDS = `enum CO_VARKEYWORDS = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_VARKEYWORDS); }))) {
            mixin(enumMixinStr_CO_VARKEYWORDS);
        }
    }
    
    #ifdef CO_VARARGS
    
    #endif
    static if(!is(typeof(CO_VARARGS))) {
        private enum enumMixinStr_CO_VARARGS = `enum CO_VARARGS = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_VARARGS); }))) {
            mixin(enumMixinStr_CO_VARARGS);
        }
    }
    
    #ifdef CO_NEWLOCALS
    
    #endif
    static if(!is(typeof(CO_NEWLOCALS))) {
        private enum enumMixinStr_CO_NEWLOCALS = `enum CO_NEWLOCALS = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_NEWLOCALS); }))) {
            mixin(enumMixinStr_CO_NEWLOCALS);
        }
    }
    
    #ifdef Py_single_input
    
    #endif
    static if(!is(typeof(Py_single_input))) {
        private enum enumMixinStr_Py_single_input = `enum Py_single_input = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_single_input); }))) {
            mixin(enumMixinStr_Py_single_input);
        }
    }
    
    #ifdef Py_file_input
    
    #endif
    static if(!is(typeof(Py_file_input))) {
        private enum enumMixinStr_Py_file_input = `enum Py_file_input = 257;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_file_input); }))) {
            mixin(enumMixinStr_Py_file_input);
        }
    }
    
    #ifdef Py_eval_input
    
    #endif
    static if(!is(typeof(Py_eval_input))) {
        private enum enumMixinStr_Py_eval_input = `enum Py_eval_input = 258;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_eval_input); }))) {
            mixin(enumMixinStr_Py_eval_input);
        }
    }
    
    #ifdef Py_func_type_input
    
    #endif
    static if(!is(typeof(Py_func_type_input))) {
        private enum enumMixinStr_Py_func_type_input = `enum Py_func_type_input = 345;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_func_type_input); }))) {
            mixin(enumMixinStr_Py_func_type_input);
        }
    }
    
    #define Py_COMPLEXOBJECT_H 

    


    static if(!is(typeof(CO_OPTIMIZED))) {
        private enum enumMixinStr_CO_OPTIMIZED = `enum CO_OPTIMIZED = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_CO_OPTIMIZED); }))) {
            mixin(enumMixinStr_CO_OPTIMIZED);
        }
    }
    
    #define _Py_OPARG( word ) ( ( word ) >> 8 )

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(FVS_HAVE_SPEC))) {
        private enum enumMixinStr_FVS_HAVE_SPEC = `enum FVS_HAVE_SPEC = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_FVS_HAVE_SPEC); }))) {
            mixin(enumMixinStr_FVS_HAVE_SPEC);
        }
    }
    
    #ifdef FVS_MASK
    
    #endif
    static if(!is(typeof(FVS_MASK))) {
        private enum enumMixinStr_FVS_MASK = `enum FVS_MASK = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_FVS_MASK); }))) {
            mixin(enumMixinStr_FVS_MASK);
        }
    }
    
    #ifdef FVC_ASCII
    
    #endif
    static if(!is(typeof(FVC_ASCII))) {
        private enum enumMixinStr_FVC_ASCII = `enum FVC_ASCII = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_FVC_ASCII); }))) {
            mixin(enumMixinStr_FVC_ASCII);
        }
    }
    
    #ifdef FVC_REPR
    
    #endif
    static if(!is(typeof(FVC_REPR))) {
        private enum enumMixinStr_FVC_REPR = `enum FVC_REPR = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_FVC_REPR); }))) {
            mixin(enumMixinStr_FVC_REPR);
        }
    }
    
    #ifdef FVC_STR
    
    #endif
    static if(!is(typeof(FVC_STR))) {
        private enum enumMixinStr_FVC_STR = `enum FVC_STR = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_FVC_STR); }))) {
            mixin(enumMixinStr_FVC_STR);
        }
    }
    
    #ifdef FVC_NONE
    
    #endif
    static if(!is(typeof(FVC_NONE))) {
        private enum enumMixinStr_FVC_NONE = `enum FVC_NONE = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_FVC_NONE); }))) {
            mixin(enumMixinStr_FVC_NONE);
        }
    }
    
    #ifdef FVC_MASK
    
    #endif
    static if(!is(typeof(FVC_MASK))) {
        private enum enumMixinStr_FVC_MASK = `enum FVC_MASK = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_FVC_MASK); }))) {
            mixin(enumMixinStr_FVC_MASK);
        }
    }
    
    #ifdef Py_END_ALLOW_THREADS
    
    #endif
    static if(!is(typeof(Py_END_ALLOW_THREADS))) {
        private enum enumMixinStr_Py_END_ALLOW_THREADS = `enum Py_END_ALLOW_THREADS = PyEval_RestoreThread ( _save ) ; };`;
        static if(is(typeof({ mixin(enumMixinStr_Py_END_ALLOW_THREADS); }))) {
            mixin(enumMixinStr_Py_END_ALLOW_THREADS);
        }
    }
    
    #ifdef Py_UNBLOCK_THREADS
    
    #endif
    static if(!is(typeof(Py_UNBLOCK_THREADS))) {
        private enum enumMixinStr_Py_UNBLOCK_THREADS = `enum Py_UNBLOCK_THREADS = _save = PyEval_SaveThread ( ) ;;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_UNBLOCK_THREADS); }))) {
            mixin(enumMixinStr_Py_UNBLOCK_THREADS);
        }
    }
    
    #ifdef Py_BLOCK_THREADS
    
    #endif
    static if(!is(typeof(Py_BLOCK_THREADS))) {
        private enum enumMixinStr_Py_BLOCK_THREADS = `enum Py_BLOCK_THREADS = PyEval_RestoreThread ( _save ) ;;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_BLOCK_THREADS); }))) {
            mixin(enumMixinStr_Py_BLOCK_THREADS);
        }
    }
    
    #ifdef Py_BEGIN_ALLOW_THREADS
    
    #endif
    static if(!is(typeof(Py_BEGIN_ALLOW_THREADS))) {
        private enum enumMixinStr_Py_BEGIN_ALLOW_THREADS = `enum Py_BEGIN_ALLOW_THREADS = { PyThreadState * _save ; _save = PyEval_SaveThread ( ) ;;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_BEGIN_ALLOW_THREADS); }))) {
            mixin(enumMixinStr_Py_BEGIN_ALLOW_THREADS);
        }
    }
    
    #define PyComplex_Check( op ) PyObject_TypeCheck ( op , & PyComplex_Type )

    

    


    static if(!is(typeof(Py_END_ALLOW_RECURSION))) {
        private enum enumMixinStr_Py_END_ALLOW_RECURSION = `enum Py_END_ALLOW_RECURSION = PyThreadState_GET ( ) . recursion_critical = _old ; } while ( 0 ) ;;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_END_ALLOW_RECURSION); }))) {
            mixin(enumMixinStr_Py_END_ALLOW_RECURSION);
        }
    }
    
    #ifdef Py_ALLOW_RECURSION
    
    #endif
    static if(!is(typeof(Py_ALLOW_RECURSION))) {
        private enum enumMixinStr_Py_ALLOW_RECURSION = `enum Py_ALLOW_RECURSION = do { unsigned char _old = PyThreadState_GET ( ) . recursion_critical ; PyThreadState_GET ( ) . recursion_critical = 1 ;;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_ALLOW_RECURSION); }))) {
            mixin(enumMixinStr_Py_ALLOW_RECURSION);
        }
    }
    
    #define _Py_MakeEndRecCheck( x ) ( -- ( x ) < _Py_RecursionLimitLowerWaterMark ( _Py_CheckRecursionLimit ) )

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(F_ZERO))) {
        private enum enumMixinStr_F_ZERO = `enum F_ZERO = ( 1 << 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_F_ZERO); }))) {
            mixin(enumMixinStr_F_ZERO);
        }
    }
    
    #ifdef F_ALT
    
    #endif
    static if(!is(typeof(F_ALT))) {
        private enum enumMixinStr_F_ALT = `enum F_ALT = ( 1 << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_F_ALT); }))) {
            mixin(enumMixinStr_F_ALT);
        }
    }
    
    #ifdef F_BLANK
    
    #endif
    static if(!is(typeof(F_BLANK))) {
        private enum enumMixinStr_F_BLANK = `enum F_BLANK = ( 1 << 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_F_BLANK); }))) {
            mixin(enumMixinStr_F_BLANK);
        }
    }
    
    #ifdef F_SIGN
    
    #endif
    static if(!is(typeof(F_SIGN))) {
        private enum enumMixinStr_F_SIGN = `enum F_SIGN = ( 1 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_F_SIGN); }))) {
            mixin(enumMixinStr_F_SIGN);
        }
    }
    
    #ifdef F_LJUST
    
    #endif
    static if(!is(typeof(F_LJUST))) {
        private enum enumMixinStr_F_LJUST = `enum F_LJUST = ( 1 << 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_F_LJUST); }))) {
            mixin(enumMixinStr_F_LJUST);
        }
    }
    
    #define PyBytes_GET_SIZE( op ) ( assert ( PyBytes_Check ( op ) ) , Py_SIZE ( op ) )

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(Py_RETURN_FALSE))) {
        private enum enumMixinStr_Py_RETURN_FALSE = `enum Py_RETURN_FALSE = return Py_INCREF ( Py_False ) , Py_False;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_RETURN_FALSE); }))) {
            mixin(enumMixinStr_Py_RETURN_FALSE);
        }
    }
    
    #ifdef Py_RETURN_TRUE
    
    #endif
    static if(!is(typeof(Py_RETURN_TRUE))) {
        private enum enumMixinStr_Py_RETURN_TRUE = `enum Py_RETURN_TRUE = return Py_INCREF ( Py_True ) , Py_True;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_RETURN_TRUE); }))) {
            mixin(enumMixinStr_Py_RETURN_TRUE);
        }
    }
    
    #ifdef Py_True
    
    #endif
    static if(!is(typeof(Py_True))) {
        private enum enumMixinStr_Py_True = `enum Py_True = ( cast( PyObject * ) & _Py_TrueStruct );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_True); }))) {
            mixin(enumMixinStr_Py_True);
        }
    }
    
    #ifdef Py_False
    
    #endif
    static if(!is(typeof(Py_False))) {
        private enum enumMixinStr_Py_False = `enum Py_False = ( cast( PyObject * ) & _Py_FalseStruct );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_False); }))) {
            mixin(enumMixinStr_Py_False);
        }
    }
    
    #define PyBool_Check( x ) ( Py_TYPE ( x ) == & PyBool_Type )

    

    

    

    

    

    


    static if(!is(typeof(PyMapping_Length))) {
        private enum enumMixinStr_PyMapping_Length = `enum PyMapping_Length = PyMapping_Size;`;
        static if(is(typeof({ mixin(enumMixinStr_PyMapping_Length); }))) {
            mixin(enumMixinStr_PyMapping_Length);
        }
    }
    
    #ifdef PySequence_In
    
    #endif
    static if(!is(typeof(PySequence_In))) {
        private enum enumMixinStr_PySequence_In = `enum PySequence_In = PySequence_Contains;`;
        static if(is(typeof({ mixin(enumMixinStr_PySequence_In); }))) {
            mixin(enumMixinStr_PySequence_In);
        }
    }
    
    #define PySequence_Fast_ITEMS( sf ) ( PyList_Check ( sf ) ? ( cast( PyListObject * ) ( sf ) ) . ob_item : ( cast( PyTupleObject * ) ( sf ) ) . ob_item )

    

    

    


    static if(!is(typeof(PySequence_Length))) {
        private enum enumMixinStr_PySequence_Length = `enum PySequence_Length = PySequence_Size;`;
        static if(is(typeof({ mixin(enumMixinStr_PySequence_Length); }))) {
            mixin(enumMixinStr_PySequence_Length);
        }
    }
    
    #ifdef PyObject_Length
    
    #endif
    static if(!is(typeof(PyObject_Length))) {
        private enum enumMixinStr_PyObject_Length = `enum PyObject_Length = PyObject_Size;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_Length); }))) {
            mixin(enumMixinStr_PyObject_Length);
        }
    }
    
    #define PyObject_DelAttr( O , A ) PyObject_SetAttr ( ( O ) , ( A ) , null )

    

    

    

    

    

    


    static if(!is(typeof(_PY_FASTCALL_SMALL_STACK))) {
        private enum enumMixinStr__PY_FASTCALL_SMALL_STACK = `enum _PY_FASTCALL_SMALL_STACK = 5;`;
        static if(is(typeof({ mixin(enumMixinStr__PY_FASTCALL_SMALL_STACK); }))) {
            mixin(enumMixinStr__PY_FASTCALL_SMALL_STACK);
        }
    }
    
    #ifdef NULL
    
    #endif
    static if(!is(typeof(NULL))) {
        private enum enumMixinStr_NULL = `enum NULL = ( cast( void * ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_NULL); }))) {
            mixin(enumMixinStr_NULL);
        }
    }
    
    #define _PTRDIFF_T 

    

    

    


    static if(!is(typeof(PY_VECTORCALL_ARGUMENTS_OFFSET))) {
        private enum enumMixinStr_PY_VECTORCALL_ARGUMENTS_OFFSET = `enum PY_VECTORCALL_ARGUMENTS_OFFSET = ( cast( size_t ) 1 << ( 8 * ( size_t ) .sizeof - 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_VECTORCALL_ARGUMENTS_OFFSET); }))) {
            mixin(enumMixinStr_PY_VECTORCALL_ARGUMENTS_OFFSET);
        }
    }
    
    #define __need_wchar_t 

    

    

    

    


    static if(!is(typeof(__GNUC_VA_LIST))) {
        private enum enumMixinStr___GNUC_VA_LIST = `enum __GNUC_VA_LIST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___GNUC_VA_LIST); }))) {
            mixin(enumMixinStr___GNUC_VA_LIST);
        }
    }
    
    #define va_copy( dest , src ) __builtin_va_copy ( dest , src )

    

    

    

    

    

    

    


    static if(!is(typeof(ULONG_LONG_MAX))) {
        private enum enumMixinStr_ULONG_LONG_MAX = `enum ULONG_LONG_MAX = ( 9223372036854775807LL * 2ULL + 1ULL );`;
        static if(is(typeof({ mixin(enumMixinStr_ULONG_LONG_MAX); }))) {
            mixin(enumMixinStr_ULONG_LONG_MAX);
        }
    }
    
    #ifdef LONG_LONG_MIN
    
    #endif
    static if(!is(typeof(LONG_LONG_MIN))) {
        private enum enumMixinStr_LONG_LONG_MIN = `enum LONG_LONG_MIN = ( - 9223372036854775807LL - 1LL );`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_LONG_MIN); }))) {
            mixin(enumMixinStr_LONG_LONG_MIN);
        }
    }
    
    #ifdef LONG_LONG_MAX
    
    #endif
    static if(!is(typeof(LONG_LONG_MAX))) {
        private enum enumMixinStr_LONG_LONG_MAX = `enum LONG_LONG_MAX = 9223372036854775807LL;`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_LONG_MAX); }))) {
            mixin(enumMixinStr_LONG_LONG_MAX);
        }
    }
    
    #ifdef ULLONG_MAX
    
    #endif
    static if(!is(typeof(ULLONG_MAX))) {
        private enum enumMixinStr_ULLONG_MAX = `enum ULLONG_MAX = ( 9223372036854775807LL * 2ULL + 1ULL );`;
        static if(is(typeof({ mixin(enumMixinStr_ULLONG_MAX); }))) {
            mixin(enumMixinStr_ULLONG_MAX);
        }
    }
    
    #ifdef LLONG_MIN
    
    #endif
    static if(!is(typeof(LLONG_MIN))) {
        private enum enumMixinStr_LLONG_MIN = `enum LLONG_MIN = ( - 9223372036854775807LL - 1LL );`;
        static if(is(typeof({ mixin(enumMixinStr_LLONG_MIN); }))) {
            mixin(enumMixinStr_LLONG_MIN);
        }
    }
    
    #ifdef LLONG_MAX
    
    #endif
    static if(!is(typeof(LLONG_MAX))) {
        private enum enumMixinStr_LLONG_MAX = `enum LLONG_MAX = 9223372036854775807LL;`;
        static if(is(typeof({ mixin(enumMixinStr_LLONG_MAX); }))) {
            mixin(enumMixinStr_LLONG_MAX);
        }
    }
    
    #ifdef CHAR_MAX
    
    #endif
    static if(!is(typeof(CHAR_MAX))) {
        private enum enumMixinStr_CHAR_MAX = `enum CHAR_MAX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_MAX); }))) {
            mixin(enumMixinStr_CHAR_MAX);
        }
    }
    
    #ifdef CHAR_MIN
    
    #endif
    static if(!is(typeof(CHAR_MIN))) {
        private enum enumMixinStr_CHAR_MIN = `enum CHAR_MIN = SCHAR_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_MIN); }))) {
            mixin(enumMixinStr_CHAR_MIN);
        }
    }
    
    #ifdef CHAR_BIT
    
    #endif
    static if(!is(typeof(CHAR_BIT))) {
        private enum enumMixinStr_CHAR_BIT = `enum CHAR_BIT = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_BIT); }))) {
            mixin(enumMixinStr_CHAR_BIT);
        }
    }
    
    #ifdef ULONG_MAX
    
    #endif
    static if(!is(typeof(ULONG_MAX))) {
        private enum enumMixinStr_ULONG_MAX = `enum ULONG_MAX = ( 9223372036854775807L * 2UL + 1UL );`;
        static if(is(typeof({ mixin(enumMixinStr_ULONG_MAX); }))) {
            mixin(enumMixinStr_ULONG_MAX);
        }
    }
    
    #ifdef UINT_MAX
    
    #endif
    static if(!is(typeof(UINT_MAX))) {
        private enum enumMixinStr_UINT_MAX = `enum UINT_MAX = ( 2147483647 * 2U + 1U );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_MAX); }))) {
            mixin(enumMixinStr_UINT_MAX);
        }
    }
    
    #ifdef USHRT_MAX
    
    #endif
    static if(!is(typeof(USHRT_MAX))) {
        private enum enumMixinStr_USHRT_MAX = `enum USHRT_MAX = ( 32767 * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_USHRT_MAX); }))) {
            mixin(enumMixinStr_USHRT_MAX);
        }
    }
    
    #ifdef UCHAR_MAX
    
    #endif
    static if(!is(typeof(UCHAR_MAX))) {
        private enum enumMixinStr_UCHAR_MAX = `enum UCHAR_MAX = ( 127 * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_UCHAR_MAX); }))) {
            mixin(enumMixinStr_UCHAR_MAX);
        }
    }
    
    #ifdef LONG_MIN
    
    #endif
    static if(!is(typeof(LONG_MIN))) {
        private enum enumMixinStr_LONG_MIN = `enum LONG_MIN = ( - 9223372036854775807L - 1L );`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_MIN); }))) {
            mixin(enumMixinStr_LONG_MIN);
        }
    }
    
    #ifdef INT_MIN
    
    #endif
    static if(!is(typeof(INT_MIN))) {
        private enum enumMixinStr_INT_MIN = `enum INT_MIN = ( - 2147483647 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_MIN); }))) {
            mixin(enumMixinStr_INT_MIN);
        }
    }
    
    #ifdef SHRT_MIN
    
    #endif
    static if(!is(typeof(SHRT_MIN))) {
        private enum enumMixinStr_SHRT_MIN = `enum SHRT_MIN = ( - 32767 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHRT_MIN); }))) {
            mixin(enumMixinStr_SHRT_MIN);
        }
    }
    
    #ifdef SCHAR_MIN
    
    #endif
    static if(!is(typeof(SCHAR_MIN))) {
        private enum enumMixinStr_SCHAR_MIN = `enum SCHAR_MIN = ( - 127 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SCHAR_MIN); }))) {
            mixin(enumMixinStr_SCHAR_MIN);
        }
    }
    
    #ifdef LONG_MAX
    
    #endif
    static if(!is(typeof(LONG_MAX))) {
        private enum enumMixinStr_LONG_MAX = `enum LONG_MAX = 9223372036854775807L;`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_MAX); }))) {
            mixin(enumMixinStr_LONG_MAX);
        }
    }
    
    #ifdef INT_MAX
    
    #endif
    static if(!is(typeof(INT_MAX))) {
        private enum enumMixinStr_INT_MAX = `enum INT_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_MAX); }))) {
            mixin(enumMixinStr_INT_MAX);
        }
    }
    
    #ifdef SHRT_MAX
    
    #endif
    static if(!is(typeof(SHRT_MAX))) {
        private enum enumMixinStr_SHRT_MAX = `enum SHRT_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr_SHRT_MAX); }))) {
            mixin(enumMixinStr_SHRT_MAX);
        }
    }
    
    #ifdef SCHAR_MAX
    
    #endif
    static if(!is(typeof(SCHAR_MAX))) {
        private enum enumMixinStr_SCHAR_MAX = `enum SCHAR_MAX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHAR_MAX); }))) {
            mixin(enumMixinStr_SCHAR_MAX);
        }
    }
    
    #define __CLANG_LIMITS_H 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(_LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT))) {
        private enum enumMixinStr__LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT = `enum _LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT); }))) {
            mixin(enumMixinStr__LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT);
        }
    }
    
    #define _LIBCPP_HIDE_FROM_ABI_PER_TU_BY_DEFAULT 

    

    


    static if(!is(typeof(__DARWIN_WCTYPE_TOP_inline))) {
        private enum enumMixinStr___DARWIN_WCTYPE_TOP_inline = `enum __DARWIN_WCTYPE_TOP_inline = __header_inline;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_WCTYPE_TOP_inline); }))) {
            mixin(enumMixinStr___DARWIN_WCTYPE_TOP_inline);
        }
    }
    
    #define _WCTYPE_H_ 

    

    


    static if(!is(typeof(SYNC_VOLUME_WAIT))) {
        private enum enumMixinStr_SYNC_VOLUME_WAIT = `enum SYNC_VOLUME_WAIT = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_SYNC_VOLUME_WAIT); }))) {
            mixin(enumMixinStr_SYNC_VOLUME_WAIT);
        }
    }
    
    #ifdef SYNC_VOLUME_FULLSYNC
    
    #endif
    static if(!is(typeof(SYNC_VOLUME_FULLSYNC))) {
        private enum enumMixinStr_SYNC_VOLUME_FULLSYNC = `enum SYNC_VOLUME_FULLSYNC = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_SYNC_VOLUME_FULLSYNC); }))) {
            mixin(enumMixinStr_SYNC_VOLUME_FULLSYNC);
        }
    }
    
    #ifdef F_TEST
    
    #endif
    static if(!is(typeof(F_TEST))) {
        private enum enumMixinStr_F_TEST = `enum F_TEST = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_F_TEST); }))) {
            mixin(enumMixinStr_F_TEST);
        }
    }
    
    #define PyIter_Check( obj ) ( ( obj ) . ob_type . tp_iternext != null && ( obj ) . ob_type . tp_iternext != & _PyObject_NextNotImplemented )

    

    

    


    static if(!is(typeof(PY_ITERSEARCH_COUNT))) {
        private enum enumMixinStr_PY_ITERSEARCH_COUNT = `enum PY_ITERSEARCH_COUNT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_ITERSEARCH_COUNT); }))) {
            mixin(enumMixinStr_PY_ITERSEARCH_COUNT);
        }
    }
    
    #ifdef PY_ITERSEARCH_INDEX
    
    #endif
    static if(!is(typeof(PY_ITERSEARCH_INDEX))) {
        private enum enumMixinStr_PY_ITERSEARCH_INDEX = `enum PY_ITERSEARCH_INDEX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_ITERSEARCH_INDEX); }))) {
            mixin(enumMixinStr_PY_ITERSEARCH_INDEX);
        }
    }
    
    #ifdef PY_ITERSEARCH_CONTAINS
    
    #endif
    static if(!is(typeof(PY_ITERSEARCH_CONTAINS))) {
        private enum enumMixinStr_PY_ITERSEARCH_CONTAINS = `enum PY_ITERSEARCH_CONTAINS = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_ITERSEARCH_CONTAINS); }))) {
            mixin(enumMixinStr_PY_ITERSEARCH_CONTAINS);
        }
    }
    
    #ifdef F_TLOCK
    
    #endif
    static if(!is(typeof(F_TLOCK))) {
        private enum enumMixinStr_F_TLOCK = `enum F_TLOCK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_F_TLOCK); }))) {
            mixin(enumMixinStr_F_TLOCK);
        }
    }
    
    #ifdef F_LOCK
    
    #endif
    static if(!is(typeof(F_LOCK))) {
        private enum enumMixinStr_F_LOCK = `enum F_LOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_F_LOCK); }))) {
            mixin(enumMixinStr_F_LOCK);
        }
    }
    
    #ifdef F_ULOCK
    
    #endif
    static if(!is(typeof(F_ULOCK))) {
        private enum enumMixinStr_F_ULOCK = `enum F_ULOCK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_F_ULOCK); }))) {
            mixin(enumMixinStr_F_ULOCK);
        }
    }
    
    #ifdef _CS_DARWIN_USER_CACHE_DIR
    
    #endif
    static if(!is(typeof(_CS_DARWIN_USER_CACHE_DIR))) {
        private enum enumMixinStr__CS_DARWIN_USER_CACHE_DIR = `enum _CS_DARWIN_USER_CACHE_DIR = 65538;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_DARWIN_USER_CACHE_DIR); }))) {
            mixin(enumMixinStr__CS_DARWIN_USER_CACHE_DIR);
        }
    }
    
    #ifdef _CS_DARWIN_USER_TEMP_DIR
    
    #endif
    static if(!is(typeof(_CS_DARWIN_USER_TEMP_DIR))) {
        private enum enumMixinStr__CS_DARWIN_USER_TEMP_DIR = `enum _CS_DARWIN_USER_TEMP_DIR = 65537;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_DARWIN_USER_TEMP_DIR); }))) {
            mixin(enumMixinStr__CS_DARWIN_USER_TEMP_DIR);
        }
    }
    
    #ifdef _CS_DARWIN_USER_DIR
    
    #endif
    static if(!is(typeof(_CS_DARWIN_USER_DIR))) {
        private enum enumMixinStr__CS_DARWIN_USER_DIR = `enum _CS_DARWIN_USER_DIR = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_DARWIN_USER_DIR); }))) {
            mixin(enumMixinStr__CS_DARWIN_USER_DIR);
        }
    }
    
    #ifdef _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = `enum _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LINTFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_LPBIG_OFFBIG_LIBS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LIBS = `enum _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LIBS);
        }
    }
    
    #ifdef _CS_XBS5_LPBIG_OFFBIG_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LDFLAGS = `enum _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LDFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_LPBIG_OFFBIG_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_CFLAGS = `enum _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_CFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_LP64_OFF64_LINTFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LP64_OFF64_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_LINTFLAGS = `enum _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LINTFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_LP64_OFF64_LIBS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LP64_OFF64_LIBS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_LIBS = `enum _CS_XBS5_LP64_OFF64_LIBS = 30;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LIBS);
        }
    }
    
    #ifdef _CS_XBS5_LP64_OFF64_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LP64_OFF64_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_LDFLAGS = `enum _CS_XBS5_LP64_OFF64_LDFLAGS = 29;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LDFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_LP64_OFF64_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_LP64_OFF64_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_CFLAGS = `enum _CS_XBS5_LP64_OFF64_CFLAGS = 28;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_CFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFFBIG_LINTFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_LINTFLAGS = `enum _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LINTFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFFBIG_LIBS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_LIBS = `enum _CS_XBS5_ILP32_OFFBIG_LIBS = 26;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LIBS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFFBIG_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_LDFLAGS = `enum _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LDFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFFBIG_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_CFLAGS = `enum _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_CFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFF32_LINTFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_LINTFLAGS = `enum _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LINTFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFF32_LIBS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_LIBS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_LIBS = `enum _CS_XBS5_ILP32_OFF32_LIBS = 22;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LIBS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFF32_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_LDFLAGS = `enum _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LDFLAGS);
        }
    }
    
    #ifdef _CS_XBS5_ILP32_OFF32_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_CFLAGS = `enum _CS_XBS5_ILP32_OFF32_CFLAGS = 20;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_CFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = `enum _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_WIDTH_RESTRICTED_ENVS);
        }
    }
    
    #ifdef _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LIBS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LIBS);
        }
    }
    
    #ifdef _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_LP64_OFF64_LIBS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_LIBS = `enum _CS_POSIX_V6_LP64_OFF64_LIBS = 10;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LIBS);
        }
    }
    
    #ifdef _CS_POSIX_V6_LP64_OFF64_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_LDFLAGS = `enum _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LDFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_LP64_OFF64_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_CFLAGS = `enum _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_CFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_ILP32_OFFBIG_LIBS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LIBS = `enum _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LIBS);
        }
    }
    
    #ifdef _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = `enum _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = `enum _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_CFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_ILP32_OFF32_LIBS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LIBS = `enum _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LIBS);
        }
    }
    
    #ifdef _CS_POSIX_V6_ILP32_OFF32_LDFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LDFLAGS = `enum _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LDFLAGS);
        }
    }
    
    #ifdef _CS_POSIX_V6_ILP32_OFF32_CFLAGS
    
    #endif
    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_CFLAGS = `enum _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_CFLAGS);
        }
    }
    
    #ifdef _SC_PHYS_PAGES
    
    #endif
    static if(!is(typeof(_SC_PHYS_PAGES))) {
        private enum enumMixinStr__SC_PHYS_PAGES = `enum _SC_PHYS_PAGES = 200;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PHYS_PAGES); }))) {
            mixin(enumMixinStr__SC_PHYS_PAGES);
        }
    }
    
    #ifdef _SC_PASS_MAX
    
    #endif
    static if(!is(typeof(_SC_PASS_MAX))) {
        private enum enumMixinStr__SC_PASS_MAX = `enum _SC_PASS_MAX = 131;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PASS_MAX); }))) {
            mixin(enumMixinStr__SC_PASS_MAX);
        }
    }
    
    #ifdef _SC_TRACE_USER_EVENT_MAX
    
    #endif
    static if(!is(typeof(_SC_TRACE_USER_EVENT_MAX))) {
        private enum enumMixinStr__SC_TRACE_USER_EVENT_MAX = `enum _SC_TRACE_USER_EVENT_MAX = 130;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_USER_EVENT_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_USER_EVENT_MAX);
        }
    }
    
    #ifdef _SC_TRACE_SYS_MAX
    
    #endif
    static if(!is(typeof(_SC_TRACE_SYS_MAX))) {
        private enum enumMixinStr__SC_TRACE_SYS_MAX = `enum _SC_TRACE_SYS_MAX = 129;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_SYS_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_SYS_MAX);
        }
    }
    
    #ifdef _SC_TRACE_NAME_MAX
    
    #endif
    static if(!is(typeof(_SC_TRACE_NAME_MAX))) {
        private enum enumMixinStr__SC_TRACE_NAME_MAX = `enum _SC_TRACE_NAME_MAX = 128;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_NAME_MAX);
        }
    }
    
    #define PyDict_GET_SIZE( mp ) ( assert ( PyDict_Check ( mp ) ) , ( cast( PyDictObject * ) mp ) . ma_used )

    


    static if(!is(typeof(_SC_TRACE_EVENT_NAME_MAX))) {
        private enum enumMixinStr__SC_TRACE_EVENT_NAME_MAX = `enum _SC_TRACE_EVENT_NAME_MAX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_EVENT_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_EVENT_NAME_MAX);
        }
    }
    
    #ifdef _SC_SS_REPL_MAX
    
    #endif
    static if(!is(typeof(_SC_SS_REPL_MAX))) {
        private enum enumMixinStr__SC_SS_REPL_MAX = `enum _SC_SS_REPL_MAX = 126;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SS_REPL_MAX); }))) {
            mixin(enumMixinStr__SC_SS_REPL_MAX);
        }
    }
    
    #ifdef _SC_XBS5_LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(_SC_XBS5_LPBIG_OFFBIG))) {
        private enum enumMixinStr__SC_XBS5_LPBIG_OFFBIG = `enum _SC_XBS5_LPBIG_OFFBIG = 125;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__SC_XBS5_LPBIG_OFFBIG);
        }
    }
    
    #ifdef _SC_XBS5_LP64_OFF64
    
    #endif
    static if(!is(typeof(_SC_XBS5_LP64_OFF64))) {
        private enum enumMixinStr__SC_XBS5_LP64_OFF64 = `enum _SC_XBS5_LP64_OFF64 = 124;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_LP64_OFF64); }))) {
            mixin(enumMixinStr__SC_XBS5_LP64_OFF64);
        }
    }
    
    #ifdef _SC_XBS5_ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(_SC_XBS5_ILP32_OFFBIG))) {
        private enum enumMixinStr__SC_XBS5_ILP32_OFFBIG = `enum _SC_XBS5_ILP32_OFFBIG = 123;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__SC_XBS5_ILP32_OFFBIG);
        }
    }
    
    #ifdef _SC_XBS5_ILP32_OFF32
    
    #endif
    static if(!is(typeof(_SC_XBS5_ILP32_OFF32))) {
        private enum enumMixinStr__SC_XBS5_ILP32_OFF32 = `enum _SC_XBS5_ILP32_OFF32 = 122;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_ILP32_OFF32); }))) {
            mixin(enumMixinStr__SC_XBS5_ILP32_OFF32);
        }
    }
    
    #ifdef _SC_XOPEN_XCU_VERSION
    
    #endif
    static if(!is(typeof(_SC_XOPEN_XCU_VERSION))) {
        private enum enumMixinStr__SC_XOPEN_XCU_VERSION = `enum _SC_XOPEN_XCU_VERSION = 121;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_XCU_VERSION); }))) {
            mixin(enumMixinStr__SC_XOPEN_XCU_VERSION);
        }
    }
    
    #ifdef _SC_XOPEN_VERSION
    
    #endif
    static if(!is(typeof(_SC_XOPEN_VERSION))) {
        private enum enumMixinStr__SC_XOPEN_VERSION = `enum _SC_XOPEN_VERSION = 116;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_VERSION); }))) {
            mixin(enumMixinStr__SC_XOPEN_VERSION);
        }
    }
    
    #ifdef _SC_XOPEN_UNIX
    
    #endif
    static if(!is(typeof(_SC_XOPEN_UNIX))) {
        private enum enumMixinStr__SC_XOPEN_UNIX = `enum _SC_XOPEN_UNIX = 115;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_UNIX); }))) {
            mixin(enumMixinStr__SC_XOPEN_UNIX);
        }
    }
    
    #ifdef _SC_XOPEN_STREAMS
    
    #endif
    static if(!is(typeof(_SC_XOPEN_STREAMS))) {
        private enum enumMixinStr__SC_XOPEN_STREAMS = `enum _SC_XOPEN_STREAMS = 114;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_STREAMS); }))) {
            mixin(enumMixinStr__SC_XOPEN_STREAMS);
        }
    }
    
    #ifdef _SC_XOPEN_SHM
    
    #endif
    static if(!is(typeof(_SC_XOPEN_SHM))) {
        private enum enumMixinStr__SC_XOPEN_SHM = `enum _SC_XOPEN_SHM = 113;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_SHM); }))) {
            mixin(enumMixinStr__SC_XOPEN_SHM);
        }
    }
    
    #ifdef _SC_XOPEN_REALTIME_THREADS
    
    #endif
    static if(!is(typeof(_SC_XOPEN_REALTIME_THREADS))) {
        private enum enumMixinStr__SC_XOPEN_REALTIME_THREADS = `enum _SC_XOPEN_REALTIME_THREADS = 112;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_REALTIME_THREADS); }))) {
            mixin(enumMixinStr__SC_XOPEN_REALTIME_THREADS);
        }
    }
    
    #ifdef _SC_XOPEN_REALTIME
    
    #endif
    static if(!is(typeof(_SC_XOPEN_REALTIME))) {
        private enum enumMixinStr__SC_XOPEN_REALTIME = `enum _SC_XOPEN_REALTIME = 111;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_REALTIME); }))) {
            mixin(enumMixinStr__SC_XOPEN_REALTIME);
        }
    }
    
    #ifdef _SC_XOPEN_LEGACY
    
    #endif
    static if(!is(typeof(_SC_XOPEN_LEGACY))) {
        private enum enumMixinStr__SC_XOPEN_LEGACY = `enum _SC_XOPEN_LEGACY = 110;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_LEGACY); }))) {
            mixin(enumMixinStr__SC_XOPEN_LEGACY);
        }
    }
    
    #ifdef _SC_XOPEN_ENH_I18N
    
    #endif
    static if(!is(typeof(_SC_XOPEN_ENH_I18N))) {
        private enum enumMixinStr__SC_XOPEN_ENH_I18N = `enum _SC_XOPEN_ENH_I18N = 109;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_ENH_I18N); }))) {
            mixin(enumMixinStr__SC_XOPEN_ENH_I18N);
        }
    }
    
    #define _PyDict_HasSplitTable( d ) ( ( d ) . ma_values != null )

    


    static if(!is(typeof(_SC_XOPEN_CRYPT))) {
        private enum enumMixinStr__SC_XOPEN_CRYPT = `enum _SC_XOPEN_CRYPT = 108;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_CRYPT); }))) {
            mixin(enumMixinStr__SC_XOPEN_CRYPT);
        }
    }
    
    #ifdef _SC_PAGE_SIZE
    
    #endif
    static if(!is(typeof(_SC_PAGE_SIZE))) {
        private enum enumMixinStr__SC_PAGE_SIZE = `enum _SC_PAGE_SIZE = _SC_PAGESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PAGE_SIZE); }))) {
            mixin(enumMixinStr__SC_PAGE_SIZE);
        }
    }
    
    #ifdef _SC_IOV_MAX
    
    #endif
    static if(!is(typeof(_SC_IOV_MAX))) {
        private enum enumMixinStr__SC_IOV_MAX = `enum _SC_IOV_MAX = 56;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_IOV_MAX); }))) {
            mixin(enumMixinStr__SC_IOV_MAX);
        }
    }
    
    #ifdef _SC_ATEXIT_MAX
    
    #endif
    static if(!is(typeof(_SC_ATEXIT_MAX))) {
        private enum enumMixinStr__SC_ATEXIT_MAX = `enum _SC_ATEXIT_MAX = 107;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ATEXIT_MAX); }))) {
            mixin(enumMixinStr__SC_ATEXIT_MAX);
        }
    }
    
    #ifdef _SC_SYMLOOP_MAX
    
    #endif
    static if(!is(typeof(_SC_SYMLOOP_MAX))) {
        private enum enumMixinStr__SC_SYMLOOP_MAX = `enum _SC_SYMLOOP_MAX = 120;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SYMLOOP_MAX); }))) {
            mixin(enumMixinStr__SC_SYMLOOP_MAX);
        }
    }
    
    #ifdef _SC_RAW_SOCKETS
    
    #endif
    static if(!is(typeof(_SC_RAW_SOCKETS))) {
        private enum enumMixinStr__SC_RAW_SOCKETS = `enum _SC_RAW_SOCKETS = 119;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_RAW_SOCKETS); }))) {
            mixin(enumMixinStr__SC_RAW_SOCKETS);
        }
    }
    
    #ifdef _SC_IPV6
    
    #endif
    static if(!is(typeof(_SC_IPV6))) {
        private enum enumMixinStr__SC_IPV6 = `enum _SC_IPV6 = 118;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_IPV6); }))) {
            mixin(enumMixinStr__SC_IPV6);
        }
    }
    
    #ifdef _SC_V6_LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(_SC_V6_LPBIG_OFFBIG))) {
        private enum enumMixinStr__SC_V6_LPBIG_OFFBIG = `enum _SC_V6_LPBIG_OFFBIG = 106;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__SC_V6_LPBIG_OFFBIG);
        }
    }
    
    #ifdef _SC_V6_LP64_OFF64
    
    #endif
    static if(!is(typeof(_SC_V6_LP64_OFF64))) {
        private enum enumMixinStr__SC_V6_LP64_OFF64 = `enum _SC_V6_LP64_OFF64 = 105;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_LP64_OFF64); }))) {
            mixin(enumMixinStr__SC_V6_LP64_OFF64);
        }
    }
    
    #ifdef _SC_V6_ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(_SC_V6_ILP32_OFFBIG))) {
        private enum enumMixinStr__SC_V6_ILP32_OFFBIG = `enum _SC_V6_ILP32_OFFBIG = 104;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__SC_V6_ILP32_OFFBIG);
        }
    }
    
    #ifdef _SC_V6_ILP32_OFF32
    
    #endif
    static if(!is(typeof(_SC_V6_ILP32_OFF32))) {
        private enum enumMixinStr__SC_V6_ILP32_OFF32 = `enum _SC_V6_ILP32_OFF32 = 103;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_ILP32_OFF32); }))) {
            mixin(enumMixinStr__SC_V6_ILP32_OFF32);
        }
    }
    
    #ifdef _SC_TYPED_MEMORY_OBJECTS
    
    #endif
    static if(!is(typeof(_SC_TYPED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__SC_TYPED_MEMORY_OBJECTS = `enum _SC_TYPED_MEMORY_OBJECTS = 102;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TYPED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__SC_TYPED_MEMORY_OBJECTS);
        }
    }
    
    #ifdef _SC_TTY_NAME_MAX
    
    #endif
    static if(!is(typeof(_SC_TTY_NAME_MAX))) {
        private enum enumMixinStr__SC_TTY_NAME_MAX = `enum _SC_TTY_NAME_MAX = 101;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_TTY_NAME_MAX);
        }
    }
    
    #ifdef _SC_TRACE_LOG
    
    #endif
    static if(!is(typeof(_SC_TRACE_LOG))) {
        private enum enumMixinStr__SC_TRACE_LOG = `enum _SC_TRACE_LOG = 100;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_LOG); }))) {
            mixin(enumMixinStr__SC_TRACE_LOG);
        }
    }
    
    #ifdef _SC_TRACE_INHERIT
    
    #endif
    static if(!is(typeof(_SC_TRACE_INHERIT))) {
        private enum enumMixinStr__SC_TRACE_INHERIT = `enum _SC_TRACE_INHERIT = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_INHERIT); }))) {
            mixin(enumMixinStr__SC_TRACE_INHERIT);
        }
    }
    
    #ifdef _SC_TRACE_EVENT_FILTER
    
    #endif
    static if(!is(typeof(_SC_TRACE_EVENT_FILTER))) {
        private enum enumMixinStr__SC_TRACE_EVENT_FILTER = `enum _SC_TRACE_EVENT_FILTER = 98;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_EVENT_FILTER); }))) {
            mixin(enumMixinStr__SC_TRACE_EVENT_FILTER);
        }
    }
    
    #ifdef _SC_TRACE
    
    #endif
    static if(!is(typeof(_SC_TRACE))) {
        private enum enumMixinStr__SC_TRACE = `enum _SC_TRACE = 97;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE); }))) {
            mixin(enumMixinStr__SC_TRACE);
        }
    }
    
    #ifdef _SC_THREADS
    
    #endif
    static if(!is(typeof(_SC_THREADS))) {
        private enum enumMixinStr__SC_THREADS = `enum _SC_THREADS = 96;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREADS); }))) {
            mixin(enumMixinStr__SC_THREADS);
        }
    }
    
    #ifdef _SC_TIMEOUTS
    
    #endif
    static if(!is(typeof(_SC_TIMEOUTS))) {
        private enum enumMixinStr__SC_TIMEOUTS = `enum _SC_TIMEOUTS = 95;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TIMEOUTS); }))) {
            mixin(enumMixinStr__SC_TIMEOUTS);
        }
    }
    
    #ifdef _SC_THREAD_THREADS_MAX
    
    #endif
    static if(!is(typeof(_SC_THREAD_THREADS_MAX))) {
        private enum enumMixinStr__SC_THREAD_THREADS_MAX = `enum _SC_THREAD_THREADS_MAX = 94;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_THREADS_MAX); }))) {
            mixin(enumMixinStr__SC_THREAD_THREADS_MAX);
        }
    }
    
    #ifdef _SC_THREAD_STACK_MIN
    
    #endif
    static if(!is(typeof(_SC_THREAD_STACK_MIN))) {
        private enum enumMixinStr__SC_THREAD_STACK_MIN = `enum _SC_THREAD_STACK_MIN = 93;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_STACK_MIN); }))) {
            mixin(enumMixinStr__SC_THREAD_STACK_MIN);
        }
    }
    
    #ifdef _SC_THREAD_SPORADIC_SERVER
    
    #endif
    static if(!is(typeof(_SC_THREAD_SPORADIC_SERVER))) {
        private enum enumMixinStr__SC_THREAD_SPORADIC_SERVER = `enum _SC_THREAD_SPORADIC_SERVER = 92;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__SC_THREAD_SPORADIC_SERVER);
        }
    }
    
    #ifdef _SC_THREAD_SAFE_FUNCTIONS
    
    #endif
    static if(!is(typeof(_SC_THREAD_SAFE_FUNCTIONS))) {
        private enum enumMixinStr__SC_THREAD_SAFE_FUNCTIONS = `enum _SC_THREAD_SAFE_FUNCTIONS = 91;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_SAFE_FUNCTIONS); }))) {
            mixin(enumMixinStr__SC_THREAD_SAFE_FUNCTIONS);
        }
    }
    
    #ifdef _SC_THREAD_PROCESS_SHARED
    
    #endif
    static if(!is(typeof(_SC_THREAD_PROCESS_SHARED))) {
        private enum enumMixinStr__SC_THREAD_PROCESS_SHARED = `enum _SC_THREAD_PROCESS_SHARED = 90;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr__SC_THREAD_PROCESS_SHARED);
        }
    }
    
    #ifdef _SC_THREAD_PRIORITY_SCHEDULING
    
    #endif
    static if(!is(typeof(_SC_THREAD_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__SC_THREAD_PRIORITY_SCHEDULING = `enum _SC_THREAD_PRIORITY_SCHEDULING = 89;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__SC_THREAD_PRIORITY_SCHEDULING);
        }
    }
    
    #ifdef _SC_THREAD_PRIO_PROTECT
    
    #endif
    static if(!is(typeof(_SC_THREAD_PRIO_PROTECT))) {
        private enum enumMixinStr__SC_THREAD_PRIO_PROTECT = `enum _SC_THREAD_PRIO_PROTECT = 88;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PRIO_PROTECT); }))) {
            mixin(enumMixinStr__SC_THREAD_PRIO_PROTECT);
        }
    }
    
    #ifdef _SC_THREAD_PRIO_INHERIT
    
    #endif
    static if(!is(typeof(_SC_THREAD_PRIO_INHERIT))) {
        private enum enumMixinStr__SC_THREAD_PRIO_INHERIT = `enum _SC_THREAD_PRIO_INHERIT = 87;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PRIO_INHERIT); }))) {
            mixin(enumMixinStr__SC_THREAD_PRIO_INHERIT);
        }
    }
    
    #ifdef _SC_THREAD_KEYS_MAX
    
    #endif
    static if(!is(typeof(_SC_THREAD_KEYS_MAX))) {
        private enum enumMixinStr__SC_THREAD_KEYS_MAX = `enum _SC_THREAD_KEYS_MAX = 86;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr__SC_THREAD_KEYS_MAX);
        }
    }
    
    #ifdef _SC_THREAD_DESTRUCTOR_ITERATIONS
    
    #endif
    static if(!is(typeof(_SC_THREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr__SC_THREAD_DESTRUCTOR_ITERATIONS = `enum _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr__SC_THREAD_DESTRUCTOR_ITERATIONS);
        }
    }
    
    #ifdef _SC_THREAD_CPUTIME
    
    #endif
    static if(!is(typeof(_SC_THREAD_CPUTIME))) {
        private enum enumMixinStr__SC_THREAD_CPUTIME = `enum _SC_THREAD_CPUTIME = 84;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_CPUTIME); }))) {
            mixin(enumMixinStr__SC_THREAD_CPUTIME);
        }
    }
    
    #ifdef _SC_THREAD_ATTR_STACKSIZE
    
    #endif
    static if(!is(typeof(_SC_THREAD_ATTR_STACKSIZE))) {
        private enum enumMixinStr__SC_THREAD_ATTR_STACKSIZE = `enum _SC_THREAD_ATTR_STACKSIZE = 83;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_ATTR_STACKSIZE); }))) {
            mixin(enumMixinStr__SC_THREAD_ATTR_STACKSIZE);
        }
    }
    
    #ifdef _SC_THREAD_ATTR_STACKADDR
    
    #endif
    static if(!is(typeof(_SC_THREAD_ATTR_STACKADDR))) {
        private enum enumMixinStr__SC_THREAD_ATTR_STACKADDR = `enum _SC_THREAD_ATTR_STACKADDR = 82;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_ATTR_STACKADDR); }))) {
            mixin(enumMixinStr__SC_THREAD_ATTR_STACKADDR);
        }
    }
    
    #ifdef _SC_SPORADIC_SERVER
    
    #endif
    static if(!is(typeof(_SC_SPORADIC_SERVER))) {
        private enum enumMixinStr__SC_SPORADIC_SERVER = `enum _SC_SPORADIC_SERVER = 81;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__SC_SPORADIC_SERVER);
        }
    }
    
    #ifdef _SC_SPIN_LOCKS
    
    #endif
    static if(!is(typeof(_SC_SPIN_LOCKS))) {
        private enum enumMixinStr__SC_SPIN_LOCKS = `enum _SC_SPIN_LOCKS = 80;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SPIN_LOCKS); }))) {
            mixin(enumMixinStr__SC_SPIN_LOCKS);
        }
    }
    
    #ifdef _SC_SPAWN
    
    #endif
    static if(!is(typeof(_SC_SPAWN))) {
        private enum enumMixinStr__SC_SPAWN = `enum _SC_SPAWN = 79;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SPAWN); }))) {
            mixin(enumMixinStr__SC_SPAWN);
        }
    }
    
    #ifdef _SC_SHELL
    
    #endif
    static if(!is(typeof(_SC_SHELL))) {
        private enum enumMixinStr__SC_SHELL = `enum _SC_SHELL = 78;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SHELL); }))) {
            mixin(enumMixinStr__SC_SHELL);
        }
    }
    
    #ifdef _SC_REGEXP
    
    #endif
    static if(!is(typeof(_SC_REGEXP))) {
        private enum enumMixinStr__SC_REGEXP = `enum _SC_REGEXP = 77;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_REGEXP); }))) {
            mixin(enumMixinStr__SC_REGEXP);
        }
    }
    
    #ifdef _SC_READER_WRITER_LOCKS
    
    #endif
    static if(!is(typeof(_SC_READER_WRITER_LOCKS))) {
        private enum enumMixinStr__SC_READER_WRITER_LOCKS = `enum _SC_READER_WRITER_LOCKS = 76;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_READER_WRITER_LOCKS); }))) {
            mixin(enumMixinStr__SC_READER_WRITER_LOCKS);
        }
    }
    
    #ifdef _SC_MQ_PRIO_MAX
    
    #endif
    static if(!is(typeof(_SC_MQ_PRIO_MAX))) {
        private enum enumMixinStr__SC_MQ_PRIO_MAX = `enum _SC_MQ_PRIO_MAX = 75;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr__SC_MQ_PRIO_MAX);
        }
    }
    
    #define Py_PYCORECONFIG_H 

    


    static if(!is(typeof(_SC_MONOTONIC_CLOCK))) {
        private enum enumMixinStr__SC_MONOTONIC_CLOCK = `enum _SC_MONOTONIC_CLOCK = 74;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MONOTONIC_CLOCK); }))) {
            mixin(enumMixinStr__SC_MONOTONIC_CLOCK);
        }
    }
    
    #ifdef _SC_LOGIN_NAME_MAX
    
    #endif
    static if(!is(typeof(_SC_LOGIN_NAME_MAX))) {
        private enum enumMixinStr__SC_LOGIN_NAME_MAX = `enum _SC_LOGIN_NAME_MAX = 73;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_LOGIN_NAME_MAX);
        }
    }
    
    #ifdef _SC_HOST_NAME_MAX
    
    #endif
    static if(!is(typeof(_SC_HOST_NAME_MAX))) {
        private enum enumMixinStr__SC_HOST_NAME_MAX = `enum _SC_HOST_NAME_MAX = 72;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_HOST_NAME_MAX);
        }
    }
    
    #ifdef _SC_GETPW_R_SIZE_MAX
    
    #endif
    static if(!is(typeof(_SC_GETPW_R_SIZE_MAX))) {
        private enum enumMixinStr__SC_GETPW_R_SIZE_MAX = `enum _SC_GETPW_R_SIZE_MAX = 71;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_GETPW_R_SIZE_MAX); }))) {
            mixin(enumMixinStr__SC_GETPW_R_SIZE_MAX);
        }
    }
    
    #ifdef _SC_GETGR_R_SIZE_MAX
    
    #endif
    static if(!is(typeof(_SC_GETGR_R_SIZE_MAX))) {
        private enum enumMixinStr__SC_GETGR_R_SIZE_MAX = `enum _SC_GETGR_R_SIZE_MAX = 70;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_GETGR_R_SIZE_MAX); }))) {
            mixin(enumMixinStr__SC_GETGR_R_SIZE_MAX);
        }
    }
    
    #ifdef _SC_FILE_LOCKING
    
    #endif
    static if(!is(typeof(_SC_FILE_LOCKING))) {
        private enum enumMixinStr__SC_FILE_LOCKING = `enum _SC_FILE_LOCKING = 69;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FILE_LOCKING); }))) {
            mixin(enumMixinStr__SC_FILE_LOCKING);
        }
    }
    
    #ifdef _SC_CPUTIME
    
    #endif
    static if(!is(typeof(_SC_CPUTIME))) {
        private enum enumMixinStr__SC_CPUTIME = `enum _SC_CPUTIME = 68;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CPUTIME); }))) {
            mixin(enumMixinStr__SC_CPUTIME);
        }
    }
    
    #ifdef _SC_CLOCK_SELECTION
    
    #endif
    static if(!is(typeof(_SC_CLOCK_SELECTION))) {
        private enum enumMixinStr__SC_CLOCK_SELECTION = `enum _SC_CLOCK_SELECTION = 67;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CLOCK_SELECTION); }))) {
            mixin(enumMixinStr__SC_CLOCK_SELECTION);
        }
    }
    
    #ifdef _SC_BARRIERS
    
    #endif
    static if(!is(typeof(_SC_BARRIERS))) {
        private enum enumMixinStr__SC_BARRIERS = `enum _SC_BARRIERS = 66;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BARRIERS); }))) {
            mixin(enumMixinStr__SC_BARRIERS);
        }
    }
    
    #ifdef _SC_ADVISORY_INFO
    
    #endif
    static if(!is(typeof(_SC_ADVISORY_INFO))) {
        private enum enumMixinStr__SC_ADVISORY_INFO = `enum _SC_ADVISORY_INFO = 65;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ADVISORY_INFO); }))) {
            mixin(enumMixinStr__SC_ADVISORY_INFO);
        }
    }
    
    #ifdef _SC_2_PBS_TRACK
    
    #endif
    static if(!is(typeof(_SC_2_PBS_TRACK))) {
        private enum enumMixinStr__SC_2_PBS_TRACK = `enum _SC_2_PBS_TRACK = 64;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_TRACK); }))) {
            mixin(enumMixinStr__SC_2_PBS_TRACK);
        }
    }
    
    #ifdef _SC_2_PBS_MESSAGE
    
    #endif
    static if(!is(typeof(_SC_2_PBS_MESSAGE))) {
        private enum enumMixinStr__SC_2_PBS_MESSAGE = `enum _SC_2_PBS_MESSAGE = 63;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_MESSAGE); }))) {
            mixin(enumMixinStr__SC_2_PBS_MESSAGE);
        }
    }
    
    #ifdef _SC_2_PBS_LOCATE
    
    #endif
    static if(!is(typeof(_SC_2_PBS_LOCATE))) {
        private enum enumMixinStr__SC_2_PBS_LOCATE = `enum _SC_2_PBS_LOCATE = 62;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_LOCATE); }))) {
            mixin(enumMixinStr__SC_2_PBS_LOCATE);
        }
    }
    
    #ifdef _SC_2_PBS_CHECKPOINT
    
    #endif
    static if(!is(typeof(_SC_2_PBS_CHECKPOINT))) {
        private enum enumMixinStr__SC_2_PBS_CHECKPOINT = `enum _SC_2_PBS_CHECKPOINT = 61;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_CHECKPOINT); }))) {
            mixin(enumMixinStr__SC_2_PBS_CHECKPOINT);
        }
    }
    
    #ifdef _SC_2_PBS_ACCOUNTING
    
    #endif
    static if(!is(typeof(_SC_2_PBS_ACCOUNTING))) {
        private enum enumMixinStr__SC_2_PBS_ACCOUNTING = `enum _SC_2_PBS_ACCOUNTING = 60;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_ACCOUNTING); }))) {
            mixin(enumMixinStr__SC_2_PBS_ACCOUNTING);
        }
    }
    
    #ifdef _SC_2_PBS
    
    #endif
    static if(!is(typeof(_SC_2_PBS))) {
        private enum enumMixinStr__SC_2_PBS = `enum _SC_2_PBS = 59;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS); }))) {
            mixin(enumMixinStr__SC_2_PBS);
        }
    }
    
    #ifdef _SC_NPROCESSORS_ONLN
    
    #endif
    static if(!is(typeof(_SC_NPROCESSORS_ONLN))) {
        private enum enumMixinStr__SC_NPROCESSORS_ONLN = `enum _SC_NPROCESSORS_ONLN = 58;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NPROCESSORS_ONLN); }))) {
            mixin(enumMixinStr__SC_NPROCESSORS_ONLN);
        }
    }
    
    #ifdef _SC_NPROCESSORS_CONF
    
    #endif
    static if(!is(typeof(_SC_NPROCESSORS_CONF))) {
        private enum enumMixinStr__SC_NPROCESSORS_CONF = `enum _SC_NPROCESSORS_CONF = 57;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NPROCESSORS_CONF); }))) {
            mixin(enumMixinStr__SC_NPROCESSORS_CONF);
        }
    }
    
    #ifdef _SC_TIMER_MAX
    
    #endif
    static if(!is(typeof(_SC_TIMER_MAX))) {
        private enum enumMixinStr__SC_TIMER_MAX = `enum _SC_TIMER_MAX = 52;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TIMER_MAX); }))) {
            mixin(enumMixinStr__SC_TIMER_MAX);
        }
    }
    
    #ifdef _SC_SIGQUEUE_MAX
    
    #endif
    static if(!is(typeof(_SC_SIGQUEUE_MAX))) {
        private enum enumMixinStr__SC_SIGQUEUE_MAX = `enum _SC_SIGQUEUE_MAX = 51;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SIGQUEUE_MAX); }))) {
            mixin(enumMixinStr__SC_SIGQUEUE_MAX);
        }
    }
    
    #ifdef _SC_SEM_VALUE_MAX
    
    #endif
    static if(!is(typeof(_SC_SEM_VALUE_MAX))) {
        private enum enumMixinStr__SC_SEM_VALUE_MAX = `enum _SC_SEM_VALUE_MAX = 50;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr__SC_SEM_VALUE_MAX);
        }
    }
    
    #ifdef _SC_SEM_NSEMS_MAX
    
    #endif
    static if(!is(typeof(_SC_SEM_NSEMS_MAX))) {
        private enum enumMixinStr__SC_SEM_NSEMS_MAX = `enum _SC_SEM_NSEMS_MAX = 49;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SEM_NSEMS_MAX); }))) {
            mixin(enumMixinStr__SC_SEM_NSEMS_MAX);
        }
    }
    
    #ifdef _SC_RTSIG_MAX
    
    #endif
    static if(!is(typeof(_SC_RTSIG_MAX))) {
        private enum enumMixinStr__SC_RTSIG_MAX = `enum _SC_RTSIG_MAX = 48;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_RTSIG_MAX); }))) {
            mixin(enumMixinStr__SC_RTSIG_MAX);
        }
    }
    
    #ifdef _SC_MAPPED_FILES
    
    #endif
    static if(!is(typeof(_SC_MAPPED_FILES))) {
        private enum enumMixinStr__SC_MAPPED_FILES = `enum _SC_MAPPED_FILES = 47;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MAPPED_FILES); }))) {
            mixin(enumMixinStr__SC_MAPPED_FILES);
        }
    }
    
    #ifdef _SC_MQ_OPEN_MAX
    
    #endif
    static if(!is(typeof(_SC_MQ_OPEN_MAX))) {
        private enum enumMixinStr__SC_MQ_OPEN_MAX = `enum _SC_MQ_OPEN_MAX = 46;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MQ_OPEN_MAX); }))) {
            mixin(enumMixinStr__SC_MQ_OPEN_MAX);
        }
    }
    
    #ifdef _SC_DELAYTIMER_MAX
    
    #endif
    static if(!is(typeof(_SC_DELAYTIMER_MAX))) {
        private enum enumMixinStr__SC_DELAYTIMER_MAX = `enum _SC_DELAYTIMER_MAX = 45;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr__SC_DELAYTIMER_MAX);
        }
    }
    
    #ifdef _SC_AIO_PRIO_DELTA_MAX
    
    #endif
    static if(!is(typeof(_SC_AIO_PRIO_DELTA_MAX))) {
        private enum enumMixinStr__SC_AIO_PRIO_DELTA_MAX = `enum _SC_AIO_PRIO_DELTA_MAX = 44;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AIO_PRIO_DELTA_MAX); }))) {
            mixin(enumMixinStr__SC_AIO_PRIO_DELTA_MAX);
        }
    }
    
    #ifdef _SC_AIO_MAX
    
    #endif
    static if(!is(typeof(_SC_AIO_MAX))) {
        private enum enumMixinStr__SC_AIO_MAX = `enum _SC_AIO_MAX = 43;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AIO_MAX); }))) {
            mixin(enumMixinStr__SC_AIO_MAX);
        }
    }
    
    #ifdef _SC_AIO_LISTIO_MAX
    
    #endif
    static if(!is(typeof(_SC_AIO_LISTIO_MAX))) {
        private enum enumMixinStr__SC_AIO_LISTIO_MAX = `enum _SC_AIO_LISTIO_MAX = 42;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AIO_LISTIO_MAX); }))) {
            mixin(enumMixinStr__SC_AIO_LISTIO_MAX);
        }
    }
    
    #ifdef _SC_TIMERS
    
    #endif
    static if(!is(typeof(_SC_TIMERS))) {
        private enum enumMixinStr__SC_TIMERS = `enum _SC_TIMERS = 41;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TIMERS); }))) {
            mixin(enumMixinStr__SC_TIMERS);
        }
    }
    
    #ifdef _SC_SYNCHRONIZED_IO
    
    #endif
    static if(!is(typeof(_SC_SYNCHRONIZED_IO))) {
        private enum enumMixinStr__SC_SYNCHRONIZED_IO = `enum _SC_SYNCHRONIZED_IO = 40;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SYNCHRONIZED_IO); }))) {
            mixin(enumMixinStr__SC_SYNCHRONIZED_IO);
        }
    }
    
    #ifdef _SC_SHARED_MEMORY_OBJECTS
    
    #endif
    static if(!is(typeof(_SC_SHARED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__SC_SHARED_MEMORY_OBJECTS = `enum _SC_SHARED_MEMORY_OBJECTS = 39;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SHARED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__SC_SHARED_MEMORY_OBJECTS);
        }
    }
    
    #ifdef _SC_FSYNC
    
    #endif
    static if(!is(typeof(_SC_FSYNC))) {
        private enum enumMixinStr__SC_FSYNC = `enum _SC_FSYNC = 38;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FSYNC); }))) {
            mixin(enumMixinStr__SC_FSYNC);
        }
    }
    
    #ifdef _SC_SEMAPHORES
    
    #endif
    static if(!is(typeof(_SC_SEMAPHORES))) {
        private enum enumMixinStr__SC_SEMAPHORES = `enum _SC_SEMAPHORES = 37;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SEMAPHORES); }))) {
            mixin(enumMixinStr__SC_SEMAPHORES);
        }
    }
    
    #ifdef _SC_REALTIME_SIGNALS
    
    #endif
    static if(!is(typeof(_SC_REALTIME_SIGNALS))) {
        private enum enumMixinStr__SC_REALTIME_SIGNALS = `enum _SC_REALTIME_SIGNALS = 36;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_REALTIME_SIGNALS); }))) {
            mixin(enumMixinStr__SC_REALTIME_SIGNALS);
        }
    }
    
    #ifdef _SC_PRIORITY_SCHEDULING
    
    #endif
    static if(!is(typeof(_SC_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__SC_PRIORITY_SCHEDULING = `enum _SC_PRIORITY_SCHEDULING = 35;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__SC_PRIORITY_SCHEDULING);
        }
    }
    
    #ifdef _SC_PRIORITIZED_IO
    
    #endif
    static if(!is(typeof(_SC_PRIORITIZED_IO))) {
        private enum enumMixinStr__SC_PRIORITIZED_IO = `enum _SC_PRIORITIZED_IO = 34;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PRIORITIZED_IO); }))) {
            mixin(enumMixinStr__SC_PRIORITIZED_IO);
        }
    }
    
    #ifdef _SC_MESSAGE_PASSING
    
    #endif
    static if(!is(typeof(_SC_MESSAGE_PASSING))) {
        private enum enumMixinStr__SC_MESSAGE_PASSING = `enum _SC_MESSAGE_PASSING = 33;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MESSAGE_PASSING); }))) {
            mixin(enumMixinStr__SC_MESSAGE_PASSING);
        }
    }
    
    #ifdef _SC_MEMORY_PROTECTION
    
    #endif
    static if(!is(typeof(_SC_MEMORY_PROTECTION))) {
        private enum enumMixinStr__SC_MEMORY_PROTECTION = `enum _SC_MEMORY_PROTECTION = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MEMORY_PROTECTION); }))) {
            mixin(enumMixinStr__SC_MEMORY_PROTECTION);
        }
    }
    
    #ifdef _SC_MEMLOCK_RANGE
    
    #endif
    static if(!is(typeof(_SC_MEMLOCK_RANGE))) {
        private enum enumMixinStr__SC_MEMLOCK_RANGE = `enum _SC_MEMLOCK_RANGE = 31;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MEMLOCK_RANGE); }))) {
            mixin(enumMixinStr__SC_MEMLOCK_RANGE);
        }
    }
    
    #ifdef _SC_MEMLOCK
    
    #endif
    static if(!is(typeof(_SC_MEMLOCK))) {
        private enum enumMixinStr__SC_MEMLOCK = `enum _SC_MEMLOCK = 30;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MEMLOCK); }))) {
            mixin(enumMixinStr__SC_MEMLOCK);
        }
    }
    
    #ifdef _SC_PAGESIZE
    
    #endif
    static if(!is(typeof(_SC_PAGESIZE))) {
        private enum enumMixinStr__SC_PAGESIZE = `enum _SC_PAGESIZE = 29;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PAGESIZE); }))) {
            mixin(enumMixinStr__SC_PAGESIZE);
        }
    }
    
    #ifdef _SC_ASYNCHRONOUS_IO
    
    #endif
    static if(!is(typeof(_SC_ASYNCHRONOUS_IO))) {
        private enum enumMixinStr__SC_ASYNCHRONOUS_IO = `enum _SC_ASYNCHRONOUS_IO = 28;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ASYNCHRONOUS_IO); }))) {
            mixin(enumMixinStr__SC_ASYNCHRONOUS_IO);
        }
    }
    
    #ifdef _SC_TZNAME_MAX
    
    #endif
    static if(!is(typeof(_SC_TZNAME_MAX))) {
        private enum enumMixinStr__SC_TZNAME_MAX = `enum _SC_TZNAME_MAX = 27;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TZNAME_MAX); }))) {
            mixin(enumMixinStr__SC_TZNAME_MAX);
        }
    }
    
    #ifdef _SC_STREAM_MAX
    
    #endif
    static if(!is(typeof(_SC_STREAM_MAX))) {
        private enum enumMixinStr__SC_STREAM_MAX = `enum _SC_STREAM_MAX = 26;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_STREAM_MAX); }))) {
            mixin(enumMixinStr__SC_STREAM_MAX);
        }
    }
    
    #ifdef _SC_2_UPE
    
    #endif
    static if(!is(typeof(_SC_2_UPE))) {
        private enum enumMixinStr__SC_2_UPE = `enum _SC_2_UPE = 25;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_UPE); }))) {
            mixin(enumMixinStr__SC_2_UPE);
        }
    }
    
    #ifdef _SC_2_SW_DEV
    
    #endif
    static if(!is(typeof(_SC_2_SW_DEV))) {
        private enum enumMixinStr__SC_2_SW_DEV = `enum _SC_2_SW_DEV = 24;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_SW_DEV); }))) {
            mixin(enumMixinStr__SC_2_SW_DEV);
        }
    }
    
    #ifdef _SC_2_LOCALEDEF
    
    #endif
    static if(!is(typeof(_SC_2_LOCALEDEF))) {
        private enum enumMixinStr__SC_2_LOCALEDEF = `enum _SC_2_LOCALEDEF = 23;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_LOCALEDEF); }))) {
            mixin(enumMixinStr__SC_2_LOCALEDEF);
        }
    }
    
    #ifdef _SC_2_FORT_RUN
    
    #endif
    static if(!is(typeof(_SC_2_FORT_RUN))) {
        private enum enumMixinStr__SC_2_FORT_RUN = `enum _SC_2_FORT_RUN = 22;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_FORT_RUN); }))) {
            mixin(enumMixinStr__SC_2_FORT_RUN);
        }
    }
    
    #ifdef _SC_2_FORT_DEV
    
    #endif
    static if(!is(typeof(_SC_2_FORT_DEV))) {
        private enum enumMixinStr__SC_2_FORT_DEV = `enum _SC_2_FORT_DEV = 21;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_FORT_DEV); }))) {
            mixin(enumMixinStr__SC_2_FORT_DEV);
        }
    }
    
    #ifdef _SC_2_CHAR_TERM
    
    #endif
    static if(!is(typeof(_SC_2_CHAR_TERM))) {
        private enum enumMixinStr__SC_2_CHAR_TERM = `enum _SC_2_CHAR_TERM = 20;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_CHAR_TERM); }))) {
            mixin(enumMixinStr__SC_2_CHAR_TERM);
        }
    }
    
    #define _Py_static_string_init( value ) { . next = null , . string = value , . object = null }

    

    

    


    static if(!is(typeof(_SC_2_C_DEV))) {
        private enum enumMixinStr__SC_2_C_DEV = `enum _SC_2_C_DEV = 19;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_C_DEV); }))) {
            mixin(enumMixinStr__SC_2_C_DEV);
        }
    }
    
    #ifdef _SC_2_C_BIND
    
    #endif
    static if(!is(typeof(_SC_2_C_BIND))) {
        private enum enumMixinStr__SC_2_C_BIND = `enum _SC_2_C_BIND = 18;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_C_BIND); }))) {
            mixin(enumMixinStr__SC_2_C_BIND);
        }
    }
    
    #ifdef _SC_2_VERSION
    
    #endif
    static if(!is(typeof(_SC_2_VERSION))) {
        private enum enumMixinStr__SC_2_VERSION = `enum _SC_2_VERSION = 17;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_VERSION); }))) {
            mixin(enumMixinStr__SC_2_VERSION);
        }
    }
    
    #ifdef _SC_RE_DUP_MAX
    
    #endif
    static if(!is(typeof(_SC_RE_DUP_MAX))) {
        private enum enumMixinStr__SC_RE_DUP_MAX = `enum _SC_RE_DUP_MAX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__SC_RE_DUP_MAX);
        }
    }
    
    #ifdef _SC_LINE_MAX
    
    #endif
    static if(!is(typeof(_SC_LINE_MAX))) {
        private enum enumMixinStr__SC_LINE_MAX = `enum _SC_LINE_MAX = 15;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LINE_MAX); }))) {
            mixin(enumMixinStr__SC_LINE_MAX);
        }
    }
    
    #ifdef PyBUF_MAX_NDIM
    
    #endif
    static if(!is(typeof(PyBUF_MAX_NDIM))) {
        private enum enumMixinStr_PyBUF_MAX_NDIM = `enum PyBUF_MAX_NDIM = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_MAX_NDIM); }))) {
            mixin(enumMixinStr_PyBUF_MAX_NDIM);
        }
    }
    
    #ifdef PyBUF_SIMPLE
    
    #endif
    static if(!is(typeof(PyBUF_SIMPLE))) {
        private enum enumMixinStr_PyBUF_SIMPLE = `enum PyBUF_SIMPLE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_SIMPLE); }))) {
            mixin(enumMixinStr_PyBUF_SIMPLE);
        }
    }
    
    #ifdef PyBUF_WRITABLE
    
    #endif
    static if(!is(typeof(PyBUF_WRITABLE))) {
        private enum enumMixinStr_PyBUF_WRITABLE = `enum PyBUF_WRITABLE = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_WRITABLE); }))) {
            mixin(enumMixinStr_PyBUF_WRITABLE);
        }
    }
    
    #ifdef PyBUF_WRITEABLE
    
    #endif
    static if(!is(typeof(PyBUF_WRITEABLE))) {
        private enum enumMixinStr_PyBUF_WRITEABLE = `enum PyBUF_WRITEABLE = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_WRITEABLE); }))) {
            mixin(enumMixinStr_PyBUF_WRITEABLE);
        }
    }
    
    #ifdef PyBUF_FORMAT
    
    #endif
    static if(!is(typeof(PyBUF_FORMAT))) {
        private enum enumMixinStr_PyBUF_FORMAT = `enum PyBUF_FORMAT = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_FORMAT); }))) {
            mixin(enumMixinStr_PyBUF_FORMAT);
        }
    }
    
    #ifdef PyBUF_ND
    
    #endif
    static if(!is(typeof(PyBUF_ND))) {
        private enum enumMixinStr_PyBUF_ND = `enum PyBUF_ND = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_ND); }))) {
            mixin(enumMixinStr_PyBUF_ND);
        }
    }
    
    #ifdef PyBUF_STRIDES
    
    #endif
    static if(!is(typeof(PyBUF_STRIDES))) {
        private enum enumMixinStr_PyBUF_STRIDES = `enum PyBUF_STRIDES = ( 0x0010 | 0x0008 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_STRIDES); }))) {
            mixin(enumMixinStr_PyBUF_STRIDES);
        }
    }
    
    #ifdef PyBUF_C_CONTIGUOUS
    
    #endif
    static if(!is(typeof(PyBUF_C_CONTIGUOUS))) {
        private enum enumMixinStr_PyBUF_C_CONTIGUOUS = `enum PyBUF_C_CONTIGUOUS = ( 0x0020 | ( 0x0010 | 0x0008 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_C_CONTIGUOUS); }))) {
            mixin(enumMixinStr_PyBUF_C_CONTIGUOUS);
        }
    }
    
    #ifdef PyBUF_F_CONTIGUOUS
    
    #endif
    static if(!is(typeof(PyBUF_F_CONTIGUOUS))) {
        private enum enumMixinStr_PyBUF_F_CONTIGUOUS = `enum PyBUF_F_CONTIGUOUS = ( 0x0040 | ( 0x0010 | 0x0008 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_F_CONTIGUOUS); }))) {
            mixin(enumMixinStr_PyBUF_F_CONTIGUOUS);
        }
    }
    
    #ifdef PyBUF_ANY_CONTIGUOUS
    
    #endif
    static if(!is(typeof(PyBUF_ANY_CONTIGUOUS))) {
        private enum enumMixinStr_PyBUF_ANY_CONTIGUOUS = `enum PyBUF_ANY_CONTIGUOUS = ( 0x0080 | ( 0x0010 | 0x0008 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_ANY_CONTIGUOUS); }))) {
            mixin(enumMixinStr_PyBUF_ANY_CONTIGUOUS);
        }
    }
    
    #ifdef PyBUF_INDIRECT
    
    #endif
    static if(!is(typeof(PyBUF_INDIRECT))) {
        private enum enumMixinStr_PyBUF_INDIRECT = `enum PyBUF_INDIRECT = ( 0x0100 | ( 0x0010 | 0x0008 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_INDIRECT); }))) {
            mixin(enumMixinStr_PyBUF_INDIRECT);
        }
    }
    
    #ifdef PyBUF_CONTIG
    
    #endif
    static if(!is(typeof(PyBUF_CONTIG))) {
        private enum enumMixinStr_PyBUF_CONTIG = `enum PyBUF_CONTIG = ( 0x0008 | 0x0001 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_CONTIG); }))) {
            mixin(enumMixinStr_PyBUF_CONTIG);
        }
    }
    
    #ifdef PyBUF_CONTIG_RO
    
    #endif
    static if(!is(typeof(PyBUF_CONTIG_RO))) {
        private enum enumMixinStr_PyBUF_CONTIG_RO = `enum PyBUF_CONTIG_RO = ( 0x0008 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_CONTIG_RO); }))) {
            mixin(enumMixinStr_PyBUF_CONTIG_RO);
        }
    }
    
    #ifdef PyBUF_STRIDED
    
    #endif
    static if(!is(typeof(PyBUF_STRIDED))) {
        private enum enumMixinStr_PyBUF_STRIDED = `enum PyBUF_STRIDED = ( ( 0x0010 | 0x0008 ) | 0x0001 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_STRIDED); }))) {
            mixin(enumMixinStr_PyBUF_STRIDED);
        }
    }
    
    #ifdef PyBUF_STRIDED_RO
    
    #endif
    static if(!is(typeof(PyBUF_STRIDED_RO))) {
        private enum enumMixinStr_PyBUF_STRIDED_RO = `enum PyBUF_STRIDED_RO = ( ( 0x0010 | 0x0008 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_STRIDED_RO); }))) {
            mixin(enumMixinStr_PyBUF_STRIDED_RO);
        }
    }
    
    #ifdef PyBUF_RECORDS
    
    #endif
    static if(!is(typeof(PyBUF_RECORDS))) {
        private enum enumMixinStr_PyBUF_RECORDS = `enum PyBUF_RECORDS = ( ( 0x0010 | 0x0008 ) | 0x0001 | 0x0004 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_RECORDS); }))) {
            mixin(enumMixinStr_PyBUF_RECORDS);
        }
    }
    
    #ifdef PyBUF_RECORDS_RO
    
    #endif
    static if(!is(typeof(PyBUF_RECORDS_RO))) {
        private enum enumMixinStr_PyBUF_RECORDS_RO = `enum PyBUF_RECORDS_RO = ( ( 0x0010 | 0x0008 ) | 0x0004 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_RECORDS_RO); }))) {
            mixin(enumMixinStr_PyBUF_RECORDS_RO);
        }
    }
    
    #ifdef PyBUF_FULL
    
    #endif
    static if(!is(typeof(PyBUF_FULL))) {
        private enum enumMixinStr_PyBUF_FULL = `enum PyBUF_FULL = ( ( 0x0100 | ( 0x0010 | 0x0008 ) ) | 0x0001 | 0x0004 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_FULL); }))) {
            mixin(enumMixinStr_PyBUF_FULL);
        }
    }
    
    #ifdef PyBUF_FULL_RO
    
    #endif
    static if(!is(typeof(PyBUF_FULL_RO))) {
        private enum enumMixinStr_PyBUF_FULL_RO = `enum PyBUF_FULL_RO = ( ( 0x0100 | ( 0x0010 | 0x0008 ) ) | 0x0004 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_FULL_RO); }))) {
            mixin(enumMixinStr_PyBUF_FULL_RO);
        }
    }
    
    #ifdef PyBUF_READ
    
    #endif
    static if(!is(typeof(PyBUF_READ))) {
        private enum enumMixinStr_PyBUF_READ = `enum PyBUF_READ = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_READ); }))) {
            mixin(enumMixinStr_PyBUF_READ);
        }
    }
    
    #ifdef PyBUF_WRITE
    
    #endif
    static if(!is(typeof(PyBUF_WRITE))) {
        private enum enumMixinStr_PyBUF_WRITE = `enum PyBUF_WRITE = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_PyBUF_WRITE); }))) {
            mixin(enumMixinStr_PyBUF_WRITE);
        }
    }
    
    #ifdef _SC_EXPR_NEST_MAX
    
    #endif
    static if(!is(typeof(_SC_EXPR_NEST_MAX))) {
        private enum enumMixinStr__SC_EXPR_NEST_MAX = `enum _SC_EXPR_NEST_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr__SC_EXPR_NEST_MAX);
        }
    }
    
    #ifdef _SC_COLL_WEIGHTS_MAX
    
    #endif
    static if(!is(typeof(_SC_COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr__SC_COLL_WEIGHTS_MAX = `enum _SC_COLL_WEIGHTS_MAX = 13;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr__SC_COLL_WEIGHTS_MAX);
        }
    }
    
    #ifdef _SC_BC_STRING_MAX
    
    #endif
    static if(!is(typeof(_SC_BC_STRING_MAX))) {
        private enum enumMixinStr__SC_BC_STRING_MAX = `enum _SC_BC_STRING_MAX = 12;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_STRING_MAX); }))) {
            mixin(enumMixinStr__SC_BC_STRING_MAX);
        }
    }
    
    #ifdef _SC_BC_SCALE_MAX
    
    #endif
    static if(!is(typeof(_SC_BC_SCALE_MAX))) {
        private enum enumMixinStr__SC_BC_SCALE_MAX = `enum _SC_BC_SCALE_MAX = 11;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr__SC_BC_SCALE_MAX);
        }
    }
    
    #ifdef _SC_BC_DIM_MAX
    
    #endif
    static if(!is(typeof(_SC_BC_DIM_MAX))) {
        private enum enumMixinStr__SC_BC_DIM_MAX = `enum _SC_BC_DIM_MAX = 10;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_DIM_MAX); }))) {
            mixin(enumMixinStr__SC_BC_DIM_MAX);
        }
    }
    
    #ifdef _SC_BC_BASE_MAX
    
    #endif
    static if(!is(typeof(_SC_BC_BASE_MAX))) {
        private enum enumMixinStr__SC_BC_BASE_MAX = `enum _SC_BC_BASE_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_BASE_MAX); }))) {
            mixin(enumMixinStr__SC_BC_BASE_MAX);
        }
    }
    
    #ifdef _SC_VERSION
    
    #endif
    static if(!is(typeof(_SC_VERSION))) {
        private enum enumMixinStr__SC_VERSION = `enum _SC_VERSION = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_VERSION); }))) {
            mixin(enumMixinStr__SC_VERSION);
        }
    }
    
    #ifdef _SC_SAVED_IDS
    
    #endif
    static if(!is(typeof(_SC_SAVED_IDS))) {
        private enum enumMixinStr__SC_SAVED_IDS = `enum _SC_SAVED_IDS = 7;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SAVED_IDS); }))) {
            mixin(enumMixinStr__SC_SAVED_IDS);
        }
    }
    
    #ifdef _SC_JOB_CONTROL
    
    #endif
    static if(!is(typeof(_SC_JOB_CONTROL))) {
        private enum enumMixinStr__SC_JOB_CONTROL = `enum _SC_JOB_CONTROL = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_JOB_CONTROL); }))) {
            mixin(enumMixinStr__SC_JOB_CONTROL);
        }
    }
    
    #ifdef _SC_OPEN_MAX
    
    #endif
    static if(!is(typeof(_SC_OPEN_MAX))) {
        private enum enumMixinStr__SC_OPEN_MAX = `enum _SC_OPEN_MAX = 5;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_OPEN_MAX); }))) {
            mixin(enumMixinStr__SC_OPEN_MAX);
        }
    }
    
    #ifdef _SC_NGROUPS_MAX
    
    #endif
    static if(!is(typeof(_SC_NGROUPS_MAX))) {
        private enum enumMixinStr__SC_NGROUPS_MAX = `enum _SC_NGROUPS_MAX = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NGROUPS_MAX); }))) {
            mixin(enumMixinStr__SC_NGROUPS_MAX);
        }
    }
    
    #ifdef _SC_CLK_TCK
    
    #endif
    static if(!is(typeof(_SC_CLK_TCK))) {
        private enum enumMixinStr__SC_CLK_TCK = `enum _SC_CLK_TCK = 3;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CLK_TCK); }))) {
            mixin(enumMixinStr__SC_CLK_TCK);
        }
    }
    
    #ifdef _SC_CHILD_MAX
    
    #endif
    static if(!is(typeof(_SC_CHILD_MAX))) {
        private enum enumMixinStr__SC_CHILD_MAX = `enum _SC_CHILD_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CHILD_MAX); }))) {
            mixin(enumMixinStr__SC_CHILD_MAX);
        }
    }
    
    #ifdef _SC_ARG_MAX
    
    #endif
    static if(!is(typeof(_SC_ARG_MAX))) {
        private enum enumMixinStr__SC_ARG_MAX = `enum _SC_ARG_MAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ARG_MAX); }))) {
            mixin(enumMixinStr__SC_ARG_MAX);
        }
    }
    
    #ifdef _XOPEN_UNIX
    
    #endif
    static if(!is(typeof(_XOPEN_UNIX))) {
        private enum enumMixinStr__XOPEN_UNIX = `enum _XOPEN_UNIX = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_UNIX); }))) {
            mixin(enumMixinStr__XOPEN_UNIX);
        }
    }
    
    #ifdef _XOPEN_STREAMS
    
    #endif
    static if(!is(typeof(_XOPEN_STREAMS))) {
        private enum enumMixinStr__XOPEN_STREAMS = `enum _XOPEN_STREAMS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_STREAMS); }))) {
            mixin(enumMixinStr__XOPEN_STREAMS);
        }
    }
    
    #ifdef _XOPEN_SHM
    
    #endif
    static if(!is(typeof(_XOPEN_SHM))) {
        private enum enumMixinStr__XOPEN_SHM = `enum _XOPEN_SHM = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_SHM); }))) {
            mixin(enumMixinStr__XOPEN_SHM);
        }
    }
    
    #ifdef _XOPEN_REALTIME_THREADS
    
    #endif
    static if(!is(typeof(_XOPEN_REALTIME_THREADS))) {
        private enum enumMixinStr__XOPEN_REALTIME_THREADS = `enum _XOPEN_REALTIME_THREADS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_REALTIME_THREADS); }))) {
            mixin(enumMixinStr__XOPEN_REALTIME_THREADS);
        }
    }
    
    #ifdef _XOPEN_REALTIME
    
    #endif
    static if(!is(typeof(_XOPEN_REALTIME))) {
        private enum enumMixinStr__XOPEN_REALTIME = `enum _XOPEN_REALTIME = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_REALTIME); }))) {
            mixin(enumMixinStr__XOPEN_REALTIME);
        }
    }
    
    #define PyHeapType_GET_MEMBERS( etype ) ( cast( PyMemberDef * ) ( ( cast( char * ) etype ) + Py_TYPE ( etype ) . tp_basicsize ) )

    


    static if(!is(typeof(_XOPEN_LEGACY))) {
        private enum enumMixinStr__XOPEN_LEGACY = `enum _XOPEN_LEGACY = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_LEGACY); }))) {
            mixin(enumMixinStr__XOPEN_LEGACY);
        }
    }
    
    #ifdef _XOPEN_ENH_I18N
    
    #endif
    static if(!is(typeof(_XOPEN_ENH_I18N))) {
        private enum enumMixinStr__XOPEN_ENH_I18N = `enum _XOPEN_ENH_I18N = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_ENH_I18N); }))) {
            mixin(enumMixinStr__XOPEN_ENH_I18N);
        }
    }
    
    #ifdef _XOPEN_CRYPT
    
    #endif
    static if(!is(typeof(_XOPEN_CRYPT))) {
        private enum enumMixinStr__XOPEN_CRYPT = `enum _XOPEN_CRYPT = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_CRYPT); }))) {
            mixin(enumMixinStr__XOPEN_CRYPT);
        }
    }
    
    #ifdef _XBS5_LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(_XBS5_LPBIG_OFFBIG))) {
        private enum enumMixinStr__XBS5_LPBIG_OFFBIG = `enum _XBS5_LPBIG_OFFBIG = __LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__XBS5_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__XBS5_LPBIG_OFFBIG);
        }
    }
    
    #ifdef _XBS5_LP64_OFF64
    
    #endif
    static if(!is(typeof(_XBS5_LP64_OFF64))) {
        private enum enumMixinStr__XBS5_LP64_OFF64 = `enum _XBS5_LP64_OFF64 = __LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__XBS5_LP64_OFF64); }))) {
            mixin(enumMixinStr__XBS5_LP64_OFF64);
        }
    }
    
    #ifdef _XBS5_ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(_XBS5_ILP32_OFFBIG))) {
        private enum enumMixinStr__XBS5_ILP32_OFFBIG = `enum _XBS5_ILP32_OFFBIG = __ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__XBS5_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__XBS5_ILP32_OFFBIG);
        }
    }
    
    #ifdef _XBS5_ILP32_OFF32
    
    #endif
    static if(!is(typeof(_XBS5_ILP32_OFF32))) {
        private enum enumMixinStr__XBS5_ILP32_OFF32 = `enum _XBS5_ILP32_OFF32 = __ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__XBS5_ILP32_OFF32); }))) {
            mixin(enumMixinStr__XBS5_ILP32_OFF32);
        }
    }
    
    #ifdef _V6_LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(_V6_LPBIG_OFFBIG))) {
        private enum enumMixinStr__V6_LPBIG_OFFBIG = `enum _V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__V6_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__V6_LPBIG_OFFBIG);
        }
    }
    
    #ifdef _V6_LP64_OFF64
    
    #endif
    static if(!is(typeof(_V6_LP64_OFF64))) {
        private enum enumMixinStr__V6_LP64_OFF64 = `enum _V6_LP64_OFF64 = __LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__V6_LP64_OFF64); }))) {
            mixin(enumMixinStr__V6_LP64_OFF64);
        }
    }
    
    #ifdef _V6_ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(_V6_ILP32_OFFBIG))) {
        private enum enumMixinStr__V6_ILP32_OFFBIG = `enum _V6_ILP32_OFFBIG = __ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__V6_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__V6_ILP32_OFFBIG);
        }
    }
    
    #ifdef _V6_ILP32_OFF32
    
    #endif
    static if(!is(typeof(_V6_ILP32_OFF32))) {
        private enum enumMixinStr__V6_ILP32_OFF32 = `enum _V6_ILP32_OFF32 = __ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__V6_ILP32_OFF32); }))) {
            mixin(enumMixinStr__V6_ILP32_OFF32);
        }
    }
    
    #ifdef _POSIX_V7_LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(_POSIX_V7_LPBIG_OFFBIG))) {
        private enum enumMixinStr__POSIX_V7_LPBIG_OFFBIG = `enum _POSIX_V7_LPBIG_OFFBIG = __LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V7_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__POSIX_V7_LPBIG_OFFBIG);
        }
    }
    
    #ifdef _POSIX_V7_LP64_OFF64
    
    #endif
    static if(!is(typeof(_POSIX_V7_LP64_OFF64))) {
        private enum enumMixinStr__POSIX_V7_LP64_OFF64 = `enum _POSIX_V7_LP64_OFF64 = __LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V7_LP64_OFF64); }))) {
            mixin(enumMixinStr__POSIX_V7_LP64_OFF64);
        }
    }
    
    #ifdef _POSIX_V7_ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(_POSIX_V7_ILP32_OFFBIG))) {
        private enum enumMixinStr__POSIX_V7_ILP32_OFFBIG = `enum _POSIX_V7_ILP32_OFFBIG = __ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V7_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__POSIX_V7_ILP32_OFFBIG);
        }
    }
    
    #ifdef _POSIX_V7_ILP32_OFF32
    
    #endif
    static if(!is(typeof(_POSIX_V7_ILP32_OFF32))) {
        private enum enumMixinStr__POSIX_V7_ILP32_OFF32 = `enum _POSIX_V7_ILP32_OFF32 = __ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V7_ILP32_OFF32); }))) {
            mixin(enumMixinStr__POSIX_V7_ILP32_OFF32);
        }
    }
    
    #ifdef _POSIX_V6_LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(_POSIX_V6_LPBIG_OFFBIG))) {
        private enum enumMixinStr__POSIX_V6_LPBIG_OFFBIG = `enum _POSIX_V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V6_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__POSIX_V6_LPBIG_OFFBIG);
        }
    }
    
    #ifdef _POSIX_V6_LP64_OFF64
    
    #endif
    static if(!is(typeof(_POSIX_V6_LP64_OFF64))) {
        private enum enumMixinStr__POSIX_V6_LP64_OFF64 = `enum _POSIX_V6_LP64_OFF64 = __LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V6_LP64_OFF64); }))) {
            mixin(enumMixinStr__POSIX_V6_LP64_OFF64);
        }
    }
    
    #ifdef _POSIX_V6_ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(_POSIX_V6_ILP32_OFFBIG))) {
        private enum enumMixinStr__POSIX_V6_ILP32_OFFBIG = `enum _POSIX_V6_ILP32_OFFBIG = __ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V6_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__POSIX_V6_ILP32_OFFBIG);
        }
    }
    
    #ifdef _POSIX_V6_ILP32_OFF32
    
    #endif
    static if(!is(typeof(_POSIX_V6_ILP32_OFF32))) {
        private enum enumMixinStr__POSIX_V6_ILP32_OFF32 = `enum _POSIX_V6_ILP32_OFF32 = __ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V6_ILP32_OFF32); }))) {
            mixin(enumMixinStr__POSIX_V6_ILP32_OFF32);
        }
    }
    
    #ifdef __LPBIG_OFFBIG
    
    #endif
    static if(!is(typeof(__LPBIG_OFFBIG))) {
        private enum enumMixinStr___LPBIG_OFFBIG = `enum __LPBIG_OFFBIG = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr___LPBIG_OFFBIG);
        }
    }
    
    #ifdef __LP64_OFF64
    
    #endif
    static if(!is(typeof(__LP64_OFF64))) {
        private enum enumMixinStr___LP64_OFF64 = `enum __LP64_OFF64 = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___LP64_OFF64); }))) {
            mixin(enumMixinStr___LP64_OFF64);
        }
    }
    
    #ifdef __ILP32_OFFBIG
    
    #endif
    static if(!is(typeof(__ILP32_OFFBIG))) {
        private enum enumMixinStr___ILP32_OFFBIG = `enum __ILP32_OFFBIG = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___ILP32_OFFBIG); }))) {
            mixin(enumMixinStr___ILP32_OFFBIG);
        }
    }
    
    #ifdef __ILP32_OFF32
    
    #endif
    static if(!is(typeof(__ILP32_OFF32))) {
        private enum enumMixinStr___ILP32_OFF32 = `enum __ILP32_OFF32 = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___ILP32_OFF32); }))) {
            mixin(enumMixinStr___ILP32_OFF32);
        }
    }
    
    #ifdef _POSIX2_UPE
    
    #endif
    static if(!is(typeof(_POSIX2_UPE))) {
        private enum enumMixinStr__POSIX2_UPE = `enum _POSIX2_UPE = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_UPE); }))) {
            mixin(enumMixinStr__POSIX2_UPE);
        }
    }
    
    #ifdef _POSIX2_SW_DEV
    
    #endif
    static if(!is(typeof(_POSIX2_SW_DEV))) {
        private enum enumMixinStr__POSIX2_SW_DEV = `enum _POSIX2_SW_DEV = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_SW_DEV); }))) {
            mixin(enumMixinStr__POSIX2_SW_DEV);
        }
    }
    
    #ifdef _POSIX2_PBS_TRACK
    
    #endif
    static if(!is(typeof(_POSIX2_PBS_TRACK))) {
        private enum enumMixinStr__POSIX2_PBS_TRACK = `enum _POSIX2_PBS_TRACK = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_PBS_TRACK); }))) {
            mixin(enumMixinStr__POSIX2_PBS_TRACK);
        }
    }
    
    #ifdef _POSIX2_PBS_MESSAGE
    
    #endif
    static if(!is(typeof(_POSIX2_PBS_MESSAGE))) {
        private enum enumMixinStr__POSIX2_PBS_MESSAGE = `enum _POSIX2_PBS_MESSAGE = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_PBS_MESSAGE); }))) {
            mixin(enumMixinStr__POSIX2_PBS_MESSAGE);
        }
    }
    
    #ifdef _POSIX2_PBS_LOCATE
    
    #endif
    static if(!is(typeof(_POSIX2_PBS_LOCATE))) {
        private enum enumMixinStr__POSIX2_PBS_LOCATE = `enum _POSIX2_PBS_LOCATE = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_PBS_LOCATE); }))) {
            mixin(enumMixinStr__POSIX2_PBS_LOCATE);
        }
    }
    
    #ifdef _POSIX2_PBS_CHECKPOINT
    
    #endif
    static if(!is(typeof(_POSIX2_PBS_CHECKPOINT))) {
        private enum enumMixinStr__POSIX2_PBS_CHECKPOINT = `enum _POSIX2_PBS_CHECKPOINT = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_PBS_CHECKPOINT); }))) {
            mixin(enumMixinStr__POSIX2_PBS_CHECKPOINT);
        }
    }
    
    #ifdef _POSIX2_PBS_ACCOUNTING
    
    #endif
    static if(!is(typeof(_POSIX2_PBS_ACCOUNTING))) {
        private enum enumMixinStr__POSIX2_PBS_ACCOUNTING = `enum _POSIX2_PBS_ACCOUNTING = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_PBS_ACCOUNTING); }))) {
            mixin(enumMixinStr__POSIX2_PBS_ACCOUNTING);
        }
    }
    
    #ifdef _POSIX2_PBS
    
    #endif
    static if(!is(typeof(_POSIX2_PBS))) {
        private enum enumMixinStr__POSIX2_PBS = `enum _POSIX2_PBS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_PBS); }))) {
            mixin(enumMixinStr__POSIX2_PBS);
        }
    }
    
    #ifdef _POSIX2_LOCALEDEF
    
    #endif
    static if(!is(typeof(_POSIX2_LOCALEDEF))) {
        private enum enumMixinStr__POSIX2_LOCALEDEF = `enum _POSIX2_LOCALEDEF = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_LOCALEDEF); }))) {
            mixin(enumMixinStr__POSIX2_LOCALEDEF);
        }
    }
    
    #ifdef _POSIX2_FORT_RUN
    
    #endif
    static if(!is(typeof(_POSIX2_FORT_RUN))) {
        private enum enumMixinStr__POSIX2_FORT_RUN = `enum _POSIX2_FORT_RUN = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_FORT_RUN); }))) {
            mixin(enumMixinStr__POSIX2_FORT_RUN);
        }
    }
    
    #ifdef _POSIX2_FORT_DEV
    
    #endif
    static if(!is(typeof(_POSIX2_FORT_DEV))) {
        private enum enumMixinStr__POSIX2_FORT_DEV = `enum _POSIX2_FORT_DEV = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_FORT_DEV); }))) {
            mixin(enumMixinStr__POSIX2_FORT_DEV);
        }
    }
    
    #ifdef _POSIX2_CHAR_TERM
    
    #endif
    static if(!is(typeof(_POSIX2_CHAR_TERM))) {
        private enum enumMixinStr__POSIX2_CHAR_TERM = `enum _POSIX2_CHAR_TERM = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_CHAR_TERM); }))) {
            mixin(enumMixinStr__POSIX2_CHAR_TERM);
        }
    }
    
    #ifdef _POSIX2_C_DEV
    
    #endif
    static if(!is(typeof(_POSIX2_C_DEV))) {
        private enum enumMixinStr__POSIX2_C_DEV = `enum _POSIX2_C_DEV = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_C_DEV); }))) {
            mixin(enumMixinStr__POSIX2_C_DEV);
        }
    }
    
    #ifdef _POSIX2_C_BIND
    
    #endif
    static if(!is(typeof(_POSIX2_C_BIND))) {
        private enum enumMixinStr__POSIX2_C_BIND = `enum _POSIX2_C_BIND = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_C_BIND); }))) {
            mixin(enumMixinStr__POSIX2_C_BIND);
        }
    }
    
    #ifdef _POSIX_TYPED_MEMORY_OBJECTS
    
    #endif
    static if(!is(typeof(_POSIX_TYPED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__POSIX_TYPED_MEMORY_OBJECTS = `enum _POSIX_TYPED_MEMORY_OBJECTS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TYPED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__POSIX_TYPED_MEMORY_OBJECTS);
        }
    }
    
    #ifdef _POSIX_TRACE_LOG
    
    #endif
    static if(!is(typeof(_POSIX_TRACE_LOG))) {
        private enum enumMixinStr__POSIX_TRACE_LOG = `enum _POSIX_TRACE_LOG = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_LOG); }))) {
            mixin(enumMixinStr__POSIX_TRACE_LOG);
        }
    }
    
    #ifdef _POSIX_TRACE_INHERIT
    
    #endif
    static if(!is(typeof(_POSIX_TRACE_INHERIT))) {
        private enum enumMixinStr__POSIX_TRACE_INHERIT = `enum _POSIX_TRACE_INHERIT = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_INHERIT); }))) {
            mixin(enumMixinStr__POSIX_TRACE_INHERIT);
        }
    }
    
    #ifdef _POSIX_TRACE_EVENT_FILTER
    
    #endif
    static if(!is(typeof(_POSIX_TRACE_EVENT_FILTER))) {
        private enum enumMixinStr__POSIX_TRACE_EVENT_FILTER = `enum _POSIX_TRACE_EVENT_FILTER = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_EVENT_FILTER); }))) {
            mixin(enumMixinStr__POSIX_TRACE_EVENT_FILTER);
        }
    }
    
    #ifdef _POSIX_TRACE
    
    #endif
    static if(!is(typeof(_POSIX_TRACE))) {
        private enum enumMixinStr__POSIX_TRACE = `enum _POSIX_TRACE = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE); }))) {
            mixin(enumMixinStr__POSIX_TRACE);
        }
    }
    
    #ifdef _POSIX_TIMERS
    
    #endif
    static if(!is(typeof(_POSIX_TIMERS))) {
        private enum enumMixinStr__POSIX_TIMERS = `enum _POSIX_TIMERS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMERS); }))) {
            mixin(enumMixinStr__POSIX_TIMERS);
        }
    }
    
    #ifdef _POSIX_TIMEOUTS
    
    #endif
    static if(!is(typeof(_POSIX_TIMEOUTS))) {
        private enum enumMixinStr__POSIX_TIMEOUTS = `enum _POSIX_TIMEOUTS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMEOUTS); }))) {
            mixin(enumMixinStr__POSIX_TIMEOUTS);
        }
    }
    
    #ifdef _POSIX_THREADS
    
    #endif
    static if(!is(typeof(_POSIX_THREADS))) {
        private enum enumMixinStr__POSIX_THREADS = `enum _POSIX_THREADS = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREADS); }))) {
            mixin(enumMixinStr__POSIX_THREADS);
        }
    }
    
    #ifdef _POSIX_THREAD_SPORADIC_SERVER
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_SPORADIC_SERVER))) {
        private enum enumMixinStr__POSIX_THREAD_SPORADIC_SERVER = `enum _POSIX_THREAD_SPORADIC_SERVER = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__POSIX_THREAD_SPORADIC_SERVER);
        }
    }
    
    #define PyType_HasFeature( t , f ) ( ( ( t ) . tp_flags & ( f ) ) != 0 )

    


    static if(!is(typeof(_POSIX_THREAD_SAFE_FUNCTIONS))) {
        private enum enumMixinStr__POSIX_THREAD_SAFE_FUNCTIONS = `enum _POSIX_THREAD_SAFE_FUNCTIONS = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_SAFE_FUNCTIONS); }))) {
            mixin(enumMixinStr__POSIX_THREAD_SAFE_FUNCTIONS);
        }
    }
    
    #ifdef _POSIX_THREAD_PROCESS_SHARED
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_PROCESS_SHARED))) {
        private enum enumMixinStr__POSIX_THREAD_PROCESS_SHARED = `enum _POSIX_THREAD_PROCESS_SHARED = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PROCESS_SHARED);
        }
    }
    
    #ifdef _POSIX_THREAD_PRIORITY_SCHEDULING
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__POSIX_THREAD_PRIORITY_SCHEDULING = `enum _POSIX_THREAD_PRIORITY_SCHEDULING = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PRIORITY_SCHEDULING);
        }
    }
    
    #define _Py_Dealloc( op ) _Py_Dealloc_inline ( op )

    

    

    


    static if(!is(typeof(_POSIX_THREAD_PRIO_PROTECT))) {
        private enum enumMixinStr__POSIX_THREAD_PRIO_PROTECT = `enum _POSIX_THREAD_PRIO_PROTECT = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PRIO_PROTECT); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PRIO_PROTECT);
        }
    }
    
    #ifdef _POSIX_THREAD_PRIO_INHERIT
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_PRIO_INHERIT))) {
        private enum enumMixinStr__POSIX_THREAD_PRIO_INHERIT = `enum _POSIX_THREAD_PRIO_INHERIT = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PRIO_INHERIT); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PRIO_INHERIT);
        }
    }
    
    #ifdef _POSIX_THREAD_CPUTIME
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_CPUTIME))) {
        private enum enumMixinStr__POSIX_THREAD_CPUTIME = `enum _POSIX_THREAD_CPUTIME = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_CPUTIME); }))) {
            mixin(enumMixinStr__POSIX_THREAD_CPUTIME);
        }
    }
    
    #ifdef _POSIX_THREAD_ATTR_STACKSIZE
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_ATTR_STACKSIZE))) {
        private enum enumMixinStr__POSIX_THREAD_ATTR_STACKSIZE = `enum _POSIX_THREAD_ATTR_STACKSIZE = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKSIZE); }))) {
            mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKSIZE);
        }
    }
    
    #ifdef _POSIX_THREAD_ATTR_STACKADDR
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_ATTR_STACKADDR))) {
        private enum enumMixinStr__POSIX_THREAD_ATTR_STACKADDR = `enum _POSIX_THREAD_ATTR_STACKADDR = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKADDR); }))) {
            mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKADDR);
        }
    }
    
    #ifdef _POSIX_SYNCHRONIZED_IO
    
    #endif
    static if(!is(typeof(_POSIX_SYNCHRONIZED_IO))) {
        private enum enumMixinStr__POSIX_SYNCHRONIZED_IO = `enum _POSIX_SYNCHRONIZED_IO = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYNCHRONIZED_IO); }))) {
            mixin(enumMixinStr__POSIX_SYNCHRONIZED_IO);
        }
    }
    
    #ifdef _POSIX_SPORADIC_SERVER
    
    #endif
    static if(!is(typeof(_POSIX_SPORADIC_SERVER))) {
        private enum enumMixinStr__POSIX_SPORADIC_SERVER = `enum _POSIX_SPORADIC_SERVER = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__POSIX_SPORADIC_SERVER);
        }
    }
    
    #ifdef _POSIX_SPIN_LOCKS
    
    #endif
    static if(!is(typeof(_POSIX_SPIN_LOCKS))) {
        private enum enumMixinStr__POSIX_SPIN_LOCKS = `enum _POSIX_SPIN_LOCKS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SPIN_LOCKS); }))) {
            mixin(enumMixinStr__POSIX_SPIN_LOCKS);
        }
    }
    
    #ifdef _POSIX_SPAWN
    
    #endif
    static if(!is(typeof(_POSIX_SPAWN))) {
        private enum enumMixinStr__POSIX_SPAWN = `enum _POSIX_SPAWN = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SPAWN); }))) {
            mixin(enumMixinStr__POSIX_SPAWN);
        }
    }
    
    #ifdef _POSIX_SHELL
    
    #endif
    static if(!is(typeof(_POSIX_SHELL))) {
        private enum enumMixinStr__POSIX_SHELL = `enum _POSIX_SHELL = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SHELL); }))) {
            mixin(enumMixinStr__POSIX_SHELL);
        }
    }
    
    #ifdef _POSIX_SHARED_MEMORY_OBJECTS
    
    #endif
    static if(!is(typeof(_POSIX_SHARED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__POSIX_SHARED_MEMORY_OBJECTS = `enum _POSIX_SHARED_MEMORY_OBJECTS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SHARED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__POSIX_SHARED_MEMORY_OBJECTS);
        }
    }
    
    #ifdef _POSIX_SEMAPHORES
    
    #endif
    static if(!is(typeof(_POSIX_SEMAPHORES))) {
        private enum enumMixinStr__POSIX_SEMAPHORES = `enum _POSIX_SEMAPHORES = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEMAPHORES); }))) {
            mixin(enumMixinStr__POSIX_SEMAPHORES);
        }
    }
    
    #ifdef _POSIX_SAVED_IDS
    
    #endif
    static if(!is(typeof(_POSIX_SAVED_IDS))) {
        private enum enumMixinStr__POSIX_SAVED_IDS = `enum _POSIX_SAVED_IDS = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SAVED_IDS); }))) {
            mixin(enumMixinStr__POSIX_SAVED_IDS);
        }
    }
    
    #ifdef _POSIX_REGEXP
    
    #endif
    static if(!is(typeof(_POSIX_REGEXP))) {
        private enum enumMixinStr__POSIX_REGEXP = `enum _POSIX_REGEXP = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_REGEXP); }))) {
            mixin(enumMixinStr__POSIX_REGEXP);
        }
    }
    
    #define _PyObject_ASSERT_FROM( obj , expr , msg , filename , lineno , func ) ( ( expr ) ? cast( void ) ( 0 ) : _PyObject_AssertFailed ( ( obj ) , Py_STRINGIFY ( expr ) , ( msg ) , ( filename ) , ( lineno ) , ( func ) ) )

    

    

    

    


    static if(!is(typeof(_POSIX_REALTIME_SIGNALS))) {
        private enum enumMixinStr__POSIX_REALTIME_SIGNALS = `enum _POSIX_REALTIME_SIGNALS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_REALTIME_SIGNALS); }))) {
            mixin(enumMixinStr__POSIX_REALTIME_SIGNALS);
        }
    }
    
    #ifdef _POSIX_READER_WRITER_LOCKS
    
    #endif
    static if(!is(typeof(_POSIX_READER_WRITER_LOCKS))) {
        private enum enumMixinStr__POSIX_READER_WRITER_LOCKS = `enum _POSIX_READER_WRITER_LOCKS = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_READER_WRITER_LOCKS); }))) {
            mixin(enumMixinStr__POSIX_READER_WRITER_LOCKS);
        }
    }
    
    #ifdef _POSIX_RAW_SOCKETS
    
    #endif
    static if(!is(typeof(_POSIX_RAW_SOCKETS))) {
        private enum enumMixinStr__POSIX_RAW_SOCKETS = `enum _POSIX_RAW_SOCKETS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RAW_SOCKETS); }))) {
            mixin(enumMixinStr__POSIX_RAW_SOCKETS);
        }
    }
    
    #ifdef _POSIX_PRIORITY_SCHEDULING
    
    #endif
    static if(!is(typeof(_POSIX_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__POSIX_PRIORITY_SCHEDULING = `enum _POSIX_PRIORITY_SCHEDULING = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__POSIX_PRIORITY_SCHEDULING);
        }
    }
    
    #ifdef _POSIX_PRIORITIZED_IO
    
    #endif
    static if(!is(typeof(_POSIX_PRIORITIZED_IO))) {
        private enum enumMixinStr__POSIX_PRIORITIZED_IO = `enum _POSIX_PRIORITIZED_IO = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PRIORITIZED_IO); }))) {
            mixin(enumMixinStr__POSIX_PRIORITIZED_IO);
        }
    }
    
    #ifdef _POSIX_NO_TRUNC
    
    #endif
    static if(!is(typeof(_POSIX_NO_TRUNC))) {
        private enum enumMixinStr__POSIX_NO_TRUNC = `enum _POSIX_NO_TRUNC = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NO_TRUNC); }))) {
            mixin(enumMixinStr__POSIX_NO_TRUNC);
        }
    }
    
    #ifdef _POSIX_MONOTONIC_CLOCK
    
    #endif
    static if(!is(typeof(_POSIX_MONOTONIC_CLOCK))) {
        private enum enumMixinStr__POSIX_MONOTONIC_CLOCK = `enum _POSIX_MONOTONIC_CLOCK = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MONOTONIC_CLOCK); }))) {
            mixin(enumMixinStr__POSIX_MONOTONIC_CLOCK);
        }
    }
    
    #ifdef _POSIX_MESSAGE_PASSING
    
    #endif
    static if(!is(typeof(_POSIX_MESSAGE_PASSING))) {
        private enum enumMixinStr__POSIX_MESSAGE_PASSING = `enum _POSIX_MESSAGE_PASSING = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MESSAGE_PASSING); }))) {
            mixin(enumMixinStr__POSIX_MESSAGE_PASSING);
        }
    }
    
    #ifdef _POSIX_MEMORY_PROTECTION
    
    #endif
    static if(!is(typeof(_POSIX_MEMORY_PROTECTION))) {
        private enum enumMixinStr__POSIX_MEMORY_PROTECTION = `enum _POSIX_MEMORY_PROTECTION = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MEMORY_PROTECTION); }))) {
            mixin(enumMixinStr__POSIX_MEMORY_PROTECTION);
        }
    }
    
    #ifdef _POSIX_MEMLOCK_RANGE
    
    #endif
    static if(!is(typeof(_POSIX_MEMLOCK_RANGE))) {
        private enum enumMixinStr__POSIX_MEMLOCK_RANGE = `enum _POSIX_MEMLOCK_RANGE = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MEMLOCK_RANGE); }))) {
            mixin(enumMixinStr__POSIX_MEMLOCK_RANGE);
        }
    }
    
    #ifdef _POSIX_MEMLOCK
    
    #endif
    static if(!is(typeof(_POSIX_MEMLOCK))) {
        private enum enumMixinStr__POSIX_MEMLOCK = `enum _POSIX_MEMLOCK = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MEMLOCK); }))) {
            mixin(enumMixinStr__POSIX_MEMLOCK);
        }
    }
    
    #ifdef _POSIX_MAPPED_FILES
    
    #endif
    static if(!is(typeof(_POSIX_MAPPED_FILES))) {
        private enum enumMixinStr__POSIX_MAPPED_FILES = `enum _POSIX_MAPPED_FILES = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAPPED_FILES); }))) {
            mixin(enumMixinStr__POSIX_MAPPED_FILES);
        }
    }
    
    #ifdef _POSIX_JOB_CONTROL
    
    #endif
    static if(!is(typeof(_POSIX_JOB_CONTROL))) {
        private enum enumMixinStr__POSIX_JOB_CONTROL = `enum _POSIX_JOB_CONTROL = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_JOB_CONTROL); }))) {
            mixin(enumMixinStr__POSIX_JOB_CONTROL);
        }
    }
    
    #ifdef _POSIX_IPV6
    
    #endif
    static if(!is(typeof(_POSIX_IPV6))) {
        private enum enumMixinStr__POSIX_IPV6 = `enum _POSIX_IPV6 = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_IPV6); }))) {
            mixin(enumMixinStr__POSIX_IPV6);
        }
    }
    
    #ifdef _POSIX_FSYNC
    
    #endif
    static if(!is(typeof(_POSIX_FSYNC))) {
        private enum enumMixinStr__POSIX_FSYNC = `enum _POSIX_FSYNC = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_FSYNC); }))) {
            mixin(enumMixinStr__POSIX_FSYNC);
        }
    }
    
    #ifdef _POSIX_CPUTIME
    
    #endif
    static if(!is(typeof(_POSIX_CPUTIME))) {
        private enum enumMixinStr__POSIX_CPUTIME = `enum _POSIX_CPUTIME = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CPUTIME); }))) {
            mixin(enumMixinStr__POSIX_CPUTIME);
        }
    }
    
    #ifdef _POSIX_CLOCK_SELECTION
    
    #endif
    static if(!is(typeof(_POSIX_CLOCK_SELECTION))) {
        private enum enumMixinStr__POSIX_CLOCK_SELECTION = `enum _POSIX_CLOCK_SELECTION = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CLOCK_SELECTION); }))) {
            mixin(enumMixinStr__POSIX_CLOCK_SELECTION);
        }
    }
    
    #ifdef _POSIX_CHOWN_RESTRICTED
    
    #endif
    static if(!is(typeof(_POSIX_CHOWN_RESTRICTED))) {
        private enum enumMixinStr__POSIX_CHOWN_RESTRICTED = `enum _POSIX_CHOWN_RESTRICTED = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CHOWN_RESTRICTED); }))) {
            mixin(enumMixinStr__POSIX_CHOWN_RESTRICTED);
        }
    }
    
    #ifdef _POSIX_BARRIERS
    
    #endif
    static if(!is(typeof(_POSIX_BARRIERS))) {
        private enum enumMixinStr__POSIX_BARRIERS = `enum _POSIX_BARRIERS = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_BARRIERS); }))) {
            mixin(enumMixinStr__POSIX_BARRIERS);
        }
    }
    
    #ifdef _POSIX_ASYNCHRONOUS_IO
    
    #endif
    static if(!is(typeof(_POSIX_ASYNCHRONOUS_IO))) {
        private enum enumMixinStr__POSIX_ASYNCHRONOUS_IO = `enum _POSIX_ASYNCHRONOUS_IO = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ASYNCHRONOUS_IO); }))) {
            mixin(enumMixinStr__POSIX_ASYNCHRONOUS_IO);
        }
    }
    
    #define PyObject_IS_GC( o ) ( PyType_IS_GC ( Py_TYPE ( o ) ) && ( Py_TYPE ( o ) . tp_is_gc == null || Py_TYPE ( o ) . tp_is_gc ( o ) ) )

    


    static if(!is(typeof(_POSIX_ADVISORY_INFO))) {
        private enum enumMixinStr__POSIX_ADVISORY_INFO = `enum _POSIX_ADVISORY_INFO = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ADVISORY_INFO); }))) {
            mixin(enumMixinStr__POSIX_ADVISORY_INFO);
        }
    }
    
    #ifdef _XOPEN_XCU_VERSION
    
    #endif
    static if(!is(typeof(_XOPEN_XCU_VERSION))) {
        private enum enumMixinStr__XOPEN_XCU_VERSION = `enum _XOPEN_XCU_VERSION = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_XCU_VERSION); }))) {
            mixin(enumMixinStr__XOPEN_XCU_VERSION);
        }
    }
    
    #define _Py_AS_GC( o ) ( cast( PyGC_Head * ) ( o ) - 1 )

    

    

    


    static if(!is(typeof(_PyGC_PREV_MASK_FINALIZED))) {
        private enum enumMixinStr__PyGC_PREV_MASK_FINALIZED = `enum _PyGC_PREV_MASK_FINALIZED = ( 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__PyGC_PREV_MASK_FINALIZED); }))) {
            mixin(enumMixinStr__PyGC_PREV_MASK_FINALIZED);
        }
    }
    
    #ifdef _PyGC_PREV_MASK_COLLECTING
    
    #endif
    static if(!is(typeof(_PyGC_PREV_MASK_COLLECTING))) {
        private enum enumMixinStr__PyGC_PREV_MASK_COLLECTING = `enum _PyGC_PREV_MASK_COLLECTING = ( 2 );`;
        static if(is(typeof({ mixin(enumMixinStr__PyGC_PREV_MASK_COLLECTING); }))) {
            mixin(enumMixinStr__PyGC_PREV_MASK_COLLECTING);
        }
    }
    
    #ifdef _PyGC_PREV_SHIFT
    
    #endif
    static if(!is(typeof(_PyGC_PREV_SHIFT))) {
        private enum enumMixinStr__PyGC_PREV_SHIFT = `enum _PyGC_PREV_SHIFT = ( 2 );`;
        static if(is(typeof({ mixin(enumMixinStr__PyGC_PREV_SHIFT); }))) {
            mixin(enumMixinStr__PyGC_PREV_SHIFT);
        }
    }
    
    #ifdef _PyGC_PREV_MASK
    
    #endif
    static if(!is(typeof(_PyGC_PREV_MASK))) {
        private enum enumMixinStr__PyGC_PREV_MASK = `enum _PyGC_PREV_MASK = ( ( cast( uintptr_t ) - 1 ) << ( 2 ) );`;
        static if(is(typeof({ mixin(enumMixinStr__PyGC_PREV_MASK); }))) {
            mixin(enumMixinStr__PyGC_PREV_MASK);
        }
    }
    
    #define _PyGCHead_NEXT( g ) ( cast( PyGC_Head * ) ( g ) . _gc_next )

    

    

    

    

    

    

    

    


    static if(!is(typeof(_XOPEN_VERSION))) {
        private enum enumMixinStr__XOPEN_VERSION = `enum _XOPEN_VERSION = 600;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_VERSION); }))) {
            mixin(enumMixinStr__XOPEN_VERSION);
        }
    }
    
    #ifdef STDERR_FILENO
    
    #endif
    static if(!is(typeof(STDERR_FILENO))) {
        private enum enumMixinStr_STDERR_FILENO = `enum STDERR_FILENO = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_STDERR_FILENO); }))) {
            mixin(enumMixinStr_STDERR_FILENO);
        }
    }
    
    #ifdef STDOUT_FILENO
    
    #endif
    static if(!is(typeof(STDOUT_FILENO))) {
        private enum enumMixinStr_STDOUT_FILENO = `enum STDOUT_FILENO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_STDOUT_FILENO); }))) {
            mixin(enumMixinStr_STDOUT_FILENO);
        }
    }
    
    #ifdef STDIN_FILENO
    
    #endif
    static if(!is(typeof(STDIN_FILENO))) {
        private enum enumMixinStr_STDIN_FILENO = `enum STDIN_FILENO = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_STDIN_FILENO); }))) {
            mixin(enumMixinStr_STDIN_FILENO);
        }
    }
    
    #define PyType_SUPPORTS_WEAKREFS( t ) ( ( t ) . tp_weaklistoffset > 0 )

    

    

    


    static if(!is(typeof(PyException_HEAD))) {
        private enum enumMixinStr_PyException_HEAD = `enum PyException_HEAD = PyObject_HEAD PyObject * dict ; PyObject * args ; PyObject * traceback ; PyObject * context ; PyObject * cause ; char suppress_context ;;`;
        static if(is(typeof({ mixin(enumMixinStr_PyException_HEAD); }))) {
            mixin(enumMixinStr_PyException_HEAD);
        }
    }
    
    #ifdef TIME_UTC
    
    #endif
    static if(!is(typeof(TIME_UTC))) {
        private enum enumMixinStr_TIME_UTC = `enum TIME_UTC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TIME_UTC); }))) {
            mixin(enumMixinStr_TIME_UTC);
        }
    }
    
    #ifdef CLOCK_THREAD_CPUTIME_ID
    
    #endif
    static if(!is(typeof(CLOCK_THREAD_CPUTIME_ID))) {
        private enum enumMixinStr_CLOCK_THREAD_CPUTIME_ID = `enum CLOCK_THREAD_CPUTIME_ID = _CLOCK_THREAD_CPUTIME_ID;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_THREAD_CPUTIME_ID); }))) {
            mixin(enumMixinStr_CLOCK_THREAD_CPUTIME_ID);
        }
    }
    
    #ifdef CLOCK_PROCESS_CPUTIME_ID
    
    #endif
    static if(!is(typeof(CLOCK_PROCESS_CPUTIME_ID))) {
        private enum enumMixinStr_CLOCK_PROCESS_CPUTIME_ID = `enum CLOCK_PROCESS_CPUTIME_ID = _CLOCK_PROCESS_CPUTIME_ID;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_PROCESS_CPUTIME_ID); }))) {
            mixin(enumMixinStr_CLOCK_PROCESS_CPUTIME_ID);
        }
    }
    
    #ifdef CLOCK_UPTIME_RAW_APPROX
    
    #endif
    static if(!is(typeof(CLOCK_UPTIME_RAW_APPROX))) {
        private enum enumMixinStr_CLOCK_UPTIME_RAW_APPROX = `enum CLOCK_UPTIME_RAW_APPROX = _CLOCK_UPTIME_RAW_APPROX;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_UPTIME_RAW_APPROX); }))) {
            mixin(enumMixinStr_CLOCK_UPTIME_RAW_APPROX);
        }
    }
    
    #ifdef CLOCK_UPTIME_RAW
    
    #endif
    static if(!is(typeof(CLOCK_UPTIME_RAW))) {
        private enum enumMixinStr_CLOCK_UPTIME_RAW = `enum CLOCK_UPTIME_RAW = _CLOCK_UPTIME_RAW;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_UPTIME_RAW); }))) {
            mixin(enumMixinStr_CLOCK_UPTIME_RAW);
        }
    }
    
    #ifdef CLOCK_MONOTONIC_RAW_APPROX
    
    #endif
    static if(!is(typeof(CLOCK_MONOTONIC_RAW_APPROX))) {
        private enum enumMixinStr_CLOCK_MONOTONIC_RAW_APPROX = `enum CLOCK_MONOTONIC_RAW_APPROX = _CLOCK_MONOTONIC_RAW_APPROX;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC_RAW_APPROX); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC_RAW_APPROX);
        }
    }
    
    #ifdef CLOCK_MONOTONIC_RAW
    
    #endif
    static if(!is(typeof(CLOCK_MONOTONIC_RAW))) {
        private enum enumMixinStr_CLOCK_MONOTONIC_RAW = `enum CLOCK_MONOTONIC_RAW = _CLOCK_MONOTONIC_RAW;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC_RAW); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC_RAW);
        }
    }
    
    #ifdef CLOCK_MONOTONIC
    
    #endif
    static if(!is(typeof(CLOCK_MONOTONIC))) {
        private enum enumMixinStr_CLOCK_MONOTONIC = `enum CLOCK_MONOTONIC = _CLOCK_MONOTONIC;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC);
        }
    }
    
    #ifdef CLOCK_REALTIME
    
    #endif
    static if(!is(typeof(CLOCK_REALTIME))) {
        private enum enumMixinStr_CLOCK_REALTIME = `enum CLOCK_REALTIME = _CLOCK_REALTIME;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME);
        }
    }
    
    #ifdef __CLOCK_AVAILABILITY
    
    #endif
    static if(!is(typeof(__CLOCK_AVAILABILITY))) {
        private enum enumMixinStr___CLOCK_AVAILABILITY = `enum __CLOCK_AVAILABILITY = __OSX_AVAILABLE ( 10.12 ) __IOS_AVAILABLE ( 10.0 ) __TVOS_AVAILABLE ( 10.0 ) __WATCHOS_AVAILABLE ( 3.0 );`;
        static if(is(typeof({ mixin(enumMixinStr___CLOCK_AVAILABILITY); }))) {
            mixin(enumMixinStr___CLOCK_AVAILABILITY);
        }
    }
    
    #ifdef CLOCKS_PER_SEC
    
    #endif
    static if(!is(typeof(CLOCKS_PER_SEC))) {
        private enum enumMixinStr_CLOCKS_PER_SEC = `enum CLOCKS_PER_SEC = 1000000;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCKS_PER_SEC); }))) {
            mixin(enumMixinStr_CLOCKS_PER_SEC);
        }
    }
    
    #define _TIME_H_ 

    


    static if(!is(typeof(w_stopsig))) {
        private enum enumMixinStr_w_stopsig = `enum w_stopsig = w_S . w_Stopsig;`;
        static if(is(typeof({ mixin(enumMixinStr_w_stopsig); }))) {
            mixin(enumMixinStr_w_stopsig);
        }
    }
    
    #ifdef w_stopval
    
    #endif
    static if(!is(typeof(w_stopval))) {
        private enum enumMixinStr_w_stopval = `enum w_stopval = w_S . w_Stopval;`;
        static if(is(typeof({ mixin(enumMixinStr_w_stopval); }))) {
            mixin(enumMixinStr_w_stopval);
        }
    }
    
    #ifdef w_retcode
    
    #endif
    static if(!is(typeof(w_retcode))) {
        private enum enumMixinStr_w_retcode = `enum w_retcode = w_T . w_Retcode;`;
        static if(is(typeof({ mixin(enumMixinStr_w_retcode); }))) {
            mixin(enumMixinStr_w_retcode);
        }
    }
    
    #ifdef w_coredump
    
    #endif
    static if(!is(typeof(w_coredump))) {
        private enum enumMixinStr_w_coredump = `enum w_coredump = w_T . w_Coredump;`;
        static if(is(typeof({ mixin(enumMixinStr_w_coredump); }))) {
            mixin(enumMixinStr_w_coredump);
        }
    }
    
    #ifdef w_termsig
    
    #endif
    static if(!is(typeof(w_termsig))) {
        private enum enumMixinStr_w_termsig = `enum w_termsig = w_T . w_Termsig;`;
        static if(is(typeof({ mixin(enumMixinStr_w_termsig); }))) {
            mixin(enumMixinStr_w_termsig);
        }
    }
    
    #ifdef WAIT_MYPGRP
    
    #endif
    static if(!is(typeof(WAIT_MYPGRP))) {
        private enum enumMixinStr_WAIT_MYPGRP = `enum WAIT_MYPGRP = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_WAIT_MYPGRP); }))) {
            mixin(enumMixinStr_WAIT_MYPGRP);
        }
    }
    
    #ifdef WAIT_ANY
    
    #endif
    static if(!is(typeof(WAIT_ANY))) {
        private enum enumMixinStr_WAIT_ANY = `enum WAIT_ANY = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_WAIT_ANY); }))) {
            mixin(enumMixinStr_WAIT_ANY);
        }
    }
    
    #ifdef WNOWAIT
    
    #endif
    static if(!is(typeof(WNOWAIT))) {
        private enum enumMixinStr_WNOWAIT = `enum WNOWAIT = 0x00000020;`;
        static if(is(typeof({ mixin(enumMixinStr_WNOWAIT); }))) {
            mixin(enumMixinStr_WNOWAIT);
        }
    }
    
    #ifdef WCONTINUED
    
    #endif
    static if(!is(typeof(WCONTINUED))) {
        private enum enumMixinStr_WCONTINUED = `enum WCONTINUED = 0x00000010;`;
        static if(is(typeof({ mixin(enumMixinStr_WCONTINUED); }))) {
            mixin(enumMixinStr_WCONTINUED);
        }
    }
    
    #ifdef WSTOPPED
    
    #endif
    static if(!is(typeof(WSTOPPED))) {
        private enum enumMixinStr_WSTOPPED = `enum WSTOPPED = 0x00000008;`;
        static if(is(typeof({ mixin(enumMixinStr_WSTOPPED); }))) {
            mixin(enumMixinStr_WSTOPPED);
        }
    }
    
    #ifdef WEXITED
    
    #endif
    static if(!is(typeof(WEXITED))) {
        private enum enumMixinStr_WEXITED = `enum WEXITED = 0x00000004;`;
        static if(is(typeof({ mixin(enumMixinStr_WEXITED); }))) {
            mixin(enumMixinStr_WEXITED);
        }
    }
    
    #define W_STOPCODE( sig ) ( ( sig ) << 8 | _WSTOPPED )

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(_WSTOPPED))) {
        private enum enumMixinStr__WSTOPPED = `enum _WSTOPPED = std.conv.octal!177;`;
        static if(is(typeof({ mixin(enumMixinStr__WSTOPPED); }))) {
            mixin(enumMixinStr__WSTOPPED);
        }
    }
    
    #define _WSTATUS( x ) ( _W_INT ( x ) & 0177 )

    


    static if(!is(typeof(WCOREFLAG))) {
        private enum enumMixinStr_WCOREFLAG = `enum WCOREFLAG = std.conv.octal!200;`;
        static if(is(typeof({ mixin(enumMixinStr_WCOREFLAG); }))) {
            mixin(enumMixinStr_WCOREFLAG);
        }
    }
    
    #define _W_INT( w ) ( * cast( int * ) & ( w ) )

    


    static if(!is(typeof(WUNTRACED))) {
        private enum enumMixinStr_WUNTRACED = `enum WUNTRACED = 0x00000002;`;
        static if(is(typeof({ mixin(enumMixinStr_WUNTRACED); }))) {
            mixin(enumMixinStr_WUNTRACED);
        }
    }
    
    #ifdef WNOHANG
    
    #endif
    static if(!is(typeof(WNOHANG))) {
        private enum enumMixinStr_WNOHANG = `enum WNOHANG = 0x00000001;`;
        static if(is(typeof({ mixin(enumMixinStr_WNOHANG); }))) {
            mixin(enumMixinStr_WNOHANG);
        }
    }
    
    #define _SYS_WAIT_H_ 

    


    static if(!is(typeof(_CS_PATH))) {
        private enum enumMixinStr__CS_PATH = `enum _CS_PATH = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_PATH); }))) {
            mixin(enumMixinStr__CS_PATH);
        }
    }
    
    #ifdef _PC_MIN_HOLE_SIZE
    
    #endif
    static if(!is(typeof(_PC_MIN_HOLE_SIZE))) {
        private enum enumMixinStr__PC_MIN_HOLE_SIZE = `enum _PC_MIN_HOLE_SIZE = 27;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_MIN_HOLE_SIZE); }))) {
            mixin(enumMixinStr__PC_MIN_HOLE_SIZE);
        }
    }
    
    #ifdef _PC_XATTR_SIZE_BITS
    
    #endif
    static if(!is(typeof(_PC_XATTR_SIZE_BITS))) {
        private enum enumMixinStr__PC_XATTR_SIZE_BITS = `enum _PC_XATTR_SIZE_BITS = 26;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_XATTR_SIZE_BITS); }))) {
            mixin(enumMixinStr__PC_XATTR_SIZE_BITS);
        }
    }
    
    #ifdef _PC_SYNC_IO
    
    #endif
    static if(!is(typeof(_PC_SYNC_IO))) {
        private enum enumMixinStr__PC_SYNC_IO = `enum _PC_SYNC_IO = 25;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_SYNC_IO); }))) {
            mixin(enumMixinStr__PC_SYNC_IO);
        }
    }
    
    #ifdef _PC_SYMLINK_MAX
    
    #endif
    static if(!is(typeof(_PC_SYMLINK_MAX))) {
        private enum enumMixinStr__PC_SYMLINK_MAX = `enum _PC_SYMLINK_MAX = 24;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_SYMLINK_MAX); }))) {
            mixin(enumMixinStr__PC_SYMLINK_MAX);
        }
    }
    
    #ifdef _PC_REC_XFER_ALIGN
    
    #endif
    static if(!is(typeof(_PC_REC_XFER_ALIGN))) {
        private enum enumMixinStr__PC_REC_XFER_ALIGN = `enum _PC_REC_XFER_ALIGN = 23;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_XFER_ALIGN); }))) {
            mixin(enumMixinStr__PC_REC_XFER_ALIGN);
        }
    }
    
    #ifdef _PC_REC_MIN_XFER_SIZE
    
    #endif
    static if(!is(typeof(_PC_REC_MIN_XFER_SIZE))) {
        private enum enumMixinStr__PC_REC_MIN_XFER_SIZE = `enum _PC_REC_MIN_XFER_SIZE = 22;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_MIN_XFER_SIZE); }))) {
            mixin(enumMixinStr__PC_REC_MIN_XFER_SIZE);
        }
    }
    
    #ifdef _PC_REC_MAX_XFER_SIZE
    
    #endif
    static if(!is(typeof(_PC_REC_MAX_XFER_SIZE))) {
        private enum enumMixinStr__PC_REC_MAX_XFER_SIZE = `enum _PC_REC_MAX_XFER_SIZE = 21;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_MAX_XFER_SIZE); }))) {
            mixin(enumMixinStr__PC_REC_MAX_XFER_SIZE);
        }
    }
    
    #ifdef _PC_REC_INCR_XFER_SIZE
    
    #endif
    static if(!is(typeof(_PC_REC_INCR_XFER_SIZE))) {
        private enum enumMixinStr__PC_REC_INCR_XFER_SIZE = `enum _PC_REC_INCR_XFER_SIZE = 20;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_INCR_XFER_SIZE); }))) {
            mixin(enumMixinStr__PC_REC_INCR_XFER_SIZE);
        }
    }
    
    #ifdef _PC_PRIO_IO
    
    #endif
    static if(!is(typeof(_PC_PRIO_IO))) {
        private enum enumMixinStr__PC_PRIO_IO = `enum _PC_PRIO_IO = 19;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_PRIO_IO); }))) {
            mixin(enumMixinStr__PC_PRIO_IO);
        }
    }
    
    #ifdef _PC_FILESIZEBITS
    
    #endif
    static if(!is(typeof(_PC_FILESIZEBITS))) {
        private enum enumMixinStr__PC_FILESIZEBITS = `enum _PC_FILESIZEBITS = 18;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_FILESIZEBITS); }))) {
            mixin(enumMixinStr__PC_FILESIZEBITS);
        }
    }
    
    #ifdef _PC_ASYNC_IO
    
    #endif
    static if(!is(typeof(_PC_ASYNC_IO))) {
        private enum enumMixinStr__PC_ASYNC_IO = `enum _PC_ASYNC_IO = 17;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_ASYNC_IO); }))) {
            mixin(enumMixinStr__PC_ASYNC_IO);
        }
    }
    
    #ifdef _PC_ALLOC_SIZE_MIN
    
    #endif
    static if(!is(typeof(_PC_ALLOC_SIZE_MIN))) {
        private enum enumMixinStr__PC_ALLOC_SIZE_MIN = `enum _PC_ALLOC_SIZE_MIN = 16;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_ALLOC_SIZE_MIN); }))) {
            mixin(enumMixinStr__PC_ALLOC_SIZE_MIN);
        }
    }
    
    #ifdef _PC_2_SYMLINKS
    
    #endif
    static if(!is(typeof(_PC_2_SYMLINKS))) {
        private enum enumMixinStr__PC_2_SYMLINKS = `enum _PC_2_SYMLINKS = 15;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_2_SYMLINKS); }))) {
            mixin(enumMixinStr__PC_2_SYMLINKS);
        }
    }
    
    #ifdef _PC_AUTH_OPAQUE_NP
    
    #endif
    static if(!is(typeof(_PC_AUTH_OPAQUE_NP))) {
        private enum enumMixinStr__PC_AUTH_OPAQUE_NP = `enum _PC_AUTH_OPAQUE_NP = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_AUTH_OPAQUE_NP); }))) {
            mixin(enumMixinStr__PC_AUTH_OPAQUE_NP);
        }
    }
    
    #ifdef _PC_EXTENDED_SECURITY_NP
    
    #endif
    static if(!is(typeof(_PC_EXTENDED_SECURITY_NP))) {
        private enum enumMixinStr__PC_EXTENDED_SECURITY_NP = `enum _PC_EXTENDED_SECURITY_NP = 13;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_EXTENDED_SECURITY_NP); }))) {
            mixin(enumMixinStr__PC_EXTENDED_SECURITY_NP);
        }
    }
    
    #ifdef _PC_CASE_PRESERVING
    
    #endif
    static if(!is(typeof(_PC_CASE_PRESERVING))) {
        private enum enumMixinStr__PC_CASE_PRESERVING = `enum _PC_CASE_PRESERVING = 12;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_CASE_PRESERVING); }))) {
            mixin(enumMixinStr__PC_CASE_PRESERVING);
        }
    }
    
    #ifdef _PC_CASE_SENSITIVE
    
    #endif
    static if(!is(typeof(_PC_CASE_SENSITIVE))) {
        private enum enumMixinStr__PC_CASE_SENSITIVE = `enum _PC_CASE_SENSITIVE = 11;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_CASE_SENSITIVE); }))) {
            mixin(enumMixinStr__PC_CASE_SENSITIVE);
        }
    }
    
    #ifdef _PC_NAME_CHARS_MAX
    
    #endif
    static if(!is(typeof(_PC_NAME_CHARS_MAX))) {
        private enum enumMixinStr__PC_NAME_CHARS_MAX = `enum _PC_NAME_CHARS_MAX = 10;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_NAME_CHARS_MAX); }))) {
            mixin(enumMixinStr__PC_NAME_CHARS_MAX);
        }
    }
    
    #ifdef _PC_VDISABLE
    
    #endif
    static if(!is(typeof(_PC_VDISABLE))) {
        private enum enumMixinStr__PC_VDISABLE = `enum _PC_VDISABLE = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_VDISABLE); }))) {
            mixin(enumMixinStr__PC_VDISABLE);
        }
    }
    
    #ifdef _PC_NO_TRUNC
    
    #endif
    static if(!is(typeof(_PC_NO_TRUNC))) {
        private enum enumMixinStr__PC_NO_TRUNC = `enum _PC_NO_TRUNC = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_NO_TRUNC); }))) {
            mixin(enumMixinStr__PC_NO_TRUNC);
        }
    }
    
    #ifdef _PC_CHOWN_RESTRICTED
    
    #endif
    static if(!is(typeof(_PC_CHOWN_RESTRICTED))) {
        private enum enumMixinStr__PC_CHOWN_RESTRICTED = `enum _PC_CHOWN_RESTRICTED = 7;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_CHOWN_RESTRICTED); }))) {
            mixin(enumMixinStr__PC_CHOWN_RESTRICTED);
        }
    }
    
    #ifdef _PC_PIPE_BUF
    
    #endif
    static if(!is(typeof(_PC_PIPE_BUF))) {
        private enum enumMixinStr__PC_PIPE_BUF = `enum _PC_PIPE_BUF = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_PIPE_BUF); }))) {
            mixin(enumMixinStr__PC_PIPE_BUF);
        }
    }
    
    #ifdef _PC_PATH_MAX
    
    #endif
    static if(!is(typeof(_PC_PATH_MAX))) {
        private enum enumMixinStr__PC_PATH_MAX = `enum _PC_PATH_MAX = 5;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_PATH_MAX); }))) {
            mixin(enumMixinStr__PC_PATH_MAX);
        }
    }
    
    #ifdef _PC_NAME_MAX
    
    #endif
    static if(!is(typeof(_PC_NAME_MAX))) {
        private enum enumMixinStr__PC_NAME_MAX = `enum _PC_NAME_MAX = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_NAME_MAX); }))) {
            mixin(enumMixinStr__PC_NAME_MAX);
        }
    }
    
    #ifdef _PC_MAX_INPUT
    
    #endif
    static if(!is(typeof(_PC_MAX_INPUT))) {
        private enum enumMixinStr__PC_MAX_INPUT = `enum _PC_MAX_INPUT = 3;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_MAX_INPUT); }))) {
            mixin(enumMixinStr__PC_MAX_INPUT);
        }
    }
    
    #ifdef _PC_MAX_CANON
    
    #endif
    static if(!is(typeof(_PC_MAX_CANON))) {
        private enum enumMixinStr__PC_MAX_CANON = `enum _PC_MAX_CANON = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_MAX_CANON); }))) {
            mixin(enumMixinStr__PC_MAX_CANON);
        }
    }
    
    #ifdef _PC_LINK_MAX
    
    #endif
    static if(!is(typeof(_PC_LINK_MAX))) {
        private enum enumMixinStr__PC_LINK_MAX = `enum _PC_LINK_MAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_LINK_MAX); }))) {
            mixin(enumMixinStr__PC_LINK_MAX);
        }
    }
    
    #ifdef ACCESSX_MAX_TABLESIZE
    
    #endif
    static if(!is(typeof(ACCESSX_MAX_TABLESIZE))) {
        private enum enumMixinStr_ACCESSX_MAX_TABLESIZE = `enum ACCESSX_MAX_TABLESIZE = ( 16 * 1024 );`;
        static if(is(typeof({ mixin(enumMixinStr_ACCESSX_MAX_TABLESIZE); }))) {
            mixin(enumMixinStr_ACCESSX_MAX_TABLESIZE);
        }
    }
    
    #ifdef ACCESSX_MAX_DESCRIPTORS
    
    #endif
    static if(!is(typeof(ACCESSX_MAX_DESCRIPTORS))) {
        private enum enumMixinStr_ACCESSX_MAX_DESCRIPTORS = `enum ACCESSX_MAX_DESCRIPTORS = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ACCESSX_MAX_DESCRIPTORS); }))) {
            mixin(enumMixinStr_ACCESSX_MAX_DESCRIPTORS);
        }
    }
    
    #ifdef L_XTND
    
    #endif
    static if(!is(typeof(L_XTND))) {
        private enum enumMixinStr_L_XTND = `enum L_XTND = SEEK_END;`;
        static if(is(typeof({ mixin(enumMixinStr_L_XTND); }))) {
            mixin(enumMixinStr_L_XTND);
        }
    }
    
    #ifdef L_INCR
    
    #endif
    static if(!is(typeof(L_INCR))) {
        private enum enumMixinStr_L_INCR = `enum L_INCR = SEEK_CUR;`;
        static if(is(typeof({ mixin(enumMixinStr_L_INCR); }))) {
            mixin(enumMixinStr_L_INCR);
        }
    }
    
    #ifdef L_SET
    
    #endif
    static if(!is(typeof(L_SET))) {
        private enum enumMixinStr_L_SET = `enum L_SET = SEEK_SET;`;
        static if(is(typeof({ mixin(enumMixinStr_L_SET); }))) {
            mixin(enumMixinStr_L_SET);
        }
    }
    
    #ifdef _ACCESS_EXTENDED_MASK
    
    #endif
    static if(!is(typeof(_ACCESS_EXTENDED_MASK))) {
        private enum enumMixinStr__ACCESS_EXTENDED_MASK = `enum _ACCESS_EXTENDED_MASK = ( _READ_OK | _WRITE_OK | _EXECUTE_OK | _DELETE_OK | _APPEND_OK | _RMFILE_OK | _REXT_OK | _WEXT_OK | _RATTR_OK | _WATTR_OK | _RPERM_OK | _WPERM_OK | _CHOWN_OK );`;
        static if(is(typeof({ mixin(enumMixinStr__ACCESS_EXTENDED_MASK); }))) {
            mixin(enumMixinStr__ACCESS_EXTENDED_MASK);
        }
    }
    
    #ifdef _CHOWN_OK
    
    #endif
    static if(!is(typeof(_CHOWN_OK))) {
        private enum enumMixinStr__CHOWN_OK = `enum _CHOWN_OK = ( 1 << 21 );`;
        static if(is(typeof({ mixin(enumMixinStr__CHOWN_OK); }))) {
            mixin(enumMixinStr__CHOWN_OK);
        }
    }
    
    #ifdef _WPERM_OK
    
    #endif
    static if(!is(typeof(_WPERM_OK))) {
        private enum enumMixinStr__WPERM_OK = `enum _WPERM_OK = ( 1 << 20 );`;
        static if(is(typeof({ mixin(enumMixinStr__WPERM_OK); }))) {
            mixin(enumMixinStr__WPERM_OK);
        }
    }
    
    #ifdef _RPERM_OK
    
    #endif
    static if(!is(typeof(_RPERM_OK))) {
        private enum enumMixinStr__RPERM_OK = `enum _RPERM_OK = ( 1 << 19 );`;
        static if(is(typeof({ mixin(enumMixinStr__RPERM_OK); }))) {
            mixin(enumMixinStr__RPERM_OK);
        }
    }
    
    #ifdef _WEXT_OK
    
    #endif
    static if(!is(typeof(_WEXT_OK))) {
        private enum enumMixinStr__WEXT_OK = `enum _WEXT_OK = ( 1 << 18 );`;
        static if(is(typeof({ mixin(enumMixinStr__WEXT_OK); }))) {
            mixin(enumMixinStr__WEXT_OK);
        }
    }
    
    #ifdef _REXT_OK
    
    #endif
    static if(!is(typeof(_REXT_OK))) {
        private enum enumMixinStr__REXT_OK = `enum _REXT_OK = ( 1 << 17 );`;
        static if(is(typeof({ mixin(enumMixinStr__REXT_OK); }))) {
            mixin(enumMixinStr__REXT_OK);
        }
    }
    
    #ifdef _WATTR_OK
    
    #endif
    static if(!is(typeof(_WATTR_OK))) {
        private enum enumMixinStr__WATTR_OK = `enum _WATTR_OK = ( 1 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr__WATTR_OK); }))) {
            mixin(enumMixinStr__WATTR_OK);
        }
    }
    
    #ifdef _RATTR_OK
    
    #endif
    static if(!is(typeof(_RATTR_OK))) {
        private enum enumMixinStr__RATTR_OK = `enum _RATTR_OK = ( 1 << 15 );`;
        static if(is(typeof({ mixin(enumMixinStr__RATTR_OK); }))) {
            mixin(enumMixinStr__RATTR_OK);
        }
    }
    
    #ifdef _RMFILE_OK
    
    #endif
    static if(!is(typeof(_RMFILE_OK))) {
        private enum enumMixinStr__RMFILE_OK = `enum _RMFILE_OK = ( 1 << 14 );`;
        static if(is(typeof({ mixin(enumMixinStr__RMFILE_OK); }))) {
            mixin(enumMixinStr__RMFILE_OK);
        }
    }
    
    #ifdef _APPEND_OK
    
    #endif
    static if(!is(typeof(_APPEND_OK))) {
        private enum enumMixinStr__APPEND_OK = `enum _APPEND_OK = ( 1 << 13 );`;
        static if(is(typeof({ mixin(enumMixinStr__APPEND_OK); }))) {
            mixin(enumMixinStr__APPEND_OK);
        }
    }
    
    #ifdef _DELETE_OK
    
    #endif
    static if(!is(typeof(_DELETE_OK))) {
        private enum enumMixinStr__DELETE_OK = `enum _DELETE_OK = ( 1 << 12 );`;
        static if(is(typeof({ mixin(enumMixinStr__DELETE_OK); }))) {
            mixin(enumMixinStr__DELETE_OK);
        }
    }
    
    #ifdef _EXECUTE_OK
    
    #endif
    static if(!is(typeof(_EXECUTE_OK))) {
        private enum enumMixinStr__EXECUTE_OK = `enum _EXECUTE_OK = ( 1 << 11 );`;
        static if(is(typeof({ mixin(enumMixinStr__EXECUTE_OK); }))) {
            mixin(enumMixinStr__EXECUTE_OK);
        }
    }
    
    #ifdef _WRITE_OK
    
    #endif
    static if(!is(typeof(_WRITE_OK))) {
        private enum enumMixinStr__WRITE_OK = `enum _WRITE_OK = ( 1 << 10 );`;
        static if(is(typeof({ mixin(enumMixinStr__WRITE_OK); }))) {
            mixin(enumMixinStr__WRITE_OK);
        }
    }
    
    #ifdef _READ_OK
    
    #endif
    static if(!is(typeof(_READ_OK))) {
        private enum enumMixinStr__READ_OK = `enum _READ_OK = ( 1 << 9 );`;
        static if(is(typeof({ mixin(enumMixinStr__READ_OK); }))) {
            mixin(enumMixinStr__READ_OK);
        }
    }
    
    #ifdef R_OK
    
    #endif
    static if(!is(typeof(R_OK))) {
        private enum enumMixinStr_R_OK = `enum R_OK = ( 1 << 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_R_OK); }))) {
            mixin(enumMixinStr_R_OK);
        }
    }
    
    #ifdef W_OK
    
    #endif
    static if(!is(typeof(W_OK))) {
        private enum enumMixinStr_W_OK = `enum W_OK = ( 1 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_W_OK); }))) {
            mixin(enumMixinStr_W_OK);
        }
    }
    
    #ifdef X_OK
    
    #endif
    static if(!is(typeof(X_OK))) {
        private enum enumMixinStr_X_OK = `enum X_OK = ( 1 << 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_X_OK); }))) {
            mixin(enumMixinStr_X_OK);
        }
    }
    
    #ifdef F_OK
    
    #endif
    static if(!is(typeof(F_OK))) {
        private enum enumMixinStr_F_OK = `enum F_OK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_F_OK); }))) {
            mixin(enumMixinStr_F_OK);
        }
    }
    
    #ifdef _POSIX_THREAD_KEYS_MAX
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_KEYS_MAX))) {
        private enum enumMixinStr__POSIX_THREAD_KEYS_MAX = `enum _POSIX_THREAD_KEYS_MAX = 128;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr__POSIX_THREAD_KEYS_MAX);
        }
    }
    
    #ifdef _POSIX2_VERSION
    
    #endif
    static if(!is(typeof(_POSIX2_VERSION))) {
        private enum enumMixinStr__POSIX2_VERSION = `enum _POSIX2_VERSION = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_VERSION); }))) {
            mixin(enumMixinStr__POSIX2_VERSION);
        }
    }
    
    #ifdef _POSIX_VERSION
    
    #endif
    static if(!is(typeof(_POSIX_VERSION))) {
        private enum enumMixinStr__POSIX_VERSION = `enum _POSIX_VERSION = 200112L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_VERSION); }))) {
            mixin(enumMixinStr__POSIX_VERSION);
        }
    }
    
    #define _SYS_UNISTD_H_ 

    

    

    

    

    

    

    


    static if(!is(typeof(DST_CAN))) {
        private enum enumMixinStr_DST_CAN = `enum DST_CAN = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_CAN); }))) {
            mixin(enumMixinStr_DST_CAN);
        }
    }
    
    #ifdef DST_EET
    
    #endif
    static if(!is(typeof(DST_EET))) {
        private enum enumMixinStr_DST_EET = `enum DST_EET = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_EET); }))) {
            mixin(enumMixinStr_DST_EET);
        }
    }
    
    #ifdef DST_MET
    
    #endif
    static if(!is(typeof(DST_MET))) {
        private enum enumMixinStr_DST_MET = `enum DST_MET = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_MET); }))) {
            mixin(enumMixinStr_DST_MET);
        }
    }
    
    #ifdef DST_WET
    
    #endif
    static if(!is(typeof(DST_WET))) {
        private enum enumMixinStr_DST_WET = `enum DST_WET = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_WET); }))) {
            mixin(enumMixinStr_DST_WET);
        }
    }
    
    #ifdef DST_AUST
    
    #endif
    static if(!is(typeof(DST_AUST))) {
        private enum enumMixinStr_DST_AUST = `enum DST_AUST = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_AUST); }))) {
            mixin(enumMixinStr_DST_AUST);
        }
    }
    
    #ifdef DST_USA
    
    #endif
    static if(!is(typeof(DST_USA))) {
        private enum enumMixinStr_DST_USA = `enum DST_USA = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_USA); }))) {
            mixin(enumMixinStr_DST_USA);
        }
    }
    
    #ifdef DST_NONE
    
    #endif
    static if(!is(typeof(DST_NONE))) {
        private enum enumMixinStr_DST_NONE = `enum DST_NONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DST_NONE); }))) {
            mixin(enumMixinStr_DST_NONE);
        }
    }
    
    #define TIMESPEC_TO_TIMEVAL( tv , ts ) { ( tv ) . tv_sec = ( ts ) . tv_sec ; ( tv ) . tv_usec = ( ts ) . tv_nsec / 1000 ; }

    



    


    static if(!is(typeof(ITIMER_PROF))) {
        private enum enumMixinStr_ITIMER_PROF = `enum ITIMER_PROF = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ITIMER_PROF); }))) {
            mixin(enumMixinStr_ITIMER_PROF);
        }
    }
    
    #ifdef ITIMER_VIRTUAL
    
    #endif
    static if(!is(typeof(ITIMER_VIRTUAL))) {
        private enum enumMixinStr_ITIMER_VIRTUAL = `enum ITIMER_VIRTUAL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ITIMER_VIRTUAL); }))) {
            mixin(enumMixinStr_ITIMER_VIRTUAL);
        }
    }
    
    #ifdef ITIMER_REAL
    
    #endif
    static if(!is(typeof(ITIMER_REAL))) {
        private enum enumMixinStr_ITIMER_REAL = `enum ITIMER_REAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_ITIMER_REAL); }))) {
            mixin(enumMixinStr_ITIMER_REAL);
        }
    }
    
    #define _SYS_TIME_H_ 

    


    static if(!is(typeof(NZERO))) {
        private enum enumMixinStr_NZERO = `enum NZERO = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_NZERO); }))) {
            mixin(enumMixinStr_NZERO);
        }
    }
    
    #ifdef RE_DUP_MAX
    
    #endif
    static if(!is(typeof(RE_DUP_MAX))) {
        private enum enumMixinStr_RE_DUP_MAX = `enum RE_DUP_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_RE_DUP_MAX); }))) {
            mixin(enumMixinStr_RE_DUP_MAX);
        }
    }
    
    #ifdef LINE_MAX
    
    #endif
    static if(!is(typeof(LINE_MAX))) {
        private enum enumMixinStr_LINE_MAX = `enum LINE_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_LINE_MAX); }))) {
            mixin(enumMixinStr_LINE_MAX);
        }
    }
    
    #ifdef EXPR_NEST_MAX
    
    #endif
    static if(!is(typeof(EXPR_NEST_MAX))) {
        private enum enumMixinStr_EXPR_NEST_MAX = `enum EXPR_NEST_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr_EXPR_NEST_MAX);
        }
    }
    
    #ifdef EQUIV_CLASS_MAX
    
    #endif
    static if(!is(typeof(EQUIV_CLASS_MAX))) {
        private enum enumMixinStr_EQUIV_CLASS_MAX = `enum EQUIV_CLASS_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_EQUIV_CLASS_MAX); }))) {
            mixin(enumMixinStr_EQUIV_CLASS_MAX);
        }
    }
    
    #ifdef COLL_WEIGHTS_MAX
    
    #endif
    static if(!is(typeof(COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr_COLL_WEIGHTS_MAX = `enum COLL_WEIGHTS_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr_COLL_WEIGHTS_MAX);
        }
    }
    
    #ifdef CHARCLASS_NAME_MAX
    
    #endif
    static if(!is(typeof(CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr_CHARCLASS_NAME_MAX = `enum CHARCLASS_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr_CHARCLASS_NAME_MAX);
        }
    }
    
    #ifdef BC_STRING_MAX
    
    #endif
    static if(!is(typeof(BC_STRING_MAX))) {
        private enum enumMixinStr_BC_STRING_MAX = `enum BC_STRING_MAX = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_STRING_MAX); }))) {
            mixin(enumMixinStr_BC_STRING_MAX);
        }
    }
    
    #ifdef BC_SCALE_MAX
    
    #endif
    static if(!is(typeof(BC_SCALE_MAX))) {
        private enum enumMixinStr_BC_SCALE_MAX = `enum BC_SCALE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr_BC_SCALE_MAX);
        }
    }
    
    #ifdef BC_DIM_MAX
    
    #endif
    static if(!is(typeof(BC_DIM_MAX))) {
        private enum enumMixinStr_BC_DIM_MAX = `enum BC_DIM_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_DIM_MAX); }))) {
            mixin(enumMixinStr_BC_DIM_MAX);
        }
    }
    
    #ifdef BC_BASE_MAX
    
    #endif
    static if(!is(typeof(BC_BASE_MAX))) {
        private enum enumMixinStr_BC_BASE_MAX = `enum BC_BASE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_BASE_MAX); }))) {
            mixin(enumMixinStr_BC_BASE_MAX);
        }
    }
    
    #ifdef PIPE_BUF
    
    #endif
    static if(!is(typeof(PIPE_BUF))) {
        private enum enumMixinStr_PIPE_BUF = `enum PIPE_BUF = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_PIPE_BUF); }))) {
            mixin(enumMixinStr_PIPE_BUF);
        }
    }
    
    #ifdef PATH_MAX
    
    #endif
    static if(!is(typeof(PATH_MAX))) {
        private enum enumMixinStr_PATH_MAX = `enum PATH_MAX = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_PATH_MAX); }))) {
            mixin(enumMixinStr_PATH_MAX);
        }
    }
    
    #ifdef OPEN_MAX
    
    #endif
    static if(!is(typeof(OPEN_MAX))) {
        private enum enumMixinStr_OPEN_MAX = `enum OPEN_MAX = 10240;`;
        static if(is(typeof({ mixin(enumMixinStr_OPEN_MAX); }))) {
            mixin(enumMixinStr_OPEN_MAX);
        }
    }
    
    #ifdef UID_MAX
    
    #endif
    static if(!is(typeof(UID_MAX))) {
        private enum enumMixinStr_UID_MAX = `enum UID_MAX = 2147483647U;`;
        static if(is(typeof({ mixin(enumMixinStr_UID_MAX); }))) {
            mixin(enumMixinStr_UID_MAX);
        }
    }
    
    #ifdef NGROUPS_MAX
    
    #endif
    static if(!is(typeof(NGROUPS_MAX))) {
        private enum enumMixinStr_NGROUPS_MAX = `enum NGROUPS_MAX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_NGROUPS_MAX); }))) {
            mixin(enumMixinStr_NGROUPS_MAX);
        }
    }
    
    #ifdef NAME_MAX
    
    #endif
    static if(!is(typeof(NAME_MAX))) {
        private enum enumMixinStr_NAME_MAX = `enum NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_NAME_MAX); }))) {
            mixin(enumMixinStr_NAME_MAX);
        }
    }
    
    #ifdef MAX_INPUT
    
    #endif
    static if(!is(typeof(MAX_INPUT))) {
        private enum enumMixinStr_MAX_INPUT = `enum MAX_INPUT = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_INPUT); }))) {
            mixin(enumMixinStr_MAX_INPUT);
        }
    }
    
    #ifdef MAX_CANON
    
    #endif
    static if(!is(typeof(MAX_CANON))) {
        private enum enumMixinStr_MAX_CANON = `enum MAX_CANON = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_CANON); }))) {
            mixin(enumMixinStr_MAX_CANON);
        }
    }
    
    #ifdef LINK_MAX
    
    #endif
    static if(!is(typeof(LINK_MAX))) {
        private enum enumMixinStr_LINK_MAX = `enum LINK_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr_LINK_MAX); }))) {
            mixin(enumMixinStr_LINK_MAX);
        }
    }
    
    #ifdef GID_MAX
    
    #endif
    static if(!is(typeof(GID_MAX))) {
        private enum enumMixinStr_GID_MAX = `enum GID_MAX = 2147483647U;`;
        static if(is(typeof({ mixin(enumMixinStr_GID_MAX); }))) {
            mixin(enumMixinStr_GID_MAX);
        }
    }
    
    #ifdef CHILD_MAX
    
    #endif
    static if(!is(typeof(CHILD_MAX))) {
        private enum enumMixinStr_CHILD_MAX = `enum CHILD_MAX = 266;`;
        static if(is(typeof({ mixin(enumMixinStr_CHILD_MAX); }))) {
            mixin(enumMixinStr_CHILD_MAX);
        }
    }
    
    #ifdef ARG_MAX
    
    #endif
    static if(!is(typeof(ARG_MAX))) {
        private enum enumMixinStr_ARG_MAX = `enum ARG_MAX = ( 256 * 1024 );`;
        static if(is(typeof({ mixin(enumMixinStr_ARG_MAX); }))) {
            mixin(enumMixinStr_ARG_MAX);
        }
    }
    
    #ifdef PyTrace_CALL
    
    #endif
    static if(!is(typeof(PyTrace_CALL))) {
        private enum enumMixinStr_PyTrace_CALL = `enum PyTrace_CALL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_CALL); }))) {
            mixin(enumMixinStr_PyTrace_CALL);
        }
    }
    
    #ifdef PyTrace_EXCEPTION
    
    #endif
    static if(!is(typeof(PyTrace_EXCEPTION))) {
        private enum enumMixinStr_PyTrace_EXCEPTION = `enum PyTrace_EXCEPTION = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_EXCEPTION); }))) {
            mixin(enumMixinStr_PyTrace_EXCEPTION);
        }
    }
    
    #ifdef PyTrace_LINE
    
    #endif
    static if(!is(typeof(PyTrace_LINE))) {
        private enum enumMixinStr_PyTrace_LINE = `enum PyTrace_LINE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_LINE); }))) {
            mixin(enumMixinStr_PyTrace_LINE);
        }
    }
    
    #ifdef PyTrace_RETURN
    
    #endif
    static if(!is(typeof(PyTrace_RETURN))) {
        private enum enumMixinStr_PyTrace_RETURN = `enum PyTrace_RETURN = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_RETURN); }))) {
            mixin(enumMixinStr_PyTrace_RETURN);
        }
    }
    
    #ifdef PyTrace_C_CALL
    
    #endif
    static if(!is(typeof(PyTrace_C_CALL))) {
        private enum enumMixinStr_PyTrace_C_CALL = `enum PyTrace_C_CALL = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_C_CALL); }))) {
            mixin(enumMixinStr_PyTrace_C_CALL);
        }
    }
    
    #ifdef PyTrace_C_EXCEPTION
    
    #endif
    static if(!is(typeof(PyTrace_C_EXCEPTION))) {
        private enum enumMixinStr_PyTrace_C_EXCEPTION = `enum PyTrace_C_EXCEPTION = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_C_EXCEPTION); }))) {
            mixin(enumMixinStr_PyTrace_C_EXCEPTION);
        }
    }
    
    #ifdef PyTrace_C_RETURN
    
    #endif
    static if(!is(typeof(PyTrace_C_RETURN))) {
        private enum enumMixinStr_PyTrace_C_RETURN = `enum PyTrace_C_RETURN = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_C_RETURN); }))) {
            mixin(enumMixinStr_PyTrace_C_RETURN);
        }
    }
    
    #ifdef PyTrace_OPCODE
    
    #endif
    static if(!is(typeof(PyTrace_OPCODE))) {
        private enum enumMixinStr_PyTrace_OPCODE = `enum PyTrace_OPCODE = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrace_OPCODE); }))) {
            mixin(enumMixinStr_PyTrace_OPCODE);
        }
    }
    
    #define _SYS_SYSLIMITS_H_ 

    


    static if(!is(typeof(RENAME_EXCL))) {
        private enum enumMixinStr_RENAME_EXCL = `enum RENAME_EXCL = 0x00000004;`;
        static if(is(typeof({ mixin(enumMixinStr_RENAME_EXCL); }))) {
            mixin(enumMixinStr_RENAME_EXCL);
        }
    }
    
    #ifdef RENAME_SWAP
    
    #endif
    static if(!is(typeof(RENAME_SWAP))) {
        private enum enumMixinStr_RENAME_SWAP = `enum RENAME_SWAP = 0x00000002;`;
        static if(is(typeof({ mixin(enumMixinStr_RENAME_SWAP); }))) {
            mixin(enumMixinStr_RENAME_SWAP);
        }
    }
    
    #ifdef RENAME_SECLUDE
    
    #endif
    static if(!is(typeof(RENAME_SECLUDE))) {
        private enum enumMixinStr_RENAME_SECLUDE = `enum RENAME_SECLUDE = 0x00000001;`;
        static if(is(typeof({ mixin(enumMixinStr_RENAME_SECLUDE); }))) {
            mixin(enumMixinStr_RENAME_SECLUDE);
        }
    }
    
    #define _SYS_STDIO_H_ 

    


    static if(!is(typeof(UTIME_OMIT))) {
        private enum enumMixinStr_UTIME_OMIT = `enum UTIME_OMIT = - 2;`;
        static if(is(typeof({ mixin(enumMixinStr_UTIME_OMIT); }))) {
            mixin(enumMixinStr_UTIME_OMIT);
        }
    }
    
    #ifdef UTIME_NOW
    
    #endif
    static if(!is(typeof(UTIME_NOW))) {
        private enum enumMixinStr_UTIME_NOW = `enum UTIME_NOW = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_UTIME_NOW); }))) {
            mixin(enumMixinStr_UTIME_NOW);
        }
    }
    
    #ifdef EF_IS_SPARSE
    
    #endif
    static if(!is(typeof(EF_IS_SPARSE))) {
        private enum enumMixinStr_EF_IS_SPARSE = `enum EF_IS_SPARSE = 0x00000010;`;
        static if(is(typeof({ mixin(enumMixinStr_EF_IS_SPARSE); }))) {
            mixin(enumMixinStr_EF_IS_SPARSE);
        }
    }
    
    #ifdef EF_IS_PURGEABLE
    
    #endif
    static if(!is(typeof(EF_IS_PURGEABLE))) {
        private enum enumMixinStr_EF_IS_PURGEABLE = `enum EF_IS_PURGEABLE = 0x00000008;`;
        static if(is(typeof({ mixin(enumMixinStr_EF_IS_PURGEABLE); }))) {
            mixin(enumMixinStr_EF_IS_PURGEABLE);
        }
    }
    
    #ifdef EF_IS_SYNC_ROOT
    
    #endif
    static if(!is(typeof(EF_IS_SYNC_ROOT))) {
        private enum enumMixinStr_EF_IS_SYNC_ROOT = `enum EF_IS_SYNC_ROOT = 0x00000004;`;
        static if(is(typeof({ mixin(enumMixinStr_EF_IS_SYNC_ROOT); }))) {
            mixin(enumMixinStr_EF_IS_SYNC_ROOT);
        }
    }
    
    #ifdef EF_NO_XATTRS
    
    #endif
    static if(!is(typeof(EF_NO_XATTRS))) {
        private enum enumMixinStr_EF_NO_XATTRS = `enum EF_NO_XATTRS = 0x00000002;`;
        static if(is(typeof({ mixin(enumMixinStr_EF_NO_XATTRS); }))) {
            mixin(enumMixinStr_EF_NO_XATTRS);
        }
    }
    
    #ifdef EF_MAY_SHARE_BLOCKS
    
    #endif
    static if(!is(typeof(EF_MAY_SHARE_BLOCKS))) {
        private enum enumMixinStr_EF_MAY_SHARE_BLOCKS = `enum EF_MAY_SHARE_BLOCKS = 0x00000001;`;
        static if(is(typeof({ mixin(enumMixinStr_EF_MAY_SHARE_BLOCKS); }))) {
            mixin(enumMixinStr_EF_MAY_SHARE_BLOCKS);
        }
    }
    
    #ifdef SF_DATALESS
    
    #endif
    static if(!is(typeof(SF_DATALESS))) {
        private enum enumMixinStr_SF_DATALESS = `enum SF_DATALESS = 0x40000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_DATALESS); }))) {
            mixin(enumMixinStr_SF_DATALESS);
        }
    }
    
    #ifdef SF_FIRMLINK
    
    #endif
    static if(!is(typeof(SF_FIRMLINK))) {
        private enum enumMixinStr_SF_FIRMLINK = `enum SF_FIRMLINK = 0x00800000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_FIRMLINK); }))) {
            mixin(enumMixinStr_SF_FIRMLINK);
        }
    }
    
    #ifdef SF_NOUNLINK
    
    #endif
    static if(!is(typeof(SF_NOUNLINK))) {
        private enum enumMixinStr_SF_NOUNLINK = `enum SF_NOUNLINK = 0x00100000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_NOUNLINK); }))) {
            mixin(enumMixinStr_SF_NOUNLINK);
        }
    }
    
    #ifdef SF_RESTRICTED
    
    #endif
    static if(!is(typeof(SF_RESTRICTED))) {
        private enum enumMixinStr_SF_RESTRICTED = `enum SF_RESTRICTED = 0x00080000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_RESTRICTED); }))) {
            mixin(enumMixinStr_SF_RESTRICTED);
        }
    }
    
    #ifdef SF_APPEND
    
    #endif
    static if(!is(typeof(SF_APPEND))) {
        private enum enumMixinStr_SF_APPEND = `enum SF_APPEND = 0x00040000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_APPEND); }))) {
            mixin(enumMixinStr_SF_APPEND);
        }
    }
    
    #ifdef SF_IMMUTABLE
    
    #endif
    static if(!is(typeof(SF_IMMUTABLE))) {
        private enum enumMixinStr_SF_IMMUTABLE = `enum SF_IMMUTABLE = 0x00020000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_IMMUTABLE); }))) {
            mixin(enumMixinStr_SF_IMMUTABLE);
        }
    }
    
    #ifdef SF_ARCHIVED
    
    #endif
    static if(!is(typeof(SF_ARCHIVED))) {
        private enum enumMixinStr_SF_ARCHIVED = `enum SF_ARCHIVED = 0x00010000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_ARCHIVED); }))) {
            mixin(enumMixinStr_SF_ARCHIVED);
        }
    }
    
    #ifdef SF_SYNTHETIC
    
    #endif
    static if(!is(typeof(SF_SYNTHETIC))) {
        private enum enumMixinStr_SF_SYNTHETIC = `enum SF_SYNTHETIC = 0xc0000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_SYNTHETIC); }))) {
            mixin(enumMixinStr_SF_SYNTHETIC);
        }
    }
    
    #ifdef SF_SETTABLE
    
    #endif
    static if(!is(typeof(SF_SETTABLE))) {
        private enum enumMixinStr_SF_SETTABLE = `enum SF_SETTABLE = 0x3fff0000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_SETTABLE); }))) {
            mixin(enumMixinStr_SF_SETTABLE);
        }
    }
    
    #ifdef SF_SUPPORTED
    
    #endif
    static if(!is(typeof(SF_SUPPORTED))) {
        private enum enumMixinStr_SF_SUPPORTED = `enum SF_SUPPORTED = 0x009f0000;`;
        static if(is(typeof({ mixin(enumMixinStr_SF_SUPPORTED); }))) {
            mixin(enumMixinStr_SF_SUPPORTED);
        }
    }
    
    #ifdef UF_HIDDEN
    
    #endif
    static if(!is(typeof(UF_HIDDEN))) {
        private enum enumMixinStr_UF_HIDDEN = `enum UF_HIDDEN = 0x00008000;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_HIDDEN); }))) {
            mixin(enumMixinStr_UF_HIDDEN);
        }
    }
    
    #ifdef UF_DATAVAULT
    
    #endif
    static if(!is(typeof(UF_DATAVAULT))) {
        private enum enumMixinStr_UF_DATAVAULT = `enum UF_DATAVAULT = 0x00000080;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_DATAVAULT); }))) {
            mixin(enumMixinStr_UF_DATAVAULT);
        }
    }
    
    #ifdef UF_TRACKED
    
    #endif
    static if(!is(typeof(UF_TRACKED))) {
        private enum enumMixinStr_UF_TRACKED = `enum UF_TRACKED = 0x00000040;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_TRACKED); }))) {
            mixin(enumMixinStr_UF_TRACKED);
        }
    }
    
    #ifdef UF_COMPRESSED
    
    #endif
    static if(!is(typeof(UF_COMPRESSED))) {
        private enum enumMixinStr_UF_COMPRESSED = `enum UF_COMPRESSED = 0x00000020;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_COMPRESSED); }))) {
            mixin(enumMixinStr_UF_COMPRESSED);
        }
    }
    
    #ifdef UF_OPAQUE
    
    #endif
    static if(!is(typeof(UF_OPAQUE))) {
        private enum enumMixinStr_UF_OPAQUE = `enum UF_OPAQUE = 0x00000008;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_OPAQUE); }))) {
            mixin(enumMixinStr_UF_OPAQUE);
        }
    }
    
    #ifdef UF_APPEND
    
    #endif
    static if(!is(typeof(UF_APPEND))) {
        private enum enumMixinStr_UF_APPEND = `enum UF_APPEND = 0x00000004;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_APPEND); }))) {
            mixin(enumMixinStr_UF_APPEND);
        }
    }
    
    #ifdef UF_IMMUTABLE
    
    #endif
    static if(!is(typeof(UF_IMMUTABLE))) {
        private enum enumMixinStr_UF_IMMUTABLE = `enum UF_IMMUTABLE = 0x00000002;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_IMMUTABLE); }))) {
            mixin(enumMixinStr_UF_IMMUTABLE);
        }
    }
    
    #ifdef UF_NODUMP
    
    #endif
    static if(!is(typeof(UF_NODUMP))) {
        private enum enumMixinStr_UF_NODUMP = `enum UF_NODUMP = 0x00000001;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_NODUMP); }))) {
            mixin(enumMixinStr_UF_NODUMP);
        }
    }
    
    #ifdef UF_SETTABLE
    
    #endif
    static if(!is(typeof(UF_SETTABLE))) {
        private enum enumMixinStr_UF_SETTABLE = `enum UF_SETTABLE = 0x0000ffff;`;
        static if(is(typeof({ mixin(enumMixinStr_UF_SETTABLE); }))) {
            mixin(enumMixinStr_UF_SETTABLE);
        }
    }
    
    #ifdef S_BLKSIZE
    
    #endif
    static if(!is(typeof(S_BLKSIZE))) {
        private enum enumMixinStr_S_BLKSIZE = `enum S_BLKSIZE = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_S_BLKSIZE); }))) {
            mixin(enumMixinStr_S_BLKSIZE);
        }
    }
    
    #ifdef DEFFILEMODE
    
    #endif
    static if(!is(typeof(DEFFILEMODE))) {
        private enum enumMixinStr_DEFFILEMODE = `enum DEFFILEMODE = ( S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH );`;
        static if(is(typeof({ mixin(enumMixinStr_DEFFILEMODE); }))) {
            mixin(enumMixinStr_DEFFILEMODE);
        }
    }
    
    #ifdef ALLPERMS
    
    #endif
    static if(!is(typeof(ALLPERMS))) {
        private enum enumMixinStr_ALLPERMS = `enum ALLPERMS = ( S_ISUID | S_ISGID | S_ISTXT | S_IRWXU | S_IRWXG | S_IRWXO );`;
        static if(is(typeof({ mixin(enumMixinStr_ALLPERMS); }))) {
            mixin(enumMixinStr_ALLPERMS);
        }
    }
    
    #ifdef ACCESSPERMS
    
    #endif
    static if(!is(typeof(ACCESSPERMS))) {
        private enum enumMixinStr_ACCESSPERMS = `enum ACCESSPERMS = ( S_IRWXU | S_IRWXG | S_IRWXO );`;
        static if(is(typeof({ mixin(enumMixinStr_ACCESSPERMS); }))) {
            mixin(enumMixinStr_ACCESSPERMS);
        }
    }
    
    #define S_TYPEISTMO( buf ) ( 0 )

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(st_birthtime))) {
        private enum enumMixinStr_st_birthtime = `enum st_birthtime = st_birthtimespec . tv_sec;`;
        static if(is(typeof({ mixin(enumMixinStr_st_birthtime); }))) {
            mixin(enumMixinStr_st_birthtime);
        }
    }
    
    #ifdef st_ctime
    
    #endif
    static if(!is(typeof(st_ctime))) {
        private enum enumMixinStr_st_ctime = `enum st_ctime = st_ctimespec . tv_sec;`;
        static if(is(typeof({ mixin(enumMixinStr_st_ctime); }))) {
            mixin(enumMixinStr_st_ctime);
        }
    }
    
    #ifdef st_mtime
    
    #endif
    static if(!is(typeof(st_mtime))) {
        private enum enumMixinStr_st_mtime = `enum st_mtime = st_mtimespec . tv_sec;`;
        static if(is(typeof({ mixin(enumMixinStr_st_mtime); }))) {
            mixin(enumMixinStr_st_mtime);
        }
    }
    
    #ifdef st_atime
    
    #endif
    static if(!is(typeof(st_atime))) {
        private enum enumMixinStr_st_atime = `enum st_atime = st_atimespec . tv_sec;`;
        static if(is(typeof({ mixin(enumMixinStr_st_atime); }))) {
            mixin(enumMixinStr_st_atime);
        }
    }
    
    #ifdef __DARWIN_STRUCT_STAT64
    
    #endif
    static if(!is(typeof(__DARWIN_STRUCT_STAT64))) {
        private enum enumMixinStr___DARWIN_STRUCT_STAT64 = `enum __DARWIN_STRUCT_STAT64 = { dev_t st_dev ;  mode_t st_mode ;  nlink_t st_nlink ;  __darwin_ino64_t st_ino ;  uid_t st_uid ;  gid_t st_gid ;  dev_t st_rdev ;  __DARWIN_STRUCT_STAT64_TIMES off_t st_size ;  blkcnt_t st_blocks ;  blksize_t st_blksize ;  __uint32_t st_flags ;  __uint32_t st_gen ;  __int32_t st_lspare ;  __int64_t st_qspare [ 2 ] ;  };`;
        
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_STRUCT_STAT64); }))) {
            mixin(enumMixinStr___DARWIN_STRUCT_STAT64);
        }
    }
    

    #ifdef __DARWIN_STRUCT_STAT64_TIMES
    
    #endif
    static if(!is(typeof(__DARWIN_STRUCT_STAT64_TIMES))) {
        private enum enumMixinStr___DARWIN_STRUCT_STAT64_TIMES = `enum __DARWIN_STRUCT_STAT64_TIMES = timespec st_atimespec ;  timespec st_mtimespec ;  timespec st_ctimespec ;  timespec st_birthtimespec ;;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_STRUCT_STAT64_TIMES); }))) {
            mixin(enumMixinStr___DARWIN_STRUCT_STAT64_TIMES);
        }
    }
    
    #define _SYS_STAT_H_ 

    


    static if(!is(typeof(BADSIG))) {
        private enum enumMixinStr_BADSIG = `enum BADSIG = SIG_ERR;`;
        static if(is(typeof({ mixin(enumMixinStr_BADSIG); }))) {
            mixin(enumMixinStr_BADSIG);
        }
    }
    
    #define sigmask( m ) ( 1 << ( ( m ) - 1 ) )

    


    static if(!is(typeof(sv_onstack))) {
        private enum enumMixinStr_sv_onstack = `enum sv_onstack = sv_flags;`;
        static if(is(typeof({ mixin(enumMixinStr_sv_onstack); }))) {
            mixin(enumMixinStr_sv_onstack);
        }
    }
    
    #ifdef SV_SIGINFO
    
    #endif
    static if(!is(typeof(SV_SIGINFO))) {
        private enum enumMixinStr_SV_SIGINFO = `enum SV_SIGINFO = SA_SIGINFO;`;
        static if(is(typeof({ mixin(enumMixinStr_SV_SIGINFO); }))) {
            mixin(enumMixinStr_SV_SIGINFO);
        }
    }
    
    #ifdef SV_NOCLDSTOP
    
    #endif
    static if(!is(typeof(SV_NOCLDSTOP))) {
        private enum enumMixinStr_SV_NOCLDSTOP = `enum SV_NOCLDSTOP = SA_NOCLDSTOP;`;
        static if(is(typeof({ mixin(enumMixinStr_SV_NOCLDSTOP); }))) {
            mixin(enumMixinStr_SV_NOCLDSTOP);
        }
    }
    
    #ifdef SV_NODEFER
    
    #endif
    static if(!is(typeof(SV_NODEFER))) {
        private enum enumMixinStr_SV_NODEFER = `enum SV_NODEFER = SA_NODEFER;`;
        static if(is(typeof({ mixin(enumMixinStr_SV_NODEFER); }))) {
            mixin(enumMixinStr_SV_NODEFER);
        }
    }
    
    #ifdef SV_RESETHAND
    
    #endif
    static if(!is(typeof(SV_RESETHAND))) {
        private enum enumMixinStr_SV_RESETHAND = `enum SV_RESETHAND = SA_RESETHAND;`;
        static if(is(typeof({ mixin(enumMixinStr_SV_RESETHAND); }))) {
            mixin(enumMixinStr_SV_RESETHAND);
        }
    }
    
    #ifdef SV_INTERRUPT
    
    #endif
    static if(!is(typeof(SV_INTERRUPT))) {
        private enum enumMixinStr_SV_INTERRUPT = `enum SV_INTERRUPT = SA_RESTART;`;
        static if(is(typeof({ mixin(enumMixinStr_SV_INTERRUPT); }))) {
            mixin(enumMixinStr_SV_INTERRUPT);
        }
    }
    
    #ifdef SV_ONSTACK
    
    #endif
    static if(!is(typeof(SV_ONSTACK))) {
        private enum enumMixinStr_SV_ONSTACK = `enum SV_ONSTACK = SA_ONSTACK;`;
        static if(is(typeof({ mixin(enumMixinStr_SV_ONSTACK); }))) {
            mixin(enumMixinStr_SV_ONSTACK);
        }
    }
    
    #ifdef SIGSTKSZ
    
    #endif
    static if(!is(typeof(SIGSTKSZ))) {
        private enum enumMixinStr_SIGSTKSZ = `enum SIGSTKSZ = 131072;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSTKSZ); }))) {
            mixin(enumMixinStr_SIGSTKSZ);
        }
    }
    
    #ifdef MINSIGSTKSZ
    
    #endif
    static if(!is(typeof(MINSIGSTKSZ))) {
        private enum enumMixinStr_MINSIGSTKSZ = `enum MINSIGSTKSZ = 32768;`;
        static if(is(typeof({ mixin(enumMixinStr_MINSIGSTKSZ); }))) {
            mixin(enumMixinStr_MINSIGSTKSZ);
        }
    }
    
    #ifdef SS_DISABLE
    
    #endif
    static if(!is(typeof(SS_DISABLE))) {
        private enum enumMixinStr_SS_DISABLE = `enum SS_DISABLE = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_SS_DISABLE); }))) {
            mixin(enumMixinStr_SS_DISABLE);
        }
    }
    
    #ifdef SS_ONSTACK
    
    #endif
    static if(!is(typeof(SS_ONSTACK))) {
        private enum enumMixinStr_SS_ONSTACK = `enum SS_ONSTACK = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SS_ONSTACK); }))) {
            mixin(enumMixinStr_SS_ONSTACK);
        }
    }
    
    #ifdef SI_MESGQ
    
    #endif
    static if(!is(typeof(SI_MESGQ))) {
        private enum enumMixinStr_SI_MESGQ = `enum SI_MESGQ = 0x10005;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_MESGQ); }))) {
            mixin(enumMixinStr_SI_MESGQ);
        }
    }
    
    #ifdef SI_ASYNCIO
    
    #endif
    static if(!is(typeof(SI_ASYNCIO))) {
        private enum enumMixinStr_SI_ASYNCIO = `enum SI_ASYNCIO = 0x10004;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_ASYNCIO); }))) {
            mixin(enumMixinStr_SI_ASYNCIO);
        }
    }
    
    #ifdef SI_TIMER
    
    #endif
    static if(!is(typeof(SI_TIMER))) {
        private enum enumMixinStr_SI_TIMER = `enum SI_TIMER = 0x10003;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_TIMER); }))) {
            mixin(enumMixinStr_SI_TIMER);
        }
    }
    
    #ifdef SI_QUEUE
    
    #endif
    static if(!is(typeof(SI_QUEUE))) {
        private enum enumMixinStr_SI_QUEUE = `enum SI_QUEUE = 0x10002;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_QUEUE); }))) {
            mixin(enumMixinStr_SI_QUEUE);
        }
    }
    
    #ifdef SI_USER
    
    #endif
    static if(!is(typeof(SI_USER))) {
        private enum enumMixinStr_SI_USER = `enum SI_USER = 0x10001;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_USER); }))) {
            mixin(enumMixinStr_SI_USER);
        }
    }
    
    #define _PyTuple_CAST( op ) ( assert ( PyTuple_Check ( op ) ) , cast( PyTupleObject * ) ( op ) )

    

    

    

    


    static if(!is(typeof(SIG_SETMASK))) {
        private enum enumMixinStr_SIG_SETMASK = `enum SIG_SETMASK = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_SETMASK); }))) {
            mixin(enumMixinStr_SIG_SETMASK);
        }
    }
    
    #ifdef SIG_UNBLOCK
    
    #endif
    static if(!is(typeof(SIG_UNBLOCK))) {
        private enum enumMixinStr_SIG_UNBLOCK = `enum SIG_UNBLOCK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_UNBLOCK); }))) {
            mixin(enumMixinStr_SIG_UNBLOCK);
        }
    }
    
    #ifdef SIG_BLOCK
    
    #endif
    static if(!is(typeof(SIG_BLOCK))) {
        private enum enumMixinStr_SIG_BLOCK = `enum SIG_BLOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_BLOCK); }))) {
            mixin(enumMixinStr_SIG_BLOCK);
        }
    }
    
    #ifdef PY_UNICODE_TYPE
    
    #endif
    static if(!is(typeof(PY_UNICODE_TYPE))) {
        private enum enumMixinStr_PY_UNICODE_TYPE = `enum PY_UNICODE_TYPE = wchar_t;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_UNICODE_TYPE); }))) {
            mixin(enumMixinStr_PY_UNICODE_TYPE);
        }
    }
    
    #ifdef SA_USERSPACE_MASK
    
    #endif
    static if(!is(typeof(SA_USERSPACE_MASK))) {
        private enum enumMixinStr_SA_USERSPACE_MASK = `enum SA_USERSPACE_MASK = ( SA_ONSTACK | SA_RESTART | SA_RESETHAND | SA_NOCLDSTOP | SA_NODEFER | SA_NOCLDWAIT | SA_SIGINFO );`;
        static if(is(typeof({ mixin(enumMixinStr_SA_USERSPACE_MASK); }))) {
            mixin(enumMixinStr_SA_USERSPACE_MASK);
        }
    }
    
    #define Py_UNICODE_ISSPACE( ch ) ( ( ch ) < 128U ? _Py_ascii_whitespace [ ( ch ) ] : _PyUnicode_IsWhitespace ( ch ) )

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(SA_64REGSET))) {
        private enum enumMixinStr_SA_64REGSET = `enum SA_64REGSET = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_64REGSET); }))) {
            mixin(enumMixinStr_SA_64REGSET);
        }
    }
    
    #ifdef SA_USERTRAMP
    
    #endif
    static if(!is(typeof(SA_USERTRAMP))) {
        private enum enumMixinStr_SA_USERTRAMP = `enum SA_USERTRAMP = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_USERTRAMP); }))) {
            mixin(enumMixinStr_SA_USERTRAMP);
        }
    }
    
    #ifdef SA_SIGINFO
    
    #endif
    static if(!is(typeof(SA_SIGINFO))) {
        private enum enumMixinStr_SA_SIGINFO = `enum SA_SIGINFO = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_SIGINFO); }))) {
            mixin(enumMixinStr_SA_SIGINFO);
        }
    }
    
    #ifdef SA_NOCLDWAIT
    
    #endif
    static if(!is(typeof(SA_NOCLDWAIT))) {
        private enum enumMixinStr_SA_NOCLDWAIT = `enum SA_NOCLDWAIT = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NOCLDWAIT); }))) {
            mixin(enumMixinStr_SA_NOCLDWAIT);
        }
    }
    
    #ifdef SA_NODEFER
    
    #endif
    static if(!is(typeof(SA_NODEFER))) {
        private enum enumMixinStr_SA_NODEFER = `enum SA_NODEFER = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NODEFER); }))) {
            mixin(enumMixinStr_SA_NODEFER);
        }
    }
    
    #ifdef SA_NOCLDSTOP
    
    #endif
    static if(!is(typeof(SA_NOCLDSTOP))) {
        private enum enumMixinStr_SA_NOCLDSTOP = `enum SA_NOCLDSTOP = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NOCLDSTOP); }))) {
            mixin(enumMixinStr_SA_NOCLDSTOP);
        }
    }
    
    #ifdef SA_RESETHAND
    
    #endif
    static if(!is(typeof(SA_RESETHAND))) {
        private enum enumMixinStr_SA_RESETHAND = `enum SA_RESETHAND = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_RESETHAND); }))) {
            mixin(enumMixinStr_SA_RESETHAND);
        }
    }
    
    #ifdef SA_RESTART
    
    #endif
    static if(!is(typeof(SA_RESTART))) {
        private enum enumMixinStr_SA_RESTART = `enum SA_RESTART = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_RESTART); }))) {
            mixin(enumMixinStr_SA_RESTART);
        }
    }
    
    #ifdef SA_ONSTACK
    
    #endif
    static if(!is(typeof(SA_ONSTACK))) {
        private enum enumMixinStr_SA_ONSTACK = `enum SA_ONSTACK = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_ONSTACK); }))) {
            mixin(enumMixinStr_SA_ONSTACK);
        }
    }
    
    #define PyUnicode_WSTR_LENGTH( op ) ( PyUnicode_IS_COMPACT_ASCII ( op ) ? ( cast( PyASCIIObject * ) op ) . length : ( cast( PyCompactUnicodeObject * ) op ) . wstr_length )

    

    

    

    

    


    static if(!is(typeof(SSTATE_NOT_INTERNED))) {
        private enum enumMixinStr_SSTATE_NOT_INTERNED = `enum SSTATE_NOT_INTERNED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSTATE_NOT_INTERNED); }))) {
            mixin(enumMixinStr_SSTATE_NOT_INTERNED);
        }
    }
    
    #ifdef SSTATE_INTERNED_MORTAL
    
    #endif
    static if(!is(typeof(SSTATE_INTERNED_MORTAL))) {
        private enum enumMixinStr_SSTATE_INTERNED_MORTAL = `enum SSTATE_INTERNED_MORTAL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSTATE_INTERNED_MORTAL); }))) {
            mixin(enumMixinStr_SSTATE_INTERNED_MORTAL);
        }
    }
    
    #ifdef SSTATE_INTERNED_IMMORTAL
    
    #endif
    static if(!is(typeof(SSTATE_INTERNED_IMMORTAL))) {
        private enum enumMixinStr_SSTATE_INTERNED_IMMORTAL = `enum SSTATE_INTERNED_IMMORTAL = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSTATE_INTERNED_IMMORTAL); }))) {
            mixin(enumMixinStr_SSTATE_INTERNED_IMMORTAL);
        }
    }
    
    #define PyUnicode_IS_ASCII( op ) ( assert ( PyUnicode_Check ( op ) ) , assert ( PyUnicode_IS_READY ( op ) ) , ( cast( PyASCIIObject * ) op ) . state . ascii )

    

    

    


    static if(!is(typeof(sa_sigaction))) {
        private enum enumMixinStr_sa_sigaction = `enum sa_sigaction = __sigaction_u . __sa_sigaction;`;
        static if(is(typeof({ mixin(enumMixinStr_sa_sigaction); }))) {
            mixin(enumMixinStr_sa_sigaction);
        }
    }
    
    #define PyUnicode_1BYTE_DATA( op ) ( cast( Py_UCS1 * ) PyUnicode_DATA ( op ) )

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(sa_handler))) {
        private enum enumMixinStr_sa_handler = `enum sa_handler = __sigaction_u . __sa_handler;`;
        static if(is(typeof({ mixin(enumMixinStr_sa_handler); }))) {
            mixin(enumMixinStr_sa_handler);
        }
    }
    
    #ifdef POLL_HUP
    
    #endif
    static if(!is(typeof(POLL_HUP))) {
        private enum enumMixinStr_POLL_HUP = `enum POLL_HUP = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_HUP); }))) {
            mixin(enumMixinStr_POLL_HUP);
        }
    }
    
    #ifdef POLL_PRI
    
    #endif
    static if(!is(typeof(POLL_PRI))) {
        private enum enumMixinStr_POLL_PRI = `enum POLL_PRI = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_PRI); }))) {
            mixin(enumMixinStr_POLL_PRI);
        }
    }
    
    #ifdef POLL_ERR
    
    #endif
    static if(!is(typeof(POLL_ERR))) {
        private enum enumMixinStr_POLL_ERR = `enum POLL_ERR = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_ERR); }))) {
            mixin(enumMixinStr_POLL_ERR);
        }
    }
    
    #ifdef POLL_MSG
    
    #endif
    static if(!is(typeof(POLL_MSG))) {
        private enum enumMixinStr_POLL_MSG = `enum POLL_MSG = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_MSG); }))) {
            mixin(enumMixinStr_POLL_MSG);
        }
    }
    
    #ifdef POLL_OUT
    
    #endif
    static if(!is(typeof(POLL_OUT))) {
        private enum enumMixinStr_POLL_OUT = `enum POLL_OUT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_OUT); }))) {
            mixin(enumMixinStr_POLL_OUT);
        }
    }
    
    #ifdef POLL_IN
    
    #endif
    static if(!is(typeof(POLL_IN))) {
        private enum enumMixinStr_POLL_IN = `enum POLL_IN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_IN); }))) {
            mixin(enumMixinStr_POLL_IN);
        }
    }
    
    #ifdef CLD_CONTINUED
    
    #endif
    static if(!is(typeof(CLD_CONTINUED))) {
        private enum enumMixinStr_CLD_CONTINUED = `enum CLD_CONTINUED = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_CONTINUED); }))) {
            mixin(enumMixinStr_CLD_CONTINUED);
        }
    }
    
    #ifdef CLD_STOPPED
    
    #endif
    static if(!is(typeof(CLD_STOPPED))) {
        private enum enumMixinStr_CLD_STOPPED = `enum CLD_STOPPED = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_STOPPED); }))) {
            mixin(enumMixinStr_CLD_STOPPED);
        }
    }
    
    #ifdef CLD_TRAPPED
    
    #endif
    static if(!is(typeof(CLD_TRAPPED))) {
        private enum enumMixinStr_CLD_TRAPPED = `enum CLD_TRAPPED = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_TRAPPED); }))) {
            mixin(enumMixinStr_CLD_TRAPPED);
        }
    }
    
    #ifdef CLD_DUMPED
    
    #endif
    static if(!is(typeof(CLD_DUMPED))) {
        private enum enumMixinStr_CLD_DUMPED = `enum CLD_DUMPED = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_DUMPED); }))) {
            mixin(enumMixinStr_CLD_DUMPED);
        }
    }
    
    #ifdef CLD_KILLED
    
    #endif
    static if(!is(typeof(CLD_KILLED))) {
        private enum enumMixinStr_CLD_KILLED = `enum CLD_KILLED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_KILLED); }))) {
            mixin(enumMixinStr_CLD_KILLED);
        }
    }
    
    #ifdef CLD_EXITED
    
    #endif
    static if(!is(typeof(CLD_EXITED))) {
        private enum enumMixinStr_CLD_EXITED = `enum CLD_EXITED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_EXITED); }))) {
            mixin(enumMixinStr_CLD_EXITED);
        }
    }
    
    #ifdef CLD_NOOP
    
    #endif
    static if(!is(typeof(CLD_NOOP))) {
        private enum enumMixinStr_CLD_NOOP = `enum CLD_NOOP = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_NOOP); }))) {
            mixin(enumMixinStr_CLD_NOOP);
        }
    }
    
    #ifdef TRAP_TRACE
    
    #endif
    static if(!is(typeof(TRAP_TRACE))) {
        private enum enumMixinStr_TRAP_TRACE = `enum TRAP_TRACE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TRAP_TRACE); }))) {
            mixin(enumMixinStr_TRAP_TRACE);
        }
    }
    
    #ifdef TRAP_BRKPT
    
    #endif
    static if(!is(typeof(TRAP_BRKPT))) {
        private enum enumMixinStr_TRAP_BRKPT = `enum TRAP_BRKPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TRAP_BRKPT); }))) {
            mixin(enumMixinStr_TRAP_BRKPT);
        }
    }
    
    #ifdef BUS_OBJERR
    
    #endif
    static if(!is(typeof(BUS_OBJERR))) {
        private enum enumMixinStr_BUS_OBJERR = `enum BUS_OBJERR = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_OBJERR); }))) {
            mixin(enumMixinStr_BUS_OBJERR);
        }
    }
    
    #ifdef BUS_ADRERR
    
    #endif
    static if(!is(typeof(BUS_ADRERR))) {
        private enum enumMixinStr_BUS_ADRERR = `enum BUS_ADRERR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_ADRERR); }))) {
            mixin(enumMixinStr_BUS_ADRERR);
        }
    }
    
    #ifdef BUS_ADRALN
    
    #endif
    static if(!is(typeof(BUS_ADRALN))) {
        private enum enumMixinStr_BUS_ADRALN = `enum BUS_ADRALN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_ADRALN); }))) {
            mixin(enumMixinStr_BUS_ADRALN);
        }
    }
    
    #ifdef BUS_NOOP
    
    #endif
    static if(!is(typeof(BUS_NOOP))) {
        private enum enumMixinStr_BUS_NOOP = `enum BUS_NOOP = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_NOOP); }))) {
            mixin(enumMixinStr_BUS_NOOP);
        }
    }
    
    #ifdef SEGV_ACCERR
    
    #endif
    static if(!is(typeof(SEGV_ACCERR))) {
        private enum enumMixinStr_SEGV_ACCERR = `enum SEGV_ACCERR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_ACCERR); }))) {
            mixin(enumMixinStr_SEGV_ACCERR);
        }
    }
    
    #ifdef SEGV_MAPERR
    
    #endif
    static if(!is(typeof(SEGV_MAPERR))) {
        private enum enumMixinStr_SEGV_MAPERR = `enum SEGV_MAPERR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_MAPERR); }))) {
            mixin(enumMixinStr_SEGV_MAPERR);
        }
    }
    
    #ifdef SEGV_NOOP
    
    #endif
    static if(!is(typeof(SEGV_NOOP))) {
        private enum enumMixinStr_SEGV_NOOP = `enum SEGV_NOOP = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_NOOP); }))) {
            mixin(enumMixinStr_SEGV_NOOP);
        }
    }
    
    #ifdef FPE_INTOVF
    
    #endif
    static if(!is(typeof(FPE_INTOVF))) {
        private enum enumMixinStr_FPE_INTOVF = `enum FPE_INTOVF = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_INTOVF); }))) {
            mixin(enumMixinStr_FPE_INTOVF);
        }
    }
    
    #ifdef FPE_INTDIV
    
    #endif
    static if(!is(typeof(FPE_INTDIV))) {
        private enum enumMixinStr_FPE_INTDIV = `enum FPE_INTDIV = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_INTDIV); }))) {
            mixin(enumMixinStr_FPE_INTDIV);
        }
    }
    
    #ifdef FPE_FLTSUB
    
    #endif
    static if(!is(typeof(FPE_FLTSUB))) {
        private enum enumMixinStr_FPE_FLTSUB = `enum FPE_FLTSUB = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTSUB); }))) {
            mixin(enumMixinStr_FPE_FLTSUB);
        }
    }
    
    #ifdef FPE_FLTINV
    
    #endif
    static if(!is(typeof(FPE_FLTINV))) {
        private enum enumMixinStr_FPE_FLTINV = `enum FPE_FLTINV = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTINV); }))) {
            mixin(enumMixinStr_FPE_FLTINV);
        }
    }
    
    #ifdef FPE_FLTRES
    
    #endif
    static if(!is(typeof(FPE_FLTRES))) {
        private enum enumMixinStr_FPE_FLTRES = `enum FPE_FLTRES = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTRES); }))) {
            mixin(enumMixinStr_FPE_FLTRES);
        }
    }
    
    #ifdef FPE_FLTUND
    
    #endif
    static if(!is(typeof(FPE_FLTUND))) {
        private enum enumMixinStr_FPE_FLTUND = `enum FPE_FLTUND = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTUND); }))) {
            mixin(enumMixinStr_FPE_FLTUND);
        }
    }
    
    #ifdef FPE_FLTOVF
    
    #endif
    static if(!is(typeof(FPE_FLTOVF))) {
        private enum enumMixinStr_FPE_FLTOVF = `enum FPE_FLTOVF = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTOVF); }))) {
            mixin(enumMixinStr_FPE_FLTOVF);
        }
    }
    
    #ifdef FPE_FLTDIV
    
    #endif
    static if(!is(typeof(FPE_FLTDIV))) {
        private enum enumMixinStr_FPE_FLTDIV = `enum FPE_FLTDIV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTDIV); }))) {
            mixin(enumMixinStr_FPE_FLTDIV);
        }
    }
    
    #ifdef FPE_NOOP
    
    #endif
    static if(!is(typeof(FPE_NOOP))) {
        private enum enumMixinStr_FPE_NOOP = `enum FPE_NOOP = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_NOOP); }))) {
            mixin(enumMixinStr_FPE_NOOP);
        }
    }
    
    #ifdef ILL_BADSTK
    
    #endif
    static if(!is(typeof(ILL_BADSTK))) {
        private enum enumMixinStr_ILL_BADSTK = `enum ILL_BADSTK = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_BADSTK); }))) {
            mixin(enumMixinStr_ILL_BADSTK);
        }
    }
    
    #ifdef ILL_COPROC
    
    #endif
    static if(!is(typeof(ILL_COPROC))) {
        private enum enumMixinStr_ILL_COPROC = `enum ILL_COPROC = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_COPROC); }))) {
            mixin(enumMixinStr_ILL_COPROC);
        }
    }
    
    #ifdef ILL_PRVREG
    
    #endif
    static if(!is(typeof(ILL_PRVREG))) {
        private enum enumMixinStr_ILL_PRVREG = `enum ILL_PRVREG = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_PRVREG); }))) {
            mixin(enumMixinStr_ILL_PRVREG);
        }
    }
    
    #define _PyUnicodeWriter_Prepare( WRITER , LENGTH , MAXCHAR ) ( ( ( MAXCHAR ) <= ( WRITER ) . maxchar && ( LENGTH ) <= ( WRITER ) . size - ( WRITER ) . pos ) ? 0 : ( ( ( LENGTH ) == 0 ) ? 0 : _PyUnicodeWriter_PrepareInternal ( ( WRITER ) , ( LENGTH ) , ( MAXCHAR ) ) ) )

    


    static if(!is(typeof(ILL_ILLADR))) {
        private enum enumMixinStr_ILL_ILLADR = `enum ILL_ILLADR = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLADR); }))) {
            mixin(enumMixinStr_ILL_ILLADR);
        }
    }
    
    #ifdef ILL_ILLOPN
    
    #endif
    static if(!is(typeof(ILL_ILLOPN))) {
        private enum enumMixinStr_ILL_ILLOPN = `enum ILL_ILLOPN = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLOPN); }))) {
            mixin(enumMixinStr_ILL_ILLOPN);
        }
    }
    
    #define _PyUnicodeWriter_PrepareKind( WRITER , KIND ) ( assert ( ( KIND ) != PyUnicode_WCHAR_KIND ) , ( KIND ) <= ( WRITER ) . kind ? 0 : _PyUnicodeWriter_PrepareKindInternal ( ( WRITER ) , ( KIND ) ) )

    


    static if(!is(typeof(ILL_PRVOPC))) {
        private enum enumMixinStr_ILL_PRVOPC = `enum ILL_PRVOPC = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_PRVOPC); }))) {
            mixin(enumMixinStr_ILL_PRVOPC);
        }
    }
    
    #ifdef ILL_ILLTRP
    
    #endif
    static if(!is(typeof(ILL_ILLTRP))) {
        private enum enumMixinStr_ILL_ILLTRP = `enum ILL_ILLTRP = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLTRP); }))) {
            mixin(enumMixinStr_ILL_ILLTRP);
        }
    }
    
    #ifdef ILL_ILLOPC
    
    #endif
    static if(!is(typeof(ILL_ILLOPC))) {
        private enum enumMixinStr_ILL_ILLOPC = `enum ILL_ILLOPC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLOPC); }))) {
            mixin(enumMixinStr_ILL_ILLOPC);
        }
    }
    
    #ifdef ILL_NOOP
    
    #endif
    static if(!is(typeof(ILL_NOOP))) {
        private enum enumMixinStr_ILL_NOOP = `enum ILL_NOOP = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_NOOP); }))) {
            mixin(enumMixinStr_ILL_NOOP);
        }
    }
    
    #ifdef SIGEV_THREAD
    
    #endif
    static if(!is(typeof(SIGEV_THREAD))) {
        private enum enumMixinStr_SIGEV_THREAD = `enum SIGEV_THREAD = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_THREAD); }))) {
            mixin(enumMixinStr_SIGEV_THREAD);
        }
    }
    
    #ifdef SIGEV_SIGNAL
    
    #endif
    static if(!is(typeof(SIGEV_SIGNAL))) {
        private enum enumMixinStr_SIGEV_SIGNAL = `enum SIGEV_SIGNAL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_SIGNAL); }))) {
            mixin(enumMixinStr_SIGEV_SIGNAL);
        }
    }
    
    #ifdef SIGEV_NONE
    
    #endif
    static if(!is(typeof(SIGEV_NONE))) {
        private enum enumMixinStr_SIGEV_NONE = `enum SIGEV_NONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_NONE); }))) {
            mixin(enumMixinStr_SIGEV_NONE);
        }
    }
    
    #ifdef SIG_ERR
    
    #endif
    static if(!is(typeof(SIG_ERR))) {
        private enum enumMixinStr_SIG_ERR = `enum SIG_ERR = ( ( void ( * ) cast( int ) ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_ERR); }))) {
            mixin(enumMixinStr_SIG_ERR);
        }
    }
    
    #ifdef SIG_HOLD
    
    #endif
    static if(!is(typeof(SIG_HOLD))) {
        private enum enumMixinStr_SIG_HOLD = `enum SIG_HOLD = ( void ( * ) cast( int ) ) 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_HOLD); }))) {
            mixin(enumMixinStr_SIG_HOLD);
        }
    }
    
    #ifdef SIG_IGN
    
    #endif
    static if(!is(typeof(SIG_IGN))) {
        private enum enumMixinStr_SIG_IGN = `enum SIG_IGN = ( void ( * ) cast( int ) ) 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_IGN); }))) {
            mixin(enumMixinStr_SIG_IGN);
        }
    }
    
    #ifdef SIG_DFL
    
    #endif
    static if(!is(typeof(SIG_DFL))) {
        private enum enumMixinStr_SIG_DFL = `enum SIG_DFL = ( void ( * ) cast( int ) ) 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_DFL); }))) {
            mixin(enumMixinStr_SIG_DFL);
        }
    }
    
    #ifdef SIGUSR2
    
    #endif
    static if(!is(typeof(SIGUSR2))) {
        private enum enumMixinStr_SIGUSR2 = `enum SIGUSR2 = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGUSR2); }))) {
            mixin(enumMixinStr_SIGUSR2);
        }
    }
    
    #ifdef SIGUSR1
    
    #endif
    static if(!is(typeof(SIGUSR1))) {
        private enum enumMixinStr_SIGUSR1 = `enum SIGUSR1 = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGUSR1); }))) {
            mixin(enumMixinStr_SIGUSR1);
        }
    }
    
    #ifdef SIGINFO
    
    #endif
    static if(!is(typeof(SIGINFO))) {
        private enum enumMixinStr_SIGINFO = `enum SIGINFO = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGINFO); }))) {
            mixin(enumMixinStr_SIGINFO);
        }
    }
    
    #ifdef SIGWINCH
    
    #endif
    static if(!is(typeof(SIGWINCH))) {
        private enum enumMixinStr_SIGWINCH = `enum SIGWINCH = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGWINCH); }))) {
            mixin(enumMixinStr_SIGWINCH);
        }
    }
    
    #ifdef SIGPROF
    
    #endif
    static if(!is(typeof(SIGPROF))) {
        private enum enumMixinStr_SIGPROF = `enum SIGPROF = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGPROF); }))) {
            mixin(enumMixinStr_SIGPROF);
        }
    }
    
    #ifdef SIGVTALRM
    
    #endif
    static if(!is(typeof(SIGVTALRM))) {
        private enum enumMixinStr_SIGVTALRM = `enum SIGVTALRM = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGVTALRM); }))) {
            mixin(enumMixinStr_SIGVTALRM);
        }
    }
    
    #ifdef SIGXFSZ
    
    #endif
    static if(!is(typeof(SIGXFSZ))) {
        private enum enumMixinStr_SIGXFSZ = `enum SIGXFSZ = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGXFSZ); }))) {
            mixin(enumMixinStr_SIGXFSZ);
        }
    }
    
    #ifdef SIGXCPU
    
    #endif
    static if(!is(typeof(SIGXCPU))) {
        private enum enumMixinStr_SIGXCPU = `enum SIGXCPU = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGXCPU); }))) {
            mixin(enumMixinStr_SIGXCPU);
        }
    }
    
    #ifdef SIGIO
    
    #endif
    static if(!is(typeof(SIGIO))) {
        private enum enumMixinStr_SIGIO = `enum SIGIO = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGIO); }))) {
            mixin(enumMixinStr_SIGIO);
        }
    }
    
    #ifdef SIGTTOU
    
    #endif
    static if(!is(typeof(SIGTTOU))) {
        private enum enumMixinStr_SIGTTOU = `enum SIGTTOU = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTTOU); }))) {
            mixin(enumMixinStr_SIGTTOU);
        }
    }
    
    #ifdef SIGTTIN
    
    #endif
    static if(!is(typeof(SIGTTIN))) {
        private enum enumMixinStr_SIGTTIN = `enum SIGTTIN = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTTIN); }))) {
            mixin(enumMixinStr_SIGTTIN);
        }
    }
    
    #ifdef SIGCHLD
    
    #endif
    static if(!is(typeof(SIGCHLD))) {
        private enum enumMixinStr_SIGCHLD = `enum SIGCHLD = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGCHLD); }))) {
            mixin(enumMixinStr_SIGCHLD);
        }
    }
    
    #ifdef _PyUnicode_AsStringAndSize
    
    #endif
    static if(!is(typeof(_PyUnicode_AsStringAndSize))) {
        private enum enumMixinStr__PyUnicode_AsStringAndSize = `enum _PyUnicode_AsStringAndSize = PyUnicode_AsUTF8AndSize;`;
        static if(is(typeof({ mixin(enumMixinStr__PyUnicode_AsStringAndSize); }))) {
            mixin(enumMixinStr__PyUnicode_AsStringAndSize);
        }
    }
    
    #ifdef SIGCONT
    
    #endif
    static if(!is(typeof(SIGCONT))) {
        private enum enumMixinStr_SIGCONT = `enum SIGCONT = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGCONT); }))) {
            mixin(enumMixinStr_SIGCONT);
        }
    }
    
    #ifdef SIGTSTP
    
    #endif
    static if(!is(typeof(SIGTSTP))) {
        private enum enumMixinStr_SIGTSTP = `enum SIGTSTP = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTSTP); }))) {
            mixin(enumMixinStr_SIGTSTP);
        }
    }
    
    #ifdef _PyUnicode_AsString
    
    #endif
    static if(!is(typeof(_PyUnicode_AsString))) {
        private enum enumMixinStr__PyUnicode_AsString = `enum _PyUnicode_AsString = PyUnicode_AsUTF8;`;
        static if(is(typeof({ mixin(enumMixinStr__PyUnicode_AsString); }))) {
            mixin(enumMixinStr__PyUnicode_AsString);
        }
    }
    
    #ifdef SIGSTOP
    
    #endif
    static if(!is(typeof(SIGSTOP))) {
        private enum enumMixinStr_SIGSTOP = `enum SIGSTOP = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSTOP); }))) {
            mixin(enumMixinStr_SIGSTOP);
        }
    }
    
    #ifdef SIGURG
    
    #endif
    static if(!is(typeof(SIGURG))) {
        private enum enumMixinStr_SIGURG = `enum SIGURG = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGURG); }))) {
            mixin(enumMixinStr_SIGURG);
        }
    }
    
    #ifdef SIGTERM
    
    #endif
    static if(!is(typeof(SIGTERM))) {
        private enum enumMixinStr_SIGTERM = `enum SIGTERM = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTERM); }))) {
            mixin(enumMixinStr_SIGTERM);
        }
    }
    
    #ifdef SIGALRM
    
    #endif
    static if(!is(typeof(SIGALRM))) {
        private enum enumMixinStr_SIGALRM = `enum SIGALRM = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGALRM); }))) {
            mixin(enumMixinStr_SIGALRM);
        }
    }
    
    #ifdef SIGPIPE
    
    #endif
    static if(!is(typeof(SIGPIPE))) {
        private enum enumMixinStr_SIGPIPE = `enum SIGPIPE = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGPIPE); }))) {
            mixin(enumMixinStr_SIGPIPE);
        }
    }
    
    #ifdef SIGSYS
    
    #endif
    static if(!is(typeof(SIGSYS))) {
        private enum enumMixinStr_SIGSYS = `enum SIGSYS = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSYS); }))) {
            mixin(enumMixinStr_SIGSYS);
        }
    }
    
    #ifdef SIGSEGV
    
    #endif
    static if(!is(typeof(SIGSEGV))) {
        private enum enumMixinStr_SIGSEGV = `enum SIGSEGV = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSEGV); }))) {
            mixin(enumMixinStr_SIGSEGV);
        }
    }
    
    #ifdef SIGBUS
    
    #endif
    static if(!is(typeof(SIGBUS))) {
        private enum enumMixinStr_SIGBUS = `enum SIGBUS = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGBUS); }))) {
            mixin(enumMixinStr_SIGBUS);
        }
    }
    
    #ifdef SIGKILL
    
    #endif
    static if(!is(typeof(SIGKILL))) {
        private enum enumMixinStr_SIGKILL = `enum SIGKILL = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGKILL); }))) {
            mixin(enumMixinStr_SIGKILL);
        }
    }
    
    #ifdef SIGFPE
    
    #endif
    static if(!is(typeof(SIGFPE))) {
        private enum enumMixinStr_SIGFPE = `enum SIGFPE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGFPE); }))) {
            mixin(enumMixinStr_SIGFPE);
        }
    }
    
    #ifdef SIGEMT
    
    #endif
    static if(!is(typeof(SIGEMT))) {
        private enum enumMixinStr_SIGEMT = `enum SIGEMT = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEMT); }))) {
            mixin(enumMixinStr_SIGEMT);
        }
    }
    
    #ifdef SIGIOT
    
    #endif
    static if(!is(typeof(SIGIOT))) {
        private enum enumMixinStr_SIGIOT = `enum SIGIOT = SIGABRT;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGIOT); }))) {
            mixin(enumMixinStr_SIGIOT);
        }
    }
    
    #ifdef SIGABRT
    
    #endif
    static if(!is(typeof(SIGABRT))) {
        private enum enumMixinStr_SIGABRT = `enum SIGABRT = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGABRT); }))) {
            mixin(enumMixinStr_SIGABRT);
        }
    }
    
    #ifdef SIGTRAP
    
    #endif
    static if(!is(typeof(SIGTRAP))) {
        private enum enumMixinStr_SIGTRAP = `enum SIGTRAP = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTRAP); }))) {
            mixin(enumMixinStr_SIGTRAP);
        }
    }
    
    #ifdef SIGILL
    
    #endif
    static if(!is(typeof(SIGILL))) {
        private enum enumMixinStr_SIGILL = `enum SIGILL = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGILL); }))) {
            mixin(enumMixinStr_SIGILL);
        }
    }
    
    #ifdef SIGQUIT
    
    #endif
    static if(!is(typeof(SIGQUIT))) {
        private enum enumMixinStr_SIGQUIT = `enum SIGQUIT = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGQUIT); }))) {
            mixin(enumMixinStr_SIGQUIT);
        }
    }
    
    #ifdef SIGINT
    
    #endif
    static if(!is(typeof(SIGINT))) {
        private enum enumMixinStr_SIGINT = `enum SIGINT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGINT); }))) {
            mixin(enumMixinStr_SIGINT);
        }
    }
    
    #ifdef SIGHUP
    
    #endif
    static if(!is(typeof(SIGHUP))) {
        private enum enumMixinStr_SIGHUP = `enum SIGHUP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGHUP); }))) {
            mixin(enumMixinStr_SIGHUP);
        }
    }
    
    #ifdef NSIG
    
    #endif
    static if(!is(typeof(NSIG))) {
        private enum enumMixinStr_NSIG = `enum NSIG = __DARWIN_NSIG;`;
        static if(is(typeof({ mixin(enumMixinStr_NSIG); }))) {
            mixin(enumMixinStr_NSIG);
        }
    }
    
    #ifdef __DARWIN_NSIG
    
    #endif
    static if(!is(typeof(__DARWIN_NSIG))) {
        private enum enumMixinStr___DARWIN_NSIG = `enum __DARWIN_NSIG = 32;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_NSIG); }))) {
            mixin(enumMixinStr___DARWIN_NSIG);
        }
    }
    
    #define _SYS_SIGNAL_H_ 

    

    


    static if(!is(typeof(IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME))) {
        private enum enumMixinStr_IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = `enum IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME); }))) {
            mixin(enumMixinStr_IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME);
        }
    }
    
    #ifdef IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT
    
    #endif
    static if(!is(typeof(IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT))) {
        private enum enumMixinStr_IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = `enum IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT); }))) {
            mixin(enumMixinStr_IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT);
        }
    }
    
    #ifdef IOPOL_MATERIALIZE_DATALESS_FILES_ON
    
    #endif
    static if(!is(typeof(IOPOL_MATERIALIZE_DATALESS_FILES_ON))) {
        private enum enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_ON = `enum IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_ON); }))) {
            mixin(enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_ON);
        }
    }
    
    #ifdef IOPOL_MATERIALIZE_DATALESS_FILES_OFF
    
    #endif
    static if(!is(typeof(IOPOL_MATERIALIZE_DATALESS_FILES_OFF))) {
        private enum enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_OFF = `enum IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_OFF); }))) {
            mixin(enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_OFF);
        }
    }
    
    #ifdef IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT
    
    #endif
    static if(!is(typeof(IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT))) {
        private enum enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = `enum IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT); }))) {
            mixin(enumMixinStr_IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT);
        }
    }
    
    #ifdef IOPOL_ATIME_UPDATES_OFF
    
    #endif
    static if(!is(typeof(IOPOL_ATIME_UPDATES_OFF))) {
        private enum enumMixinStr_IOPOL_ATIME_UPDATES_OFF = `enum IOPOL_ATIME_UPDATES_OFF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_ATIME_UPDATES_OFF); }))) {
            mixin(enumMixinStr_IOPOL_ATIME_UPDATES_OFF);
        }
    }
    
    #ifdef IOPOL_ATIME_UPDATES_DEFAULT
    
    #endif
    static if(!is(typeof(IOPOL_ATIME_UPDATES_DEFAULT))) {
        private enum enumMixinStr_IOPOL_ATIME_UPDATES_DEFAULT = `enum IOPOL_ATIME_UPDATES_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_ATIME_UPDATES_DEFAULT); }))) {
            mixin(enumMixinStr_IOPOL_ATIME_UPDATES_DEFAULT);
        }
    }
    
    #ifdef IOPOL_NORMAL
    
    #endif
    static if(!is(typeof(IOPOL_NORMAL))) {
        private enum enumMixinStr_IOPOL_NORMAL = `enum IOPOL_NORMAL = IOPOL_IMPORTANT;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_NORMAL); }))) {
            mixin(enumMixinStr_IOPOL_NORMAL);
        }
    }
    
    #ifdef IOPOL_APPLICATION
    
    #endif
    static if(!is(typeof(IOPOL_APPLICATION))) {
        private enum enumMixinStr_IOPOL_APPLICATION = `enum IOPOL_APPLICATION = IOPOL_STANDARD;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_APPLICATION); }))) {
            mixin(enumMixinStr_IOPOL_APPLICATION);
        }
    }
    
    #ifdef IOPOL_STANDARD
    
    #endif
    static if(!is(typeof(IOPOL_STANDARD))) {
        private enum enumMixinStr_IOPOL_STANDARD = `enum IOPOL_STANDARD = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_STANDARD); }))) {
            mixin(enumMixinStr_IOPOL_STANDARD);
        }
    }
    
    #ifdef IOPOL_UTILITY
    
    #endif
    static if(!is(typeof(IOPOL_UTILITY))) {
        private enum enumMixinStr_IOPOL_UTILITY = `enum IOPOL_UTILITY = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_UTILITY); }))) {
            mixin(enumMixinStr_IOPOL_UTILITY);
        }
    }
    
    #ifdef IOPOL_THROTTLE
    
    #endif
    static if(!is(typeof(IOPOL_THROTTLE))) {
        private enum enumMixinStr_IOPOL_THROTTLE = `enum IOPOL_THROTTLE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_THROTTLE); }))) {
            mixin(enumMixinStr_IOPOL_THROTTLE);
        }
    }
    
    #ifdef IOPOL_PASSIVE
    
    #endif
    static if(!is(typeof(IOPOL_PASSIVE))) {
        private enum enumMixinStr_IOPOL_PASSIVE = `enum IOPOL_PASSIVE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_PASSIVE); }))) {
            mixin(enumMixinStr_IOPOL_PASSIVE);
        }
    }
    
    #ifdef IOPOL_IMPORTANT
    
    #endif
    static if(!is(typeof(IOPOL_IMPORTANT))) {
        private enum enumMixinStr_IOPOL_IMPORTANT = `enum IOPOL_IMPORTANT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_IMPORTANT); }))) {
            mixin(enumMixinStr_IOPOL_IMPORTANT);
        }
    }
    
    #ifdef IOPOL_DEFAULT
    
    #endif
    static if(!is(typeof(IOPOL_DEFAULT))) {
        private enum enumMixinStr_IOPOL_DEFAULT = `enum IOPOL_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_DEFAULT); }))) {
            mixin(enumMixinStr_IOPOL_DEFAULT);
        }
    }
    
    #ifdef IOPOL_SCOPE_DARWIN_BG
    
    #endif
    static if(!is(typeof(IOPOL_SCOPE_DARWIN_BG))) {
        private enum enumMixinStr_IOPOL_SCOPE_DARWIN_BG = `enum IOPOL_SCOPE_DARWIN_BG = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_SCOPE_DARWIN_BG); }))) {
            mixin(enumMixinStr_IOPOL_SCOPE_DARWIN_BG);
        }
    }
    
    #ifdef IOPOL_SCOPE_THREAD
    
    #endif
    static if(!is(typeof(IOPOL_SCOPE_THREAD))) {
        private enum enumMixinStr_IOPOL_SCOPE_THREAD = `enum IOPOL_SCOPE_THREAD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_SCOPE_THREAD); }))) {
            mixin(enumMixinStr_IOPOL_SCOPE_THREAD);
        }
    }
    
    #ifdef IOPOL_SCOPE_PROCESS
    
    #endif
    static if(!is(typeof(IOPOL_SCOPE_PROCESS))) {
        private enum enumMixinStr_IOPOL_SCOPE_PROCESS = `enum IOPOL_SCOPE_PROCESS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_SCOPE_PROCESS); }))) {
            mixin(enumMixinStr_IOPOL_SCOPE_PROCESS);
        }
    }
    
    #ifdef IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME
    
    #endif
    static if(!is(typeof(IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME))) {
        private enum enumMixinStr_IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = `enum IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME); }))) {
            mixin(enumMixinStr_IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME);
        }
    }
    
    #ifdef IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES
    
    #endif
    static if(!is(typeof(IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES))) {
        private enum enumMixinStr_IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = `enum IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES); }))) {
            mixin(enumMixinStr_IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES);
        }
    }
    
    #ifdef IOPOL_TYPE_VFS_ATIME_UPDATES
    
    #endif
    static if(!is(typeof(IOPOL_TYPE_VFS_ATIME_UPDATES))) {
        private enum enumMixinStr_IOPOL_TYPE_VFS_ATIME_UPDATES = `enum IOPOL_TYPE_VFS_ATIME_UPDATES = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_TYPE_VFS_ATIME_UPDATES); }))) {
            mixin(enumMixinStr_IOPOL_TYPE_VFS_ATIME_UPDATES);
        }
    }
    
    #ifdef IOPOL_TYPE_DISK
    
    #endif
    static if(!is(typeof(IOPOL_TYPE_DISK))) {
        private enum enumMixinStr_IOPOL_TYPE_DISK = `enum IOPOL_TYPE_DISK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IOPOL_TYPE_DISK); }))) {
            mixin(enumMixinStr_IOPOL_TYPE_DISK);
        }
    }
    
    #ifdef FOOTPRINT_INTERVAL_RESET
    
    #endif
    static if(!is(typeof(FOOTPRINT_INTERVAL_RESET))) {
        private enum enumMixinStr_FOOTPRINT_INTERVAL_RESET = `enum FOOTPRINT_INTERVAL_RESET = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_FOOTPRINT_INTERVAL_RESET); }))) {
            mixin(enumMixinStr_FOOTPRINT_INTERVAL_RESET);
        }
    }
    
    #ifdef CPUMON_MAKE_FATAL
    
    #endif
    static if(!is(typeof(CPUMON_MAKE_FATAL))) {
        private enum enumMixinStr_CPUMON_MAKE_FATAL = `enum CPUMON_MAKE_FATAL = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_CPUMON_MAKE_FATAL); }))) {
            mixin(enumMixinStr_CPUMON_MAKE_FATAL);
        }
    }
    
    #ifdef WAKEMON_MAKE_FATAL
    
    #endif
    static if(!is(typeof(WAKEMON_MAKE_FATAL))) {
        private enum enumMixinStr_WAKEMON_MAKE_FATAL = `enum WAKEMON_MAKE_FATAL = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_WAKEMON_MAKE_FATAL); }))) {
            mixin(enumMixinStr_WAKEMON_MAKE_FATAL);
        }
    }
    
    #ifdef WAKEMON_SET_DEFAULTS
    
    #endif
    static if(!is(typeof(WAKEMON_SET_DEFAULTS))) {
        private enum enumMixinStr_WAKEMON_SET_DEFAULTS = `enum WAKEMON_SET_DEFAULTS = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_WAKEMON_SET_DEFAULTS); }))) {
            mixin(enumMixinStr_WAKEMON_SET_DEFAULTS);
        }
    }
    
    #ifdef WAKEMON_GET_PARAMS
    
    #endif
    static if(!is(typeof(WAKEMON_GET_PARAMS))) {
        private enum enumMixinStr_WAKEMON_GET_PARAMS = `enum WAKEMON_GET_PARAMS = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_WAKEMON_GET_PARAMS); }))) {
            mixin(enumMixinStr_WAKEMON_GET_PARAMS);
        }
    }
    
    #ifdef WAKEMON_DISABLE
    
    #endif
    static if(!is(typeof(WAKEMON_DISABLE))) {
        private enum enumMixinStr_WAKEMON_DISABLE = `enum WAKEMON_DISABLE = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_WAKEMON_DISABLE); }))) {
            mixin(enumMixinStr_WAKEMON_DISABLE);
        }
    }
    
    #ifdef WAKEMON_ENABLE
    
    #endif
    static if(!is(typeof(WAKEMON_ENABLE))) {
        private enum enumMixinStr_WAKEMON_ENABLE = `enum WAKEMON_ENABLE = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_WAKEMON_ENABLE); }))) {
            mixin(enumMixinStr_WAKEMON_ENABLE);
        }
    }
    
    #ifdef RLIMIT_FOOTPRINT_INTERVAL
    
    #endif
    static if(!is(typeof(RLIMIT_FOOTPRINT_INTERVAL))) {
        private enum enumMixinStr_RLIMIT_FOOTPRINT_INTERVAL = `enum RLIMIT_FOOTPRINT_INTERVAL = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_FOOTPRINT_INTERVAL); }))) {
            mixin(enumMixinStr_RLIMIT_FOOTPRINT_INTERVAL);
        }
    }
    
    #ifdef RLIMIT_THREAD_CPULIMITS
    
    #endif
    static if(!is(typeof(RLIMIT_THREAD_CPULIMITS))) {
        private enum enumMixinStr_RLIMIT_THREAD_CPULIMITS = `enum RLIMIT_THREAD_CPULIMITS = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_THREAD_CPULIMITS); }))) {
            mixin(enumMixinStr_RLIMIT_THREAD_CPULIMITS);
        }
    }
    
    #ifdef RLIMIT_CPU_USAGE_MONITOR
    
    #endif
    static if(!is(typeof(RLIMIT_CPU_USAGE_MONITOR))) {
        private enum enumMixinStr_RLIMIT_CPU_USAGE_MONITOR = `enum RLIMIT_CPU_USAGE_MONITOR = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_CPU_USAGE_MONITOR); }))) {
            mixin(enumMixinStr_RLIMIT_CPU_USAGE_MONITOR);
        }
    }
    
    #ifdef RLIMIT_WAKEUPS_MONITOR
    
    #endif
    static if(!is(typeof(RLIMIT_WAKEUPS_MONITOR))) {
        private enum enumMixinStr_RLIMIT_WAKEUPS_MONITOR = `enum RLIMIT_WAKEUPS_MONITOR = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_WAKEUPS_MONITOR); }))) {
            mixin(enumMixinStr_RLIMIT_WAKEUPS_MONITOR);
        }
    }
    
    #ifdef _RLIMIT_POSIX_FLAG
    
    #endif
    static if(!is(typeof(_RLIMIT_POSIX_FLAG))) {
        private enum enumMixinStr__RLIMIT_POSIX_FLAG = `enum _RLIMIT_POSIX_FLAG = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr__RLIMIT_POSIX_FLAG); }))) {
            mixin(enumMixinStr__RLIMIT_POSIX_FLAG);
        }
    }
    
    #ifdef RLIM_NLIMITS
    
    #endif
    static if(!is(typeof(RLIM_NLIMITS))) {
        private enum enumMixinStr_RLIM_NLIMITS = `enum RLIM_NLIMITS = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIM_NLIMITS); }))) {
            mixin(enumMixinStr_RLIM_NLIMITS);
        }
    }
    
    #ifdef RLIMIT_NOFILE
    
    #endif
    static if(!is(typeof(RLIMIT_NOFILE))) {
        private enum enumMixinStr_RLIMIT_NOFILE = `enum RLIMIT_NOFILE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_NOFILE); }))) {
            mixin(enumMixinStr_RLIMIT_NOFILE);
        }
    }
    
    #ifdef RLIMIT_NPROC
    
    #endif
    static if(!is(typeof(RLIMIT_NPROC))) {
        private enum enumMixinStr_RLIMIT_NPROC = `enum RLIMIT_NPROC = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_NPROC); }))) {
            mixin(enumMixinStr_RLIMIT_NPROC);
        }
    }
    
    #ifdef RLIMIT_MEMLOCK
    
    #endif
    static if(!is(typeof(RLIMIT_MEMLOCK))) {
        private enum enumMixinStr_RLIMIT_MEMLOCK = `enum RLIMIT_MEMLOCK = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_MEMLOCK); }))) {
            mixin(enumMixinStr_RLIMIT_MEMLOCK);
        }
    }
    
    #ifdef RLIMIT_RSS
    
    #endif
    static if(!is(typeof(RLIMIT_RSS))) {
        private enum enumMixinStr_RLIMIT_RSS = `enum RLIMIT_RSS = RLIMIT_AS;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_RSS); }))) {
            mixin(enumMixinStr_RLIMIT_RSS);
        }
    }
    
    #ifdef RLIMIT_AS
    
    #endif
    static if(!is(typeof(RLIMIT_AS))) {
        private enum enumMixinStr_RLIMIT_AS = `enum RLIMIT_AS = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_AS); }))) {
            mixin(enumMixinStr_RLIMIT_AS);
        }
    }
    
    #ifdef RLIMIT_CORE
    
    #endif
    static if(!is(typeof(RLIMIT_CORE))) {
        private enum enumMixinStr_RLIMIT_CORE = `enum RLIMIT_CORE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_CORE); }))) {
            mixin(enumMixinStr_RLIMIT_CORE);
        }
    }
    
    #ifdef RLIMIT_STACK
    
    #endif
    static if(!is(typeof(RLIMIT_STACK))) {
        private enum enumMixinStr_RLIMIT_STACK = `enum RLIMIT_STACK = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_STACK); }))) {
            mixin(enumMixinStr_RLIMIT_STACK);
        }
    }
    
    #ifdef RLIMIT_DATA
    
    #endif
    static if(!is(typeof(RLIMIT_DATA))) {
        private enum enumMixinStr_RLIMIT_DATA = `enum RLIMIT_DATA = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_DATA); }))) {
            mixin(enumMixinStr_RLIMIT_DATA);
        }
    }
    
    #ifdef RLIMIT_FSIZE
    
    #endif
    static if(!is(typeof(RLIMIT_FSIZE))) {
        private enum enumMixinStr_RLIMIT_FSIZE = `enum RLIMIT_FSIZE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_FSIZE); }))) {
            mixin(enumMixinStr_RLIMIT_FSIZE);
        }
    }
    
    #ifdef RLIMIT_CPU
    
    #endif
    static if(!is(typeof(RLIMIT_CPU))) {
        private enum enumMixinStr_RLIMIT_CPU = `enum RLIMIT_CPU = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIMIT_CPU); }))) {
            mixin(enumMixinStr_RLIMIT_CPU);
        }
    }
    
    #ifdef RLIM_SAVED_CUR
    
    #endif
    static if(!is(typeof(RLIM_SAVED_CUR))) {
        private enum enumMixinStr_RLIM_SAVED_CUR = `enum RLIM_SAVED_CUR = RLIM_INFINITY;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIM_SAVED_CUR); }))) {
            mixin(enumMixinStr_RLIM_SAVED_CUR);
        }
    }
    
    #ifdef RLIM_SAVED_MAX
    
    #endif
    static if(!is(typeof(RLIM_SAVED_MAX))) {
        private enum enumMixinStr_RLIM_SAVED_MAX = `enum RLIM_SAVED_MAX = RLIM_INFINITY;`;
        static if(is(typeof({ mixin(enumMixinStr_RLIM_SAVED_MAX); }))) {
            mixin(enumMixinStr_RLIM_SAVED_MAX);
        }
    }
    
    #ifdef RLIM_INFINITY
    
    #endif
    static if(!is(typeof(RLIM_INFINITY))) {
        private enum enumMixinStr_RLIM_INFINITY = `enum RLIM_INFINITY = ( ( cast( __uint64_t ) 1 << 63 ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_RLIM_INFINITY); }))) {
            mixin(enumMixinStr_RLIM_INFINITY);
        }
    }
    
    #ifdef RUSAGE_INFO_CURRENT
    
    #endif
    static if(!is(typeof(RUSAGE_INFO_CURRENT))) {
        private enum enumMixinStr_RUSAGE_INFO_CURRENT = `enum RUSAGE_INFO_CURRENT = RUSAGE_INFO_V4;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_INFO_CURRENT); }))) {
            mixin(enumMixinStr_RUSAGE_INFO_CURRENT);
        }
    }
    
    #ifdef RUSAGE_INFO_V4
    
    #endif
    static if(!is(typeof(RUSAGE_INFO_V4))) {
        private enum enumMixinStr_RUSAGE_INFO_V4 = `enum RUSAGE_INFO_V4 = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_INFO_V4); }))) {
            mixin(enumMixinStr_RUSAGE_INFO_V4);
        }
    }
    
    #ifdef RUSAGE_INFO_V3
    
    #endif
    static if(!is(typeof(RUSAGE_INFO_V3))) {
        private enum enumMixinStr_RUSAGE_INFO_V3 = `enum RUSAGE_INFO_V3 = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_INFO_V3); }))) {
            mixin(enumMixinStr_RUSAGE_INFO_V3);
        }
    }
    
    #ifdef RUSAGE_INFO_V2
    
    #endif
    static if(!is(typeof(RUSAGE_INFO_V2))) {
        private enum enumMixinStr_RUSAGE_INFO_V2 = `enum RUSAGE_INFO_V2 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_INFO_V2); }))) {
            mixin(enumMixinStr_RUSAGE_INFO_V2);
        }
    }
    
    #ifdef RUSAGE_INFO_V1
    
    #endif
    static if(!is(typeof(RUSAGE_INFO_V1))) {
        private enum enumMixinStr_RUSAGE_INFO_V1 = `enum RUSAGE_INFO_V1 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_INFO_V1); }))) {
            mixin(enumMixinStr_RUSAGE_INFO_V1);
        }
    }
    
    #ifdef RUSAGE_INFO_V0
    
    #endif
    static if(!is(typeof(RUSAGE_INFO_V0))) {
        private enum enumMixinStr_RUSAGE_INFO_V0 = `enum RUSAGE_INFO_V0 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_INFO_V0); }))) {
            mixin(enumMixinStr_RUSAGE_INFO_V0);
        }
    }
    
    #ifdef ru_last
    
    #endif
    static if(!is(typeof(ru_last))) {
        private enum enumMixinStr_ru_last = `enum ru_last = ru_nivcsw;`;
        static if(is(typeof({ mixin(enumMixinStr_ru_last); }))) {
            mixin(enumMixinStr_ru_last);
        }
    }
    
    #ifdef ru_first
    
    #endif
    static if(!is(typeof(ru_first))) {
        private enum enumMixinStr_ru_first = `enum ru_first = ru_ixrss;`;
        static if(is(typeof({ mixin(enumMixinStr_ru_first); }))) {
            mixin(enumMixinStr_ru_first);
        }
    }
    
    #ifdef RUSAGE_CHILDREN
    
    #endif
    static if(!is(typeof(RUSAGE_CHILDREN))) {
        private enum enumMixinStr_RUSAGE_CHILDREN = `enum RUSAGE_CHILDREN = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_CHILDREN); }))) {
            mixin(enumMixinStr_RUSAGE_CHILDREN);
        }
    }
    
    #ifdef RUSAGE_SELF
    
    #endif
    static if(!is(typeof(RUSAGE_SELF))) {
        private enum enumMixinStr_RUSAGE_SELF = `enum RUSAGE_SELF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_RUSAGE_SELF); }))) {
            mixin(enumMixinStr_RUSAGE_SELF);
        }
    }
    
    #ifdef PRIO_DARWIN_NONUI
    
    #endif
    static if(!is(typeof(PRIO_DARWIN_NONUI))) {
        private enum enumMixinStr_PRIO_DARWIN_NONUI = `enum PRIO_DARWIN_NONUI = 0x1001;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_DARWIN_NONUI); }))) {
            mixin(enumMixinStr_PRIO_DARWIN_NONUI);
        }
    }
    
    #ifdef PRIO_DARWIN_BG
    
    #endif
    static if(!is(typeof(PRIO_DARWIN_BG))) {
        private enum enumMixinStr_PRIO_DARWIN_BG = `enum PRIO_DARWIN_BG = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_DARWIN_BG); }))) {
            mixin(enumMixinStr_PRIO_DARWIN_BG);
        }
    }
    
    #ifdef PRIO_MAX
    
    #endif
    static if(!is(typeof(PRIO_MAX))) {
        private enum enumMixinStr_PRIO_MAX = `enum PRIO_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_MAX); }))) {
            mixin(enumMixinStr_PRIO_MAX);
        }
    }
    
    #ifdef PRIO_MIN
    
    #endif
    static if(!is(typeof(PRIO_MIN))) {
        private enum enumMixinStr_PRIO_MIN = `enum PRIO_MIN = - 20;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_MIN); }))) {
            mixin(enumMixinStr_PRIO_MIN);
        }
    }
    
    #ifdef PRIO_DARWIN_PROCESS
    
    #endif
    static if(!is(typeof(PRIO_DARWIN_PROCESS))) {
        private enum enumMixinStr_PRIO_DARWIN_PROCESS = `enum PRIO_DARWIN_PROCESS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_DARWIN_PROCESS); }))) {
            mixin(enumMixinStr_PRIO_DARWIN_PROCESS);
        }
    }
    
    #ifdef PRIO_DARWIN_THREAD
    
    #endif
    static if(!is(typeof(PRIO_DARWIN_THREAD))) {
        private enum enumMixinStr_PRIO_DARWIN_THREAD = `enum PRIO_DARWIN_THREAD = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_DARWIN_THREAD); }))) {
            mixin(enumMixinStr_PRIO_DARWIN_THREAD);
        }
    }
    
    #ifdef PRIO_USER
    
    #endif
    static if(!is(typeof(PRIO_USER))) {
        private enum enumMixinStr_PRIO_USER = `enum PRIO_USER = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_USER); }))) {
            mixin(enumMixinStr_PRIO_USER);
        }
    }
    
    #ifdef PRIO_PGRP
    
    #endif
    static if(!is(typeof(PRIO_PGRP))) {
        private enum enumMixinStr_PRIO_PGRP = `enum PRIO_PGRP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_PGRP); }))) {
            mixin(enumMixinStr_PRIO_PGRP);
        }
    }
    
    #ifdef PRIO_PROCESS
    
    #endif
    static if(!is(typeof(PRIO_PROCESS))) {
        private enum enumMixinStr_PRIO_PROCESS = `enum PRIO_PROCESS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIO_PROCESS); }))) {
            mixin(enumMixinStr_PRIO_PROCESS);
        }
    }
    
    #define _SYS_RESOURCE_H_ 

    


    static if(!is(typeof(QOS_MIN_RELATIVE_PRIORITY))) {
        private enum enumMixinStr_QOS_MIN_RELATIVE_PRIORITY = `enum QOS_MIN_RELATIVE_PRIORITY = ( - 15 );`;
        static if(is(typeof({ mixin(enumMixinStr_QOS_MIN_RELATIVE_PRIORITY); }))) {
            mixin(enumMixinStr_QOS_MIN_RELATIVE_PRIORITY);
        }
    }
    
    #ifdef __QOS_CLASS_AVAILABLE
    
    #endif
    static if(!is(typeof(__QOS_CLASS_AVAILABLE))) {
        private enum enumMixinStr___QOS_CLASS_AVAILABLE = `enum __QOS_CLASS_AVAILABLE = __API_AVAILABLE;`;
        static if(is(typeof({ mixin(enumMixinStr___QOS_CLASS_AVAILABLE); }))) {
            mixin(enumMixinStr___QOS_CLASS_AVAILABLE);
        }
    }
    
    #ifdef __QOS_ENUM
    
    #endif
    static if(!is(typeof(__QOS_ENUM))) {
        private enum enumMixinStr___QOS_ENUM = `enum __QOS_ENUM = ( name , type , ... ) { __VA_ARGS__ } ; typedef type name ## _t;`;
        static if(is(typeof({ mixin(enumMixinStr___QOS_ENUM); }))) {
            mixin(enumMixinStr___QOS_ENUM);
        }
    }
    
    #define _SYS_QOS_H 

    


    static if(!is(typeof(ELAST))) {
        private enum enumMixinStr_ELAST = `enum ELAST = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_ELAST); }))) {
            mixin(enumMixinStr_ELAST);
        }
    }
    
    #ifdef EQFULL
    
    #endif
    static if(!is(typeof(EQFULL))) {
        private enum enumMixinStr_EQFULL = `enum EQFULL = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_EQFULL); }))) {
            mixin(enumMixinStr_EQFULL);
        }
    }
    
    #ifdef EOWNERDEAD
    
    #endif
    static if(!is(typeof(EOWNERDEAD))) {
        private enum enumMixinStr_EOWNERDEAD = `enum EOWNERDEAD = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_EOWNERDEAD); }))) {
            mixin(enumMixinStr_EOWNERDEAD);
        }
    }
    
    #ifdef ENOTRECOVERABLE
    
    #endif
    static if(!is(typeof(ENOTRECOVERABLE))) {
        private enum enumMixinStr_ENOTRECOVERABLE = `enum ENOTRECOVERABLE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTRECOVERABLE); }))) {
            mixin(enumMixinStr_ENOTRECOVERABLE);
        }
    }
    
    #ifdef ENOPOLICY
    
    #endif
    static if(!is(typeof(ENOPOLICY))) {
        private enum enumMixinStr_ENOPOLICY = `enum ENOPOLICY = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOPOLICY); }))) {
            mixin(enumMixinStr_ENOPOLICY);
        }
    }
    
    #ifdef EOPNOTSUPP
    
    #endif
    static if(!is(typeof(EOPNOTSUPP))) {
        private enum enumMixinStr_EOPNOTSUPP = `enum EOPNOTSUPP = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_EOPNOTSUPP); }))) {
            mixin(enumMixinStr_EOPNOTSUPP);
        }
    }
    
    #ifdef ETIME
    
    #endif
    static if(!is(typeof(ETIME))) {
        private enum enumMixinStr_ETIME = `enum ETIME = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ETIME); }))) {
            mixin(enumMixinStr_ETIME);
        }
    }
    
    #ifdef EPROTO
    
    #endif
    static if(!is(typeof(EPROTO))) {
        private enum enumMixinStr_EPROTO = `enum EPROTO = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROTO); }))) {
            mixin(enumMixinStr_EPROTO);
        }
    }
    
    #ifdef ENOSTR
    
    #endif
    static if(!is(typeof(ENOSTR))) {
        private enum enumMixinStr_ENOSTR = `enum ENOSTR = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSTR); }))) {
            mixin(enumMixinStr_ENOSTR);
        }
    }
    
    #ifdef ENOSR
    
    #endif
    static if(!is(typeof(ENOSR))) {
        private enum enumMixinStr_ENOSR = `enum ENOSR = 98;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSR); }))) {
            mixin(enumMixinStr_ENOSR);
        }
    }
    
    #ifdef ENOLINK
    
    #endif
    static if(!is(typeof(ENOLINK))) {
        private enum enumMixinStr_ENOLINK = `enum ENOLINK = 97;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOLINK); }))) {
            mixin(enumMixinStr_ENOLINK);
        }
    }
    
    #ifdef ENODATA
    
    #endif
    static if(!is(typeof(ENODATA))) {
        private enum enumMixinStr_ENODATA = `enum ENODATA = 96;`;
        static if(is(typeof({ mixin(enumMixinStr_ENODATA); }))) {
            mixin(enumMixinStr_ENODATA);
        }
    }
    
    #ifdef EMULTIHOP
    
    #endif
    static if(!is(typeof(EMULTIHOP))) {
        private enum enumMixinStr_EMULTIHOP = `enum EMULTIHOP = 95;`;
        static if(is(typeof({ mixin(enumMixinStr_EMULTIHOP); }))) {
            mixin(enumMixinStr_EMULTIHOP);
        }
    }
    
    #ifdef EBADMSG
    
    #endif
    static if(!is(typeof(EBADMSG))) {
        private enum enumMixinStr_EBADMSG = `enum EBADMSG = 94;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADMSG); }))) {
            mixin(enumMixinStr_EBADMSG);
        }
    }
    
    #ifdef ENOATTR
    
    #endif
    static if(!is(typeof(ENOATTR))) {
        private enum enumMixinStr_ENOATTR = `enum ENOATTR = 93;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOATTR); }))) {
            mixin(enumMixinStr_ENOATTR);
        }
    }
    
    #ifdef EILSEQ
    
    #endif
    static if(!is(typeof(EILSEQ))) {
        private enum enumMixinStr_EILSEQ = `enum EILSEQ = 92;`;
        static if(is(typeof({ mixin(enumMixinStr_EILSEQ); }))) {
            mixin(enumMixinStr_EILSEQ);
        }
    }
    
    #ifdef ENOMSG
    
    #endif
    static if(!is(typeof(ENOMSG))) {
        private enum enumMixinStr_ENOMSG = `enum ENOMSG = 91;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOMSG); }))) {
            mixin(enumMixinStr_ENOMSG);
        }
    }
    
    #ifdef EIDRM
    
    #endif
    static if(!is(typeof(EIDRM))) {
        private enum enumMixinStr_EIDRM = `enum EIDRM = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_EIDRM); }))) {
            mixin(enumMixinStr_EIDRM);
        }
    }
    
    #ifdef ECANCELED
    
    #endif
    static if(!is(typeof(ECANCELED))) {
        private enum enumMixinStr_ECANCELED = `enum ECANCELED = 89;`;
        static if(is(typeof({ mixin(enumMixinStr_ECANCELED); }))) {
            mixin(enumMixinStr_ECANCELED);
        }
    }
    
    #ifdef EBADMACHO
    
    #endif
    static if(!is(typeof(EBADMACHO))) {
        private enum enumMixinStr_EBADMACHO = `enum EBADMACHO = 88;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADMACHO); }))) {
            mixin(enumMixinStr_EBADMACHO);
        }
    }
    
    #ifdef ESHLIBVERS
    
    #endif
    static if(!is(typeof(ESHLIBVERS))) {
        private enum enumMixinStr_ESHLIBVERS = `enum ESHLIBVERS = 87;`;
        static if(is(typeof({ mixin(enumMixinStr_ESHLIBVERS); }))) {
            mixin(enumMixinStr_ESHLIBVERS);
        }
    }
    
    #ifdef EBADARCH
    
    #endif
    static if(!is(typeof(EBADARCH))) {
        private enum enumMixinStr_EBADARCH = `enum EBADARCH = 86;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADARCH); }))) {
            mixin(enumMixinStr_EBADARCH);
        }
    }
    
    #ifdef EBADEXEC
    
    #endif
    static if(!is(typeof(EBADEXEC))) {
        private enum enumMixinStr_EBADEXEC = `enum EBADEXEC = 85;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADEXEC); }))) {
            mixin(enumMixinStr_EBADEXEC);
        }
    }
    
    #ifdef EOVERFLOW
    
    #endif
    static if(!is(typeof(EOVERFLOW))) {
        private enum enumMixinStr_EOVERFLOW = `enum EOVERFLOW = 84;`;
        static if(is(typeof({ mixin(enumMixinStr_EOVERFLOW); }))) {
            mixin(enumMixinStr_EOVERFLOW);
        }
    }
    
    #ifdef EDEVERR
    
    #endif
    static if(!is(typeof(EDEVERR))) {
        private enum enumMixinStr_EDEVERR = `enum EDEVERR = 83;`;
        static if(is(typeof({ mixin(enumMixinStr_EDEVERR); }))) {
            mixin(enumMixinStr_EDEVERR);
        }
    }
    
    #ifdef EPWROFF
    
    #endif
    static if(!is(typeof(EPWROFF))) {
        private enum enumMixinStr_EPWROFF = `enum EPWROFF = 82;`;
        static if(is(typeof({ mixin(enumMixinStr_EPWROFF); }))) {
            mixin(enumMixinStr_EPWROFF);
        }
    }
    
    #ifdef ENEEDAUTH
    
    #endif
    static if(!is(typeof(ENEEDAUTH))) {
        private enum enumMixinStr_ENEEDAUTH = `enum ENEEDAUTH = 81;`;
        static if(is(typeof({ mixin(enumMixinStr_ENEEDAUTH); }))) {
            mixin(enumMixinStr_ENEEDAUTH);
        }
    }
    
    #ifdef EAUTH
    
    #endif
    static if(!is(typeof(EAUTH))) {
        private enum enumMixinStr_EAUTH = `enum EAUTH = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_EAUTH); }))) {
            mixin(enumMixinStr_EAUTH);
        }
    }
    
    #ifdef EFTYPE
    
    #endif
    static if(!is(typeof(EFTYPE))) {
        private enum enumMixinStr_EFTYPE = `enum EFTYPE = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_EFTYPE); }))) {
            mixin(enumMixinStr_EFTYPE);
        }
    }
    
    #ifdef ENOSYS
    
    #endif
    static if(!is(typeof(ENOSYS))) {
        private enum enumMixinStr_ENOSYS = `enum ENOSYS = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSYS); }))) {
            mixin(enumMixinStr_ENOSYS);
        }
    }
    
    #ifdef ENOLCK
    
    #endif
    static if(!is(typeof(ENOLCK))) {
        private enum enumMixinStr_ENOLCK = `enum ENOLCK = 77;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOLCK); }))) {
            mixin(enumMixinStr_ENOLCK);
        }
    }
    
    #ifdef EPROCUNAVAIL
    
    #endif
    static if(!is(typeof(EPROCUNAVAIL))) {
        private enum enumMixinStr_EPROCUNAVAIL = `enum EPROCUNAVAIL = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROCUNAVAIL); }))) {
            mixin(enumMixinStr_EPROCUNAVAIL);
        }
    }
    
    #ifdef EPROGMISMATCH
    
    #endif
    static if(!is(typeof(EPROGMISMATCH))) {
        private enum enumMixinStr_EPROGMISMATCH = `enum EPROGMISMATCH = 75;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROGMISMATCH); }))) {
            mixin(enumMixinStr_EPROGMISMATCH);
        }
    }
    
    #ifdef EPROGUNAVAIL
    
    #endif
    static if(!is(typeof(EPROGUNAVAIL))) {
        private enum enumMixinStr_EPROGUNAVAIL = `enum EPROGUNAVAIL = 74;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROGUNAVAIL); }))) {
            mixin(enumMixinStr_EPROGUNAVAIL);
        }
    }
    
    #ifdef ERPCMISMATCH
    
    #endif
    static if(!is(typeof(ERPCMISMATCH))) {
        private enum enumMixinStr_ERPCMISMATCH = `enum ERPCMISMATCH = 73;`;
        static if(is(typeof({ mixin(enumMixinStr_ERPCMISMATCH); }))) {
            mixin(enumMixinStr_ERPCMISMATCH);
        }
    }
    
    #ifdef EBADRPC
    
    #endif
    static if(!is(typeof(EBADRPC))) {
        private enum enumMixinStr_EBADRPC = `enum EBADRPC = 72;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADRPC); }))) {
            mixin(enumMixinStr_EBADRPC);
        }
    }
    
    #ifdef EREMOTE
    
    #endif
    static if(!is(typeof(EREMOTE))) {
        private enum enumMixinStr_EREMOTE = `enum EREMOTE = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_EREMOTE); }))) {
            mixin(enumMixinStr_EREMOTE);
        }
    }
    
    #ifdef ESTALE
    
    #endif
    static if(!is(typeof(ESTALE))) {
        private enum enumMixinStr_ESTALE = `enum ESTALE = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_ESTALE); }))) {
            mixin(enumMixinStr_ESTALE);
        }
    }
    
    #ifdef EDQUOT
    
    #endif
    static if(!is(typeof(EDQUOT))) {
        private enum enumMixinStr_EDQUOT = `enum EDQUOT = 69;`;
        static if(is(typeof({ mixin(enumMixinStr_EDQUOT); }))) {
            mixin(enumMixinStr_EDQUOT);
        }
    }
    
    #ifdef EUSERS
    
    #endif
    static if(!is(typeof(EUSERS))) {
        private enum enumMixinStr_EUSERS = `enum EUSERS = 68;`;
        static if(is(typeof({ mixin(enumMixinStr_EUSERS); }))) {
            mixin(enumMixinStr_EUSERS);
        }
    }
    
    #ifdef EPROCLIM
    
    #endif
    static if(!is(typeof(EPROCLIM))) {
        private enum enumMixinStr_EPROCLIM = `enum EPROCLIM = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROCLIM); }))) {
            mixin(enumMixinStr_EPROCLIM);
        }
    }
    
    #ifdef ENOTEMPTY
    
    #endif
    static if(!is(typeof(ENOTEMPTY))) {
        private enum enumMixinStr_ENOTEMPTY = `enum ENOTEMPTY = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTEMPTY); }))) {
            mixin(enumMixinStr_ENOTEMPTY);
        }
    }
    
    #ifdef EHOSTUNREACH
    
    #endif
    static if(!is(typeof(EHOSTUNREACH))) {
        private enum enumMixinStr_EHOSTUNREACH = `enum EHOSTUNREACH = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_EHOSTUNREACH); }))) {
            mixin(enumMixinStr_EHOSTUNREACH);
        }
    }
    
    #ifdef EHOSTDOWN
    
    #endif
    static if(!is(typeof(EHOSTDOWN))) {
        private enum enumMixinStr_EHOSTDOWN = `enum EHOSTDOWN = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_EHOSTDOWN); }))) {
            mixin(enumMixinStr_EHOSTDOWN);
        }
    }
    
    #ifdef ENAMETOOLONG
    
    #endif
    static if(!is(typeof(ENAMETOOLONG))) {
        private enum enumMixinStr_ENAMETOOLONG = `enum ENAMETOOLONG = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_ENAMETOOLONG); }))) {
            mixin(enumMixinStr_ENAMETOOLONG);
        }
    }
    
    #ifdef ELOOP
    
    #endif
    static if(!is(typeof(ELOOP))) {
        private enum enumMixinStr_ELOOP = `enum ELOOP = 62;`;
        static if(is(typeof({ mixin(enumMixinStr_ELOOP); }))) {
            mixin(enumMixinStr_ELOOP);
        }
    }
    
    #ifdef ECONNREFUSED
    
    #endif
    static if(!is(typeof(ECONNREFUSED))) {
        private enum enumMixinStr_ECONNREFUSED = `enum ECONNREFUSED = 61;`;
        static if(is(typeof({ mixin(enumMixinStr_ECONNREFUSED); }))) {
            mixin(enumMixinStr_ECONNREFUSED);
        }
    }
    
    #ifdef ETIMEDOUT
    
    #endif
    static if(!is(typeof(ETIMEDOUT))) {
        private enum enumMixinStr_ETIMEDOUT = `enum ETIMEDOUT = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_ETIMEDOUT); }))) {
            mixin(enumMixinStr_ETIMEDOUT);
        }
    }
    
    #ifdef ETOOMANYREFS
    
    #endif
    static if(!is(typeof(ETOOMANYREFS))) {
        private enum enumMixinStr_ETOOMANYREFS = `enum ETOOMANYREFS = 59;`;
        static if(is(typeof({ mixin(enumMixinStr_ETOOMANYREFS); }))) {
            mixin(enumMixinStr_ETOOMANYREFS);
        }
    }
    
    #ifdef ESHUTDOWN
    
    #endif
    static if(!is(typeof(ESHUTDOWN))) {
        private enum enumMixinStr_ESHUTDOWN = `enum ESHUTDOWN = 58;`;
        static if(is(typeof({ mixin(enumMixinStr_ESHUTDOWN); }))) {
            mixin(enumMixinStr_ESHUTDOWN);
        }
    }
    
    #ifdef ENOTCONN
    
    #endif
    static if(!is(typeof(ENOTCONN))) {
        private enum enumMixinStr_ENOTCONN = `enum ENOTCONN = 57;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTCONN); }))) {
            mixin(enumMixinStr_ENOTCONN);
        }
    }
    
    #ifdef EISCONN
    
    #endif
    static if(!is(typeof(EISCONN))) {
        private enum enumMixinStr_EISCONN = `enum EISCONN = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_EISCONN); }))) {
            mixin(enumMixinStr_EISCONN);
        }
    }
    
    #ifdef ENOBUFS
    
    #endif
    static if(!is(typeof(ENOBUFS))) {
        private enum enumMixinStr_ENOBUFS = `enum ENOBUFS = 55;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOBUFS); }))) {
            mixin(enumMixinStr_ENOBUFS);
        }
    }
    
    #ifdef ECONNRESET
    
    #endif
    static if(!is(typeof(ECONNRESET))) {
        private enum enumMixinStr_ECONNRESET = `enum ECONNRESET = 54;`;
        static if(is(typeof({ mixin(enumMixinStr_ECONNRESET); }))) {
            mixin(enumMixinStr_ECONNRESET);
        }
    }
    
    #ifdef ECONNABORTED
    
    #endif
    static if(!is(typeof(ECONNABORTED))) {
        private enum enumMixinStr_ECONNABORTED = `enum ECONNABORTED = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_ECONNABORTED); }))) {
            mixin(enumMixinStr_ECONNABORTED);
        }
    }
    
    #ifdef ENETRESET
    
    #endif
    static if(!is(typeof(ENETRESET))) {
        private enum enumMixinStr_ENETRESET = `enum ENETRESET = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_ENETRESET); }))) {
            mixin(enumMixinStr_ENETRESET);
        }
    }
    
    #define DATETIME_H 

    


    static if(!is(typeof(_PyDateTime_DATE_DATASIZE))) {
        private enum enumMixinStr__PyDateTime_DATE_DATASIZE = `enum _PyDateTime_DATE_DATASIZE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__PyDateTime_DATE_DATASIZE); }))) {
            mixin(enumMixinStr__PyDateTime_DATE_DATASIZE);
        }
    }
    
    #ifdef _PyDateTime_TIME_DATASIZE
    
    #endif
    static if(!is(typeof(_PyDateTime_TIME_DATASIZE))) {
        private enum enumMixinStr__PyDateTime_TIME_DATASIZE = `enum _PyDateTime_TIME_DATASIZE = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__PyDateTime_TIME_DATASIZE); }))) {
            mixin(enumMixinStr__PyDateTime_TIME_DATASIZE);
        }
    }
    
    #ifdef _PyDateTime_DATETIME_DATASIZE
    
    #endif
    static if(!is(typeof(_PyDateTime_DATETIME_DATASIZE))) {
        private enum enumMixinStr__PyDateTime_DATETIME_DATASIZE = `enum _PyDateTime_DATETIME_DATASIZE = 10;`;
        static if(is(typeof({ mixin(enumMixinStr__PyDateTime_DATETIME_DATASIZE); }))) {
            mixin(enumMixinStr__PyDateTime_DATETIME_DATASIZE);
        }
    }
    
    #ifdef ENETUNREACH
    
    #endif
    static if(!is(typeof(ENETUNREACH))) {
        private enum enumMixinStr_ENETUNREACH = `enum ENETUNREACH = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_ENETUNREACH); }))) {
            mixin(enumMixinStr_ENETUNREACH);
        }
    }
    
    #ifdef ENETDOWN
    
    #endif
    static if(!is(typeof(ENETDOWN))) {
        private enum enumMixinStr_ENETDOWN = `enum ENETDOWN = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_ENETDOWN); }))) {
            mixin(enumMixinStr_ENETDOWN);
        }
    }
    
    #ifdef EADDRNOTAVAIL
    
    #endif
    static if(!is(typeof(EADDRNOTAVAIL))) {
        private enum enumMixinStr_EADDRNOTAVAIL = `enum EADDRNOTAVAIL = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_EADDRNOTAVAIL); }))) {
            mixin(enumMixinStr_EADDRNOTAVAIL);
        }
    }
    
    #ifdef EADDRINUSE
    
    #endif
    static if(!is(typeof(EADDRINUSE))) {
        private enum enumMixinStr_EADDRINUSE = `enum EADDRINUSE = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_EADDRINUSE); }))) {
            mixin(enumMixinStr_EADDRINUSE);
        }
    }
    
    #ifdef EAFNOSUPPORT
    
    #endif
    static if(!is(typeof(EAFNOSUPPORT))) {
        private enum enumMixinStr_EAFNOSUPPORT = `enum EAFNOSUPPORT = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_EAFNOSUPPORT); }))) {
            mixin(enumMixinStr_EAFNOSUPPORT);
        }
    }
    
    #ifdef EPFNOSUPPORT
    
    #endif
    static if(!is(typeof(EPFNOSUPPORT))) {
        private enum enumMixinStr_EPFNOSUPPORT = `enum EPFNOSUPPORT = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_EPFNOSUPPORT); }))) {
            mixin(enumMixinStr_EPFNOSUPPORT);
        }
    }
    
    #ifdef _PyTZINFO_HEAD
    
    #endif
    static if(!is(typeof(_PyTZINFO_HEAD))) {
        private enum enumMixinStr__PyTZINFO_HEAD = `enum _PyTZINFO_HEAD = PyObject_HEAD Py_hash_t hashcode ; char hastzinfo ;;`;
        static if(is(typeof({ mixin(enumMixinStr__PyTZINFO_HEAD); }))) {
            mixin(enumMixinStr__PyTZINFO_HEAD);
        }
    }
    
    #ifdef ENOTSUP
    
    #endif
    static if(!is(typeof(ENOTSUP))) {
        private enum enumMixinStr_ENOTSUP = `enum ENOTSUP = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTSUP); }))) {
            mixin(enumMixinStr_ENOTSUP);
        }
    }
    
    #ifdef ESOCKTNOSUPPORT
    
    #endif
    static if(!is(typeof(ESOCKTNOSUPPORT))) {
        private enum enumMixinStr_ESOCKTNOSUPPORT = `enum ESOCKTNOSUPPORT = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_ESOCKTNOSUPPORT); }))) {
            mixin(enumMixinStr_ESOCKTNOSUPPORT);
        }
    }
    
    #ifdef EPROTONOSUPPORT
    
    #endif
    static if(!is(typeof(EPROTONOSUPPORT))) {
        private enum enumMixinStr_EPROTONOSUPPORT = `enum EPROTONOSUPPORT = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROTONOSUPPORT); }))) {
            mixin(enumMixinStr_EPROTONOSUPPORT);
        }
    }
    
    #ifdef _PyDateTime_TIMEHEAD
    
    #endif
    static if(!is(typeof(_PyDateTime_TIMEHEAD))) {
        private enum enumMixinStr__PyDateTime_TIMEHEAD = `enum _PyDateTime_TIMEHEAD = PyObject_HEAD Py_hash_t hashcode ; char hastzinfo ; unsigned char data [ 6 ] ;;`;
        static if(is(typeof({ mixin(enumMixinStr__PyDateTime_TIMEHEAD); }))) {
            mixin(enumMixinStr__PyDateTime_TIMEHEAD);
        }
    }
    
    #ifdef ENOPROTOOPT
    
    #endif
    static if(!is(typeof(ENOPROTOOPT))) {
        private enum enumMixinStr_ENOPROTOOPT = `enum ENOPROTOOPT = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOPROTOOPT); }))) {
            mixin(enumMixinStr_ENOPROTOOPT);
        }
    }
    
    #ifdef EPROTOTYPE
    
    #endif
    static if(!is(typeof(EPROTOTYPE))) {
        private enum enumMixinStr_EPROTOTYPE = `enum EPROTOTYPE = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROTOTYPE); }))) {
            mixin(enumMixinStr_EPROTOTYPE);
        }
    }
    
    #ifdef EMSGSIZE
    
    #endif
    static if(!is(typeof(EMSGSIZE))) {
        private enum enumMixinStr_EMSGSIZE = `enum EMSGSIZE = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_EMSGSIZE); }))) {
            mixin(enumMixinStr_EMSGSIZE);
        }
    }
    
    #ifdef EDESTADDRREQ
    
    #endif
    static if(!is(typeof(EDESTADDRREQ))) {
        private enum enumMixinStr_EDESTADDRREQ = `enum EDESTADDRREQ = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_EDESTADDRREQ); }))) {
            mixin(enumMixinStr_EDESTADDRREQ);
        }
    }
    
    #ifdef ENOTSOCK
    
    #endif
    static if(!is(typeof(ENOTSOCK))) {
        private enum enumMixinStr_ENOTSOCK = `enum ENOTSOCK = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTSOCK); }))) {
            mixin(enumMixinStr_ENOTSOCK);
        }
    }
    
    #ifdef EALREADY
    
    #endif
    static if(!is(typeof(EALREADY))) {
        private enum enumMixinStr_EALREADY = `enum EALREADY = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_EALREADY); }))) {
            mixin(enumMixinStr_EALREADY);
        }
    }
    
    #ifdef EINPROGRESS
    
    #endif
    static if(!is(typeof(EINPROGRESS))) {
        private enum enumMixinStr_EINPROGRESS = `enum EINPROGRESS = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_EINPROGRESS); }))) {
            mixin(enumMixinStr_EINPROGRESS);
        }
    }
    
    #ifdef EWOULDBLOCK
    
    #endif
    static if(!is(typeof(EWOULDBLOCK))) {
        private enum enumMixinStr_EWOULDBLOCK = `enum EWOULDBLOCK = EAGAIN;`;
        static if(is(typeof({ mixin(enumMixinStr_EWOULDBLOCK); }))) {
            mixin(enumMixinStr_EWOULDBLOCK);
        }
    }
    
    #ifdef EAGAIN
    
    #endif
    static if(!is(typeof(EAGAIN))) {
        private enum enumMixinStr_EAGAIN = `enum EAGAIN = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_EAGAIN); }))) {
            mixin(enumMixinStr_EAGAIN);
        }
    }
    
    #ifdef ERANGE
    
    #endif
    static if(!is(typeof(ERANGE))) {
        private enum enumMixinStr_ERANGE = `enum ERANGE = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_ERANGE); }))) {
            mixin(enumMixinStr_ERANGE);
        }
    }
    
    #ifdef _PyDateTime_DATETIMEHEAD
    
    #endif
    static if(!is(typeof(_PyDateTime_DATETIMEHEAD))) {
        private enum enumMixinStr__PyDateTime_DATETIMEHEAD = `enum _PyDateTime_DATETIMEHEAD = PyObject_HEAD Py_hash_t hashcode ; char hastzinfo ; unsigned char data [ 10 ] ;;`;
        static if(is(typeof({ mixin(enumMixinStr__PyDateTime_DATETIMEHEAD); }))) {
            mixin(enumMixinStr__PyDateTime_DATETIMEHEAD);
        }
    }
    
    #ifdef EDOM
    
    #endif
    static if(!is(typeof(EDOM))) {
        private enum enumMixinStr_EDOM = `enum EDOM = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_EDOM); }))) {
            mixin(enumMixinStr_EDOM);
        }
    }
    
    #ifdef EPIPE
    
    #endif
    static if(!is(typeof(EPIPE))) {
        private enum enumMixinStr_EPIPE = `enum EPIPE = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_EPIPE); }))) {
            mixin(enumMixinStr_EPIPE);
        }
    }
    
    #ifdef EMLINK
    
    #endif
    static if(!is(typeof(EMLINK))) {
        private enum enumMixinStr_EMLINK = `enum EMLINK = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_EMLINK); }))) {
            mixin(enumMixinStr_EMLINK);
        }
    }
    
    #ifdef EROFS
    
    #endif
    static if(!is(typeof(EROFS))) {
        private enum enumMixinStr_EROFS = `enum EROFS = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_EROFS); }))) {
            mixin(enumMixinStr_EROFS);
        }
    }
    
    #ifdef ESPIPE
    
    #endif
    static if(!is(typeof(ESPIPE))) {
        private enum enumMixinStr_ESPIPE = `enum ESPIPE = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_ESPIPE); }))) {
            mixin(enumMixinStr_ESPIPE);
        }
    }
    
    #ifdef ENOSPC
    
    #endif
    static if(!is(typeof(ENOSPC))) {
        private enum enumMixinStr_ENOSPC = `enum ENOSPC = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSPC); }))) {
            mixin(enumMixinStr_ENOSPC);
        }
    }
    
    #define PyDateTime_GET_YEAR( o ) ( ( ( cast( PyDateTime_Date * ) o ) . data [ 0 ] << 8 ) | ( cast( PyDateTime_Date * ) o ) . data [ 1 ] )

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(EFBIG))) {
        private enum enumMixinStr_EFBIG = `enum EFBIG = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_EFBIG); }))) {
            mixin(enumMixinStr_EFBIG);
        }
    }
    
    #ifdef ETXTBSY
    
    #endif
    static if(!is(typeof(ETXTBSY))) {
        private enum enumMixinStr_ETXTBSY = `enum ETXTBSY = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_ETXTBSY); }))) {
            mixin(enumMixinStr_ETXTBSY);
        }
    }
    
    #ifdef PyDateTime_CAPSULE_NAME
    
    #endif
    static if(!is(typeof(PyDateTime_CAPSULE_NAME))) {
        private enum enumMixinStr_PyDateTime_CAPSULE_NAME = `enum PyDateTime_CAPSULE_NAME = "datetime.datetime_CAPI";`;
        static if(is(typeof({ mixin(enumMixinStr_PyDateTime_CAPSULE_NAME); }))) {
            mixin(enumMixinStr_PyDateTime_CAPSULE_NAME);
        }
    }
    
    #ifdef ENOTTY
    
    #endif
    static if(!is(typeof(ENOTTY))) {
        private enum enumMixinStr_ENOTTY = `enum ENOTTY = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTTY); }))) {
            mixin(enumMixinStr_ENOTTY);
        }
    }
    
    #ifdef EMFILE
    
    #endif
    static if(!is(typeof(EMFILE))) {
        private enum enumMixinStr_EMFILE = `enum EMFILE = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_EMFILE); }))) {
            mixin(enumMixinStr_EMFILE);
        }
    }
    
    #ifdef PyDateTime_IMPORT
    
    #endif
    static if(!is(typeof(PyDateTime_IMPORT))) {
        private enum enumMixinStr_PyDateTime_IMPORT = `enum PyDateTime_IMPORT = PyDateTimeAPI = cast( PyDateTime_CAPI * ) PyCapsule_Import ( "datetime.datetime_CAPI" , 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyDateTime_IMPORT); }))) {
            mixin(enumMixinStr_PyDateTime_IMPORT);
        }
    }
    
    #ifdef PyDateTime_TimeZone_UTC
    
    #endif
    static if(!is(typeof(PyDateTime_TimeZone_UTC))) {
        private enum enumMixinStr_PyDateTime_TimeZone_UTC = `enum PyDateTime_TimeZone_UTC = PyDateTimeAPI . TimeZone_UTC;`;
        static if(is(typeof({ mixin(enumMixinStr_PyDateTime_TimeZone_UTC); }))) {
            mixin(enumMixinStr_PyDateTime_TimeZone_UTC);
        }
    }
    
    #define PyDate_Check( op ) PyObject_TypeCheck ( op , PyDateTimeAPI . DateType )

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(ENFILE))) {
        private enum enumMixinStr_ENFILE = `enum ENFILE = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_ENFILE); }))) {
            mixin(enumMixinStr_ENFILE);
        }
    }
    
    #ifdef EINVAL
    
    #endif
    static if(!is(typeof(EINVAL))) {
        private enum enumMixinStr_EINVAL = `enum EINVAL = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_EINVAL); }))) {
            mixin(enumMixinStr_EINVAL);
        }
    }
    
    #ifdef EISDIR
    
    #endif
    static if(!is(typeof(EISDIR))) {
        private enum enumMixinStr_EISDIR = `enum EISDIR = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_EISDIR); }))) {
            mixin(enumMixinStr_EISDIR);
        }
    }
    
    #ifdef ENOTDIR
    
    #endif
    static if(!is(typeof(ENOTDIR))) {
        private enum enumMixinStr_ENOTDIR = `enum ENOTDIR = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTDIR); }))) {
            mixin(enumMixinStr_ENOTDIR);
        }
    }
    
    #ifdef ENODEV
    
    #endif
    static if(!is(typeof(ENODEV))) {
        private enum enumMixinStr_ENODEV = `enum ENODEV = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_ENODEV); }))) {
            mixin(enumMixinStr_ENODEV);
        }
    }
    
    #ifdef EXDEV
    
    #endif
    static if(!is(typeof(EXDEV))) {
        private enum enumMixinStr_EXDEV = `enum EXDEV = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_EXDEV); }))) {
            mixin(enumMixinStr_EXDEV);
        }
    }
    
    #ifdef PyWrapperFlag_KEYWORDS
    
    #endif
    static if(!is(typeof(PyWrapperFlag_KEYWORDS))) {
        private enum enumMixinStr_PyWrapperFlag_KEYWORDS = `enum PyWrapperFlag_KEYWORDS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PyWrapperFlag_KEYWORDS); }))) {
            mixin(enumMixinStr_PyWrapperFlag_KEYWORDS);
        }
    }
    
    #ifdef EEXIST
    
    #endif
    static if(!is(typeof(EEXIST))) {
        private enum enumMixinStr_EEXIST = `enum EEXIST = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_EEXIST); }))) {
            mixin(enumMixinStr_EEXIST);
        }
    }
    
    #ifdef EBUSY
    
    #endif
    static if(!is(typeof(EBUSY))) {
        private enum enumMixinStr_EBUSY = `enum EBUSY = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_EBUSY); }))) {
            mixin(enumMixinStr_EBUSY);
        }
    }
    
    #ifdef ENOTBLK
    
    #endif
    static if(!is(typeof(ENOTBLK))) {
        private enum enumMixinStr_ENOTBLK = `enum ENOTBLK = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTBLK); }))) {
            mixin(enumMixinStr_ENOTBLK);
        }
    }
    
    #ifdef PyDescr_COMMON
    
    #endif
    static if(!is(typeof(PyDescr_COMMON))) {
        private enum enumMixinStr_PyDescr_COMMON = `enum PyDescr_COMMON = PyDescrObject d_common;`;
        static if(is(typeof({ mixin(enumMixinStr_PyDescr_COMMON); }))) {
            mixin(enumMixinStr_PyDescr_COMMON);
        }
    }
    
    #define PyDescr_TYPE( x ) ( ( cast( PyDescrObject * ) ( x ) ) . d_type )

    

    


    static if(!is(typeof(EFAULT))) {
        private enum enumMixinStr_EFAULT = `enum EFAULT = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_EFAULT); }))) {
            mixin(enumMixinStr_EFAULT);
        }
    }
    
    #ifdef EACCES
    
    #endif
    static if(!is(typeof(EACCES))) {
        private enum enumMixinStr_EACCES = `enum EACCES = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_EACCES); }))) {
            mixin(enumMixinStr_EACCES);
        }
    }
    
    #ifdef ENOMEM
    
    #endif
    static if(!is(typeof(ENOMEM))) {
        private enum enumMixinStr_ENOMEM = `enum ENOMEM = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOMEM); }))) {
            mixin(enumMixinStr_ENOMEM);
        }
    }
    
    #ifdef EDEADLK
    
    #endif
    static if(!is(typeof(EDEADLK))) {
        private enum enumMixinStr_EDEADLK = `enum EDEADLK = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_EDEADLK); }))) {
            mixin(enumMixinStr_EDEADLK);
        }
    }
    
    #ifdef ECHILD
    
    #endif
    static if(!is(typeof(ECHILD))) {
        private enum enumMixinStr_ECHILD = `enum ECHILD = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_ECHILD); }))) {
            mixin(enumMixinStr_ECHILD);
        }
    }
    
    #ifdef EBADF
    
    #endif
    static if(!is(typeof(EBADF))) {
        private enum enumMixinStr_EBADF = `enum EBADF = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADF); }))) {
            mixin(enumMixinStr_EBADF);
        }
    }
    
    #ifdef ENOEXEC
    
    #endif
    static if(!is(typeof(ENOEXEC))) {
        private enum enumMixinStr_ENOEXEC = `enum ENOEXEC = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOEXEC); }))) {
            mixin(enumMixinStr_ENOEXEC);
        }
    }
    
    #ifdef E2BIG
    
    #endif
    static if(!is(typeof(E2BIG))) {
        private enum enumMixinStr_E2BIG = `enum E2BIG = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_E2BIG); }))) {
            mixin(enumMixinStr_E2BIG);
        }
    }
    
    #ifdef ENXIO
    
    #endif
    static if(!is(typeof(ENXIO))) {
        private enum enumMixinStr_ENXIO = `enum ENXIO = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_ENXIO); }))) {
            mixin(enumMixinStr_ENXIO);
        }
    }
    
    #ifdef EIO
    
    #endif
    static if(!is(typeof(EIO))) {
        private enum enumMixinStr_EIO = `enum EIO = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_EIO); }))) {
            mixin(enumMixinStr_EIO);
        }
    }
    
    #ifdef EINTR
    
    #endif
    static if(!is(typeof(EINTR))) {
        private enum enumMixinStr_EINTR = `enum EINTR = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EINTR); }))) {
            mixin(enumMixinStr_EINTR);
        }
    }
    
    #ifdef ESRCH
    
    #endif
    static if(!is(typeof(ESRCH))) {
        private enum enumMixinStr_ESRCH = `enum ESRCH = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ESRCH); }))) {
            mixin(enumMixinStr_ESRCH);
        }
    }
    
    #ifdef ENOENT
    
    #endif
    static if(!is(typeof(ENOENT))) {
        private enum enumMixinStr_ENOENT = `enum ENOENT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOENT); }))) {
            mixin(enumMixinStr_ENOENT);
        }
    }
    
    #ifdef EPERM
    
    #endif
    static if(!is(typeof(EPERM))) {
        private enum enumMixinStr_EPERM = `enum EPERM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EPERM); }))) {
            mixin(enumMixinStr_EPERM);
        }
    }
    
    #ifdef errno
    
    #endif
    static if(!is(typeof(errno))) {
        private enum enumMixinStr_errno = `enum errno = ( * __error ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_errno); }))) {
            mixin(enumMixinStr_errno);
        }
    }
    
    #define _SYS_ERRNO_H_ 

    

    

    

    

    


    static if(!is(typeof(__enum_options))) {
        private enum enumMixinStr___enum_options = `enum __enum_options = __attribute__ ( ( __flag_enum__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___enum_options); }))) {
            mixin(enumMixinStr___enum_options);
        }
    }
    
    #ifdef __enum_closed
    
    #endif
    static if(!is(typeof(__enum_closed))) {
        private enum enumMixinStr___enum_closed = `enum __enum_closed = __attribute__ ( ( __enum_extensibility__ ( closed ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___enum_closed); }))) {
            mixin(enumMixinStr___enum_closed);
        }
    }
    
    #ifdef __enum_open
    
    #endif
    static if(!is(typeof(__enum_open))) {
        private enum enumMixinStr___enum_open = `enum __enum_open = __attribute__ ( ( __enum_extensibility__ ( open ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___enum_open); }))) {
            mixin(enumMixinStr___enum_open);
        }
    }
    
    #define __compiler_barrier( ) __asm__ __volatile__ ( "" : : : "memory" )

    


    static if(!is(typeof(__XNU_PRIVATE_EXTERN))) {
        private enum enumMixinStr___XNU_PRIVATE_EXTERN = `enum __XNU_PRIVATE_EXTERN = __attribute__ ( ( visibility ( "hidden" ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___XNU_PRIVATE_EXTERN); }))) {
            mixin(enumMixinStr___XNU_PRIVATE_EXTERN);
        }
    }
    
    #define __CAST_AWAY_QUALIFIER( variable , qualifier , type ) ( type ) cast( long ) ( variable )

    


    static if(!is(typeof(_DARWIN_FEATURE_UNIX_CONFORMANCE))) {
        private enum enumMixinStr__DARWIN_FEATURE_UNIX_CONFORMANCE = `enum _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr__DARWIN_FEATURE_UNIX_CONFORMANCE); }))) {
            mixin(enumMixinStr__DARWIN_FEATURE_UNIX_CONFORMANCE);
        }
    }
    
    #ifdef _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE
    
    #endif
    static if(!is(typeof(_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE))) {
        private enum enumMixinStr__DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = `enum _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE); }))) {
            mixin(enumMixinStr__DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE);
        }
    }
    
    #ifdef _DARWIN_FEATURE_64_BIT_INODE
    
    #endif
    static if(!is(typeof(_DARWIN_FEATURE_64_BIT_INODE))) {
        private enum enumMixinStr__DARWIN_FEATURE_64_BIT_INODE = `enum _DARWIN_FEATURE_64_BIT_INODE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DARWIN_FEATURE_64_BIT_INODE); }))) {
            mixin(enumMixinStr__DARWIN_FEATURE_64_BIT_INODE);
        }
    }
    
    #ifdef __DARWIN_NO_LONG_LONG
    
    #endif
    static if(!is(typeof(__DARWIN_NO_LONG_LONG))) {
        private enum enumMixinStr___DARWIN_NO_LONG_LONG = `enum __DARWIN_NO_LONG_LONG = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_NO_LONG_LONG); }))) {
            mixin(enumMixinStr___DARWIN_NO_LONG_LONG);
        }
    }
    
    #ifdef __DARWIN_C_LEVEL
    
    #endif
    static if(!is(typeof(__DARWIN_C_LEVEL))) {
        private enum enumMixinStr___DARWIN_C_LEVEL = `enum __DARWIN_C_LEVEL = __DARWIN_C_FULL;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_C_LEVEL); }))) {
            mixin(enumMixinStr___DARWIN_C_LEVEL);
        }
    }
    
    #ifdef __DARWIN_C_FULL
    
    #endif
    static if(!is(typeof(__DARWIN_C_FULL))) {
        private enum enumMixinStr___DARWIN_C_FULL = `enum __DARWIN_C_FULL = 900000L;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_C_FULL); }))) {
            mixin(enumMixinStr___DARWIN_C_FULL);
        }
    }
    
    #ifdef __DARWIN_C_ANSI
    
    #endif
    static if(!is(typeof(__DARWIN_C_ANSI))) {
        private enum enumMixinStr___DARWIN_C_ANSI = `enum __DARWIN_C_ANSI = std.conv.octal!10000L;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_C_ANSI); }))) {
            mixin(enumMixinStr___DARWIN_C_ANSI);
        }
    }
    
    #define __POSIX_C_DEPRECATED( ver ) ___POSIX_C_DEPRECATED_STARTING_ ## ver

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__DARWIN_SUF_EXTSN))) {
        private enum enumMixinStr___DARWIN_SUF_EXTSN = `enum __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_SUF_EXTSN); }))) {
            mixin(enumMixinStr___DARWIN_SUF_EXTSN);
        }
    }
    
    #define __DARWIN_SUF_NON_CANCELABLE 

    


    static if(!is(typeof(__DARWIN_SUF_1050))) {
        private enum enumMixinStr___DARWIN_SUF_1050 = `enum __DARWIN_SUF_1050 = "$1050";`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_SUF_1050); }))) {
            mixin(enumMixinStr___DARWIN_SUF_1050);
        }
    }
    
    #ifdef __DARWIN_SUF_64_BIT_INO_T
    
    #endif
    static if(!is(typeof(__DARWIN_SUF_64_BIT_INO_T))) {
        private enum enumMixinStr___DARWIN_SUF_64_BIT_INO_T = `enum __DARWIN_SUF_64_BIT_INO_T = "$INODE64";`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_SUF_64_BIT_INO_T); }))) {
            mixin(enumMixinStr___DARWIN_SUF_64_BIT_INO_T);
        }
    }
    
    #define __DARWIN_SUF_UNIX03 

    


    static if(!is(typeof(__DARWIN_NON_CANCELABLE))) {
        private enum enumMixinStr___DARWIN_NON_CANCELABLE = `enum __DARWIN_NON_CANCELABLE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_NON_CANCELABLE); }))) {
            mixin(enumMixinStr___DARWIN_NON_CANCELABLE);
        }
    }
    
    #ifdef __DARWIN_VERS_1050
    
    #endif
    static if(!is(typeof(__DARWIN_VERS_1050))) {
        private enum enumMixinStr___DARWIN_VERS_1050 = `enum __DARWIN_VERS_1050 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_VERS_1050); }))) {
            mixin(enumMixinStr___DARWIN_VERS_1050);
        }
    }
    
    #ifdef __DARWIN_64_BIT_INO_T
    
    #endif
    static if(!is(typeof(__DARWIN_64_BIT_INO_T))) {
        private enum enumMixinStr___DARWIN_64_BIT_INO_T = `enum __DARWIN_64_BIT_INO_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_64_BIT_INO_T); }))) {
            mixin(enumMixinStr___DARWIN_64_BIT_INO_T);
        }
    }
    
    #ifdef __DARWIN_UNIX03
    
    #endif
    static if(!is(typeof(__DARWIN_UNIX03))) {
        private enum enumMixinStr___DARWIN_UNIX03 = `enum __DARWIN_UNIX03 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_UNIX03); }))) {
            mixin(enumMixinStr___DARWIN_UNIX03);
        }
    }
    
    #ifdef __DARWIN_ONLY_UNIX_CONFORMANCE
    
    #endif
    static if(!is(typeof(__DARWIN_ONLY_UNIX_CONFORMANCE))) {
        private enum enumMixinStr___DARWIN_ONLY_UNIX_CONFORMANCE = `enum __DARWIN_ONLY_UNIX_CONFORMANCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_ONLY_UNIX_CONFORMANCE); }))) {
            mixin(enumMixinStr___DARWIN_ONLY_UNIX_CONFORMANCE);
        }
    }
    
    #ifdef __DARWIN_ONLY_VERS_1050
    
    #endif
    static if(!is(typeof(__DARWIN_ONLY_VERS_1050))) {
        private enum enumMixinStr___DARWIN_ONLY_VERS_1050 = `enum __DARWIN_ONLY_VERS_1050 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_ONLY_VERS_1050); }))) {
            mixin(enumMixinStr___DARWIN_ONLY_VERS_1050);
        }
    }
    
    #ifdef __DARWIN_ONLY_64_BIT_INO_T
    
    #endif
    static if(!is(typeof(__DARWIN_ONLY_64_BIT_INO_T))) {
        private enum enumMixinStr___DARWIN_ONLY_64_BIT_INO_T = `enum __DARWIN_ONLY_64_BIT_INO_T = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_ONLY_64_BIT_INO_T); }))) {
            mixin(enumMixinStr___DARWIN_ONLY_64_BIT_INO_T);
        }
    }
    
    #define __alloc_size( ... ) __attribute__ ( ( alloc_size ( __VA_ARGS__ ) ) )

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__unreachable_ok_pop))) {
        private enum enumMixinStr___unreachable_ok_pop = `enum __unreachable_ok_pop =  ( "clang diagnostic pop" );`;
        static if(is(typeof({ mixin(enumMixinStr___unreachable_ok_pop); }))) {
            mixin(enumMixinStr___unreachable_ok_pop);
        }
    }
    
    #ifdef __unreachable_ok_push
    
    #endif
    static if(!is(typeof(__unreachable_ok_push))) {
        private enum enumMixinStr___unreachable_ok_push = `enum __unreachable_ok_push =  ( "clang diagnostic push" )  ( "clang diagnostic ignored \"-Wunreachable-code\"" );`;
        static if(is(typeof({ mixin(enumMixinStr___unreachable_ok_push); }))) {
            mixin(enumMixinStr___unreachable_ok_push);
        }
    }
    
    #ifdef __header_always_inline
    
    #endif
    static if(!is(typeof(__header_always_inline))) {
        private enum enumMixinStr___header_always_inline = `enum __header_always_inline = __header_inline __attribute__ ( ( __always_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___header_always_inline); }))) {
            mixin(enumMixinStr___header_always_inline);
        }
    }
    
    #ifdef __header_inline
    
    #endif
    static if(!is(typeof(__header_inline))) {
        private enum enumMixinStr___header_inline = `enum __header_inline = inline;`;
        static if(is(typeof({ mixin(enumMixinStr___header_inline); }))) {
            mixin(enumMixinStr___header_inline);
        }
    }
    
    #ifdef __abortlike
    
    #endif
    static if(!is(typeof(__abortlike))) {
        private enum enumMixinStr___abortlike = `enum __abortlike = __dead2 __cold __not_tail_called;`;
        static if(is(typeof({ mixin(enumMixinStr___abortlike); }))) {
            mixin(enumMixinStr___abortlike);
        }
    }
    
    #define __swift_unavailable( _msg ) __attribute__ ( ( __availability__ ( swift , unavailable , message = _msg ) ) )

    


    static if(!is(typeof(__result_use_check))) {
        private enum enumMixinStr___result_use_check = `enum __result_use_check = __attribute__ ( ( __warn_unused_result__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___result_use_check); }))) {
            mixin(enumMixinStr___result_use_check);
        }
    }
    
    #ifdef __not_tail_called
    
    #endif
    static if(!is(typeof(__not_tail_called))) {
        private enum enumMixinStr___not_tail_called = `enum __not_tail_called = __attribute__ ( ( __not_tail_called__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___not_tail_called); }))) {
            mixin(enumMixinStr___not_tail_called);
        }
    }
    
    #ifdef __disable_tail_calls
    
    #endif
    static if(!is(typeof(__disable_tail_calls))) {
        private enum enumMixinStr___disable_tail_calls = `enum __disable_tail_calls = __attribute__ ( ( __disable_tail_calls__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___disable_tail_calls); }))) {
            mixin(enumMixinStr___disable_tail_calls);
        }
    }
    
    #ifdef __restrict
    
    #endif
    static if(!is(typeof(__restrict))) {
        private enum enumMixinStr___restrict = `enum __restrict = restrict;`;
        static if(is(typeof({ mixin(enumMixinStr___restrict); }))) {
            mixin(enumMixinStr___restrict);
        }
    }
    
    #define __pure 

    

    


    static if(!is(typeof(__unavailable))) {
        private enum enumMixinStr___unavailable = `enum __unavailable = __attribute__ ( ( __unavailable__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___unavailable); }))) {
            mixin(enumMixinStr___unavailable);
        }
    }
    
    #define __kpi_deprecated( _msg )

    

    

    

    

    

    

    


    static if(!is(typeof(__deprecated))) {
        private enum enumMixinStr___deprecated = `enum __deprecated = __attribute__ ( ( __deprecated__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___deprecated); }))) {
            mixin(enumMixinStr___deprecated);
        }
    }
    
    #ifdef __cold
    
    #endif
    static if(!is(typeof(__cold))) {
        private enum enumMixinStr___cold = `enum __cold = __attribute__ ( ( __cold__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___cold); }))) {
            mixin(enumMixinStr___cold);
        }
    }
    
    #ifdef __used
    
    #endif
    static if(!is(typeof(__used))) {
        private enum enumMixinStr___used = `enum __used = __attribute__ ( ( __used__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___used); }))) {
            mixin(enumMixinStr___used);
        }
    }
    
    #ifdef __unused
    
    #endif
    static if(!is(typeof(__unused))) {
        private enum enumMixinStr___unused = `enum __unused = __attribute__ ( ( __unused__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___unused); }))) {
            mixin(enumMixinStr___unused);
        }
    }
    
    #ifdef __pure2
    
    #endif
    static if(!is(typeof(__pure2))) {
        private enum enumMixinStr___pure2 = `enum __pure2 = __attribute__ ( cast( __const__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___pure2); }))) {
            mixin(enumMixinStr___pure2);
        }
    }
    
    #ifdef __dead2
    
    #endif
    static if(!is(typeof(__dead2))) {
        private enum enumMixinStr___dead2 = `enum __dead2 = __attribute__ ( ( __noreturn__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___dead2); }))) {
            mixin(enumMixinStr___dead2);
        }
    }
    
    #ifdef __volatile
    
    #endif
    static if(!is(typeof(__volatile))) {
        private enum enumMixinStr___volatile = `enum __volatile = volatile;`;
        static if(is(typeof({ mixin(enumMixinStr___volatile); }))) {
            mixin(enumMixinStr___volatile);
        }
    }
    
    #ifdef __signed
    
    #endif
    static if(!is(typeof(__signed))) {
        private enum enumMixinStr___signed = `enum __signed = signed;`;
        static if(is(typeof({ mixin(enumMixinStr___signed); }))) {
            mixin(enumMixinStr___signed);
        }
    }
    
    #ifdef __const
    
    #endif
    static if(!is(typeof(__const))) {
        private enum enumMixinStr___const = `enum __const = const;`;
        static if(is(typeof({ mixin(enumMixinStr___const); }))) {
            mixin(enumMixinStr___const);
        }
    }
    
    #define __STRING( x ) # x

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(_STRUCT_UCONTEXT))) {
        private enum enumMixinStr__STRUCT_UCONTEXT = `enum _STRUCT_UCONTEXT = __darwin_ucontext;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_UCONTEXT); }))) {
            mixin(enumMixinStr__STRUCT_UCONTEXT);
        }
    }
    
    #define _U_INT8_T 

    

    

    

    

    


    static if(!is(typeof(PY_STDIOTEXTMODE))) {
        private enum enumMixinStr_PY_STDIOTEXTMODE = `enum PY_STDIOTEXTMODE = "b";`;
        static if(is(typeof({ mixin(enumMixinStr_PY_STDIOTEXTMODE); }))) {
            mixin(enumMixinStr_PY_STDIOTEXTMODE);
        }
    }
    
    #define _STRUCT_TIMEVAL64 

    


    static if(!is(typeof(_STRUCT_TIMEVAL))) {
        private enum enumMixinStr__STRUCT_TIMEVAL = `enum _STRUCT_TIMEVAL = timeval;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_TIMEVAL); }))) {
            mixin(enumMixinStr__STRUCT_TIMEVAL);
        }
    }
    
    #ifdef _STRUCT_TIMESPEC
    
    #endif
    static if(!is(typeof(_STRUCT_TIMESPEC))) {
        private enum enumMixinStr__STRUCT_TIMESPEC = `enum _STRUCT_TIMESPEC = timespec;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_TIMESPEC); }))) {
            mixin(enumMixinStr__STRUCT_TIMESPEC);
        }
    }
    
    #define _TIME_T 

    

    

    

    

    


    static if(!is(typeof(_STRUCT_SIGALTSTACK))) {
        private enum enumMixinStr__STRUCT_SIGALTSTACK = `enum _STRUCT_SIGALTSTACK = __darwin_sigaltstack;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_SIGALTSTACK); }))) {
            mixin(enumMixinStr__STRUCT_SIGALTSTACK);
        }
    }
    
    #ifdef SEEK_DATA
    
    #endif
    static if(!is(typeof(SEEK_DATA))) {
        private enum enumMixinStr_SEEK_DATA = `enum SEEK_DATA = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_DATA); }))) {
            mixin(enumMixinStr_SEEK_DATA);
        }
    }
    
    #ifdef SEEK_HOLE
    
    #endif
    static if(!is(typeof(SEEK_HOLE))) {
        private enum enumMixinStr_SEEK_HOLE = `enum SEEK_HOLE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_HOLE); }))) {
            mixin(enumMixinStr_SEEK_HOLE);
        }
    }
    
    #ifdef S_IEXEC
    
    #endif
    static if(!is(typeof(S_IEXEC))) {
        private enum enumMixinStr_S_IEXEC = `enum S_IEXEC = S_IXUSR;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IEXEC); }))) {
            mixin(enumMixinStr_S_IEXEC);
        }
    }
    
    #ifdef S_IWRITE
    
    #endif
    static if(!is(typeof(S_IWRITE))) {
        private enum enumMixinStr_S_IWRITE = `enum S_IWRITE = S_IWUSR;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IWRITE); }))) {
            mixin(enumMixinStr_S_IWRITE);
        }
    }
    
    #ifdef S_IREAD
    
    #endif
    static if(!is(typeof(S_IREAD))) {
        private enum enumMixinStr_S_IREAD = `enum S_IREAD = S_IRUSR;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IREAD); }))) {
            mixin(enumMixinStr_S_IREAD);
        }
    }
    
    #define _PyIsSelectable_fd( FD ) ( ( unsigned int ) ( FD ) < ( unsigned int ) FD_SETSIZE )

    

    


    static if(!is(typeof(S_ISTXT))) {
        private enum enumMixinStr_S_ISTXT = `enum S_ISTXT = S_ISVTX;`;
        static if(is(typeof({ mixin(enumMixinStr_S_ISTXT); }))) {
            mixin(enumMixinStr_S_ISTXT);
        }
    }
    
    #define Py_FILEUTILS_H 

    


    static if(!is(typeof(S_ISVTX))) {
        private enum enumMixinStr_S_ISVTX = `enum S_ISVTX = std.conv.octal!1000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_ISVTX); }))) {
            mixin(enumMixinStr_S_ISVTX);
        }
    }
    
    #ifdef S_ISGID
    
    #endif
    static if(!is(typeof(S_ISGID))) {
        private enum enumMixinStr_S_ISGID = `enum S_ISGID = std.conv.octal!2000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_ISGID); }))) {
            mixin(enumMixinStr_S_ISGID);
        }
    }
    
    #ifdef S_ISUID
    
    #endif
    static if(!is(typeof(S_ISUID))) {
        private enum enumMixinStr_S_ISUID = `enum S_ISUID = std.conv.octal!4000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_ISUID); }))) {
            mixin(enumMixinStr_S_ISUID);
        }
    }
    
    #ifdef S_IXOTH
    
    #endif
    static if(!is(typeof(S_IXOTH))) {
        private enum enumMixinStr_S_IXOTH = `enum S_IXOTH = std.conv.octal!1;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IXOTH); }))) {
            mixin(enumMixinStr_S_IXOTH);
        }
    }
    
    #ifdef S_IWOTH
    
    #endif
    static if(!is(typeof(S_IWOTH))) {
        private enum enumMixinStr_S_IWOTH = `enum S_IWOTH = std.conv.octal!2;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IWOTH); }))) {
            mixin(enumMixinStr_S_IWOTH);
        }
    }
    
    #ifdef S_IROTH
    
    #endif
    static if(!is(typeof(S_IROTH))) {
        private enum enumMixinStr_S_IROTH = `enum S_IROTH = std.conv.octal!4;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IROTH); }))) {
            mixin(enumMixinStr_S_IROTH);
        }
    }
    
    #ifdef S_IRWXO
    
    #endif
    static if(!is(typeof(S_IRWXO))) {
        private enum enumMixinStr_S_IRWXO = `enum S_IRWXO = std.conv.octal!7;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IRWXO); }))) {
            mixin(enumMixinStr_S_IRWXO);
        }
    }
    
    #ifdef S_IXGRP
    
    #endif
    static if(!is(typeof(S_IXGRP))) {
        private enum enumMixinStr_S_IXGRP = `enum S_IXGRP = std.conv.octal!10;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IXGRP); }))) {
            mixin(enumMixinStr_S_IXGRP);
        }
    }
    
    #ifdef S_IWGRP
    
    #endif
    static if(!is(typeof(S_IWGRP))) {
        private enum enumMixinStr_S_IWGRP = `enum S_IWGRP = std.conv.octal!20;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IWGRP); }))) {
            mixin(enumMixinStr_S_IWGRP);
        }
    }
    
    #ifdef S_IRGRP
    
    #endif
    static if(!is(typeof(S_IRGRP))) {
        private enum enumMixinStr_S_IRGRP = `enum S_IRGRP = std.conv.octal!40;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IRGRP); }))) {
            mixin(enumMixinStr_S_IRGRP);
        }
    }
    
    #ifdef S_IRWXG
    
    #endif
    static if(!is(typeof(S_IRWXG))) {
        private enum enumMixinStr_S_IRWXG = `enum S_IRWXG = std.conv.octal!70;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IRWXG); }))) {
            mixin(enumMixinStr_S_IRWXG);
        }
    }
    
    #ifdef S_IXUSR
    
    #endif
    static if(!is(typeof(S_IXUSR))) {
        private enum enumMixinStr_S_IXUSR = `enum S_IXUSR = std.conv.octal!100;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IXUSR); }))) {
            mixin(enumMixinStr_S_IXUSR);
        }
    }
    
    #ifdef S_IWUSR
    
    #endif
    static if(!is(typeof(S_IWUSR))) {
        private enum enumMixinStr_S_IWUSR = `enum S_IWUSR = std.conv.octal!200;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IWUSR); }))) {
            mixin(enumMixinStr_S_IWUSR);
        }
    }
    
    #ifdef S_IRUSR
    
    #endif
    static if(!is(typeof(S_IRUSR))) {
        private enum enumMixinStr_S_IRUSR = `enum S_IRUSR = std.conv.octal!400;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IRUSR); }))) {
            mixin(enumMixinStr_S_IRUSR);
        }
    }
    
    #ifdef S_IRWXU
    
    #endif
    static if(!is(typeof(S_IRWXU))) {
        private enum enumMixinStr_S_IRWXU = `enum S_IRWXU = std.conv.octal!700;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IRWXU); }))) {
            mixin(enumMixinStr_S_IRWXU);
        }
    }
    
    #ifdef S_IFWHT
    
    #endif
    static if(!is(typeof(S_IFWHT))) {
        private enum enumMixinStr_S_IFWHT = `enum S_IFWHT = std.conv.octal!160000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFWHT); }))) {
            mixin(enumMixinStr_S_IFWHT);
        }
    }
    
    #ifdef S_IFSOCK
    
    #endif
    static if(!is(typeof(S_IFSOCK))) {
        private enum enumMixinStr_S_IFSOCK = `enum S_IFSOCK = std.conv.octal!140000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFSOCK); }))) {
            mixin(enumMixinStr_S_IFSOCK);
        }
    }
    
    #ifdef _PY_READ_MAX
    
    #endif
    static if(!is(typeof(_PY_READ_MAX))) {
        private enum enumMixinStr__PY_READ_MAX = `enum _PY_READ_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr__PY_READ_MAX); }))) {
            mixin(enumMixinStr__PY_READ_MAX);
        }
    }
    
    #ifdef _PY_WRITE_MAX
    
    #endif
    static if(!is(typeof(_PY_WRITE_MAX))) {
        private enum enumMixinStr__PY_WRITE_MAX = `enum _PY_WRITE_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr__PY_WRITE_MAX); }))) {
            mixin(enumMixinStr__PY_WRITE_MAX);
        }
    }
    
    #ifdef _Py_stat_struct
    
    #endif
    static if(!is(typeof(_Py_stat_struct))) {
        private enum enumMixinStr__Py_stat_struct = `enum _Py_stat_struct = stat;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_stat_struct); }))) {
            mixin(enumMixinStr__Py_stat_struct);
        }
    }
    
    #ifdef S_IFLNK
    
    #endif
    static if(!is(typeof(S_IFLNK))) {
        private enum enumMixinStr_S_IFLNK = `enum S_IFLNK = std.conv.octal!120000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFLNK); }))) {
            mixin(enumMixinStr_S_IFLNK);
        }
    }
    
    #ifdef S_IFREG
    
    #endif
    static if(!is(typeof(S_IFREG))) {
        private enum enumMixinStr_S_IFREG = `enum S_IFREG = std.conv.octal!100000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFREG); }))) {
            mixin(enumMixinStr_S_IFREG);
        }
    }
    
    #ifdef S_IFBLK
    
    #endif
    static if(!is(typeof(S_IFBLK))) {
        private enum enumMixinStr_S_IFBLK = `enum S_IFBLK = std.conv.octal!60000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFBLK); }))) {
            mixin(enumMixinStr_S_IFBLK);
        }
    }
    
    #ifdef S_IFDIR
    
    #endif
    static if(!is(typeof(S_IFDIR))) {
        private enum enumMixinStr_S_IFDIR = `enum S_IFDIR = std.conv.octal!40000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFDIR); }))) {
            mixin(enumMixinStr_S_IFDIR);
        }
    }
    
    #ifdef S_IFCHR
    
    #endif
    static if(!is(typeof(S_IFCHR))) {
        private enum enumMixinStr_S_IFCHR = `enum S_IFCHR = std.conv.octal!20000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFCHR); }))) {
            mixin(enumMixinStr_S_IFCHR);
        }
    }
    
    #ifdef S_IFIFO
    
    #endif
    static if(!is(typeof(S_IFIFO))) {
        private enum enumMixinStr_S_IFIFO = `enum S_IFIFO = std.conv.octal!10000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFIFO); }))) {
            mixin(enumMixinStr_S_IFIFO);
        }
    }
    
    #ifdef S_IFMT
    
    #endif
    static if(!is(typeof(S_IFMT))) {
        private enum enumMixinStr_S_IFMT = `enum S_IFMT = std.conv.octal!170000;`;
        static if(is(typeof({ mixin(enumMixinStr_S_IFMT); }))) {
            mixin(enumMixinStr_S_IFMT);
        }
    }
    
    #define _RUNE_T 

    

    


    static if(!is(typeof(_POSIX_VDISABLE))) {
        private enum enumMixinStr__POSIX_VDISABLE = `enum _POSIX_VDISABLE = ( ( unsigned char ) '\377' );`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_VDISABLE); }))) {
            mixin(enumMixinStr__POSIX_VDISABLE);
        }
    }
    
    #define _PID_T 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(FD_SETSIZE))) {
        private enum enumMixinStr_FD_SETSIZE = `enum FD_SETSIZE = __DARWIN_FD_SETSIZE;`;
        static if(is(typeof({ mixin(enumMixinStr_FD_SETSIZE); }))) {
            mixin(enumMixinStr_FD_SETSIZE);
        }
    }
    
    #define FD_SET( n , p ) __DARWIN_FD_SET ( n , p )

    

    

    

    

    

    

    

    


    static if(!is(typeof(__DARWIN_NFDBITS))) {
        private enum enumMixinStr___DARWIN_NFDBITS = `enum __DARWIN_NFDBITS = ( ( __int32_t ) .sizeof * __DARWIN_NBBY );`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_NFDBITS); }))) {
            mixin(enumMixinStr___DARWIN_NFDBITS);
        }
    }
    
    #ifdef __DARWIN_NBBY
    
    #endif
    static if(!is(typeof(__DARWIN_NBBY))) {
        private enum enumMixinStr___DARWIN_NBBY = `enum __DARWIN_NBBY = 8;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_NBBY); }))) {
            mixin(enumMixinStr___DARWIN_NBBY);
        }
    }
    
    #ifdef __DARWIN_FD_SETSIZE
    
    #endif
    static if(!is(typeof(__DARWIN_FD_SETSIZE))) {
        private enum enumMixinStr___DARWIN_FD_SETSIZE = `enum __DARWIN_FD_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_FD_SETSIZE); }))) {
            mixin(enumMixinStr___DARWIN_FD_SETSIZE);
        }
    }
    
    #define _FD_SET 

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(Py_RETURN_NAN))) {
        private enum enumMixinStr_Py_RETURN_NAN = `enum Py_RETURN_NAN = return PyFloat_FromDouble ( Py_NAN );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_RETURN_NAN); }))) {
            mixin(enumMixinStr_Py_RETURN_NAN);
        }
    }
    
    #define Py_RETURN_INF( sign ) do if ( copysign ( 1. , sign ) == 1. ) { return PyFloat_FromDouble ( Py_HUGE_VAL ) ; } else { return PyFloat_FromDouble ( - Py_HUGE_VAL ) ; } while ( 0 )

    


    static if(!is(typeof(__DARWIN_NULL))) {
        private enum enumMixinStr___DARWIN_NULL = `enum __DARWIN_NULL = ( cast( void * ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_NULL); }))) {
            mixin(enumMixinStr___DARWIN_NULL);
        }
    }
    
    #define _SYS__TYPES_H_ 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(_PyGenObject_HEAD))) {
        private enum enumMixinStr__PyGenObject_HEAD = `enum _PyGenObject_HEAD = ( prefix ) PyObject_HEAD  _frame * prefix ## _frame ;  char prefix ## _running ;  PyObject * prefix ## _code ;  PyObject * prefix ## _weakreflist ;  PyObject * prefix ## _name ;  PyObject * prefix ## _qualname ; _PyErr_StackItem prefix ## _exc_state ;;`;
        static if(is(typeof({ mixin(enumMixinStr__PyGenObject_HEAD); }))) {
            mixin(enumMixinStr__PyGenObject_HEAD);
        }
    }
    
    #define _SYS__SELECT_H_ 

    


    static if(!is(typeof(__PTHREAD_RWLOCKATTR_SIZE__))) {
        private enum enumMixinStr___PTHREAD_RWLOCKATTR_SIZE__ = `enum __PTHREAD_RWLOCKATTR_SIZE__ = 16;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_RWLOCKATTR_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_RWLOCKATTR_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_RWLOCK_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_RWLOCK_SIZE__))) {
        private enum enumMixinStr___PTHREAD_RWLOCK_SIZE__ = `enum __PTHREAD_RWLOCK_SIZE__ = 192;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_RWLOCK_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_RWLOCK_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_ONCE_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_ONCE_SIZE__))) {
        private enum enumMixinStr___PTHREAD_ONCE_SIZE__ = `enum __PTHREAD_ONCE_SIZE__ = 8;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_ONCE_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_ONCE_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_COND_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_COND_SIZE__))) {
        private enum enumMixinStr___PTHREAD_COND_SIZE__ = `enum __PTHREAD_COND_SIZE__ = 40;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_COND_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_COND_SIZE__);
        }
    }
    
    #define PyGen_Check( op ) PyObject_TypeCheck ( op , & PyGen_Type )

    

    


    static if(!is(typeof(__PTHREAD_CONDATTR_SIZE__))) {
        private enum enumMixinStr___PTHREAD_CONDATTR_SIZE__ = `enum __PTHREAD_CONDATTR_SIZE__ = 8;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_CONDATTR_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_CONDATTR_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_MUTEX_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_MUTEX_SIZE__))) {
        private enum enumMixinStr___PTHREAD_MUTEX_SIZE__ = `enum __PTHREAD_MUTEX_SIZE__ = 56;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEX_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEX_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_MUTEXATTR_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_MUTEXATTR_SIZE__))) {
        private enum enumMixinStr___PTHREAD_MUTEXATTR_SIZE__ = `enum __PTHREAD_MUTEXATTR_SIZE__ = 8;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEXATTR_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEXATTR_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_ATTR_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_ATTR_SIZE__))) {
        private enum enumMixinStr___PTHREAD_ATTR_SIZE__ = `enum __PTHREAD_ATTR_SIZE__ = 56;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_ATTR_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_ATTR_SIZE__);
        }
    }
    
    #ifdef __PTHREAD_SIZE__
    
    #endif
    static if(!is(typeof(__PTHREAD_SIZE__))) {
        private enum enumMixinStr___PTHREAD_SIZE__ = `enum __PTHREAD_SIZE__ = 8176;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_SIZE__); }))) {
            mixin(enumMixinStr___PTHREAD_SIZE__);
        }
    }
    
    #define _SYS__PTHREAD_TYPES_H_ 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__sort_noescape))) {
        private enum enumMixinStr___sort_noescape = `enum __sort_noescape = __attribute__ ( ( __noescape__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___sort_noescape); }))) {
            mixin(enumMixinStr___sort_noescape);
        }
    }
    
    #ifdef __swift_unavailable_on
    
    #endif
    static if(!is(typeof(__swift_unavailable_on))) {
        private enum enumMixinStr___swift_unavailable_on = `enum __swift_unavailable_on = ( osx_msg , ios_msg ) __swift_unavailable ( osx_msg );`;
        static if(is(typeof({ mixin(enumMixinStr___swift_unavailable_on); }))) {
            mixin(enumMixinStr___swift_unavailable_on);
        }
    }
    
    #define PyAsyncGen_CheckExact( op ) ( Py_TYPE ( op ) == & PyAsyncGen_Type )

    


    static if(!is(typeof(MB_CUR_MAX))) {
        private enum enumMixinStr_MB_CUR_MAX = `enum MB_CUR_MAX = __mb_cur_max;`;
        static if(is(typeof({ mixin(enumMixinStr_MB_CUR_MAX); }))) {
            mixin(enumMixinStr_MB_CUR_MAX);
        }
    }
    
    #ifdef RAND_MAX
    
    #endif
    static if(!is(typeof(RAND_MAX))) {
        private enum enumMixinStr_RAND_MAX = `enum RAND_MAX = 0x7fffffff;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_MAX); }))) {
            mixin(enumMixinStr_RAND_MAX);
        }
    }
    
    #define Py_IMPORT_H 

    


    static if(!is(typeof(EXIT_SUCCESS))) {
        private enum enumMixinStr_EXIT_SUCCESS = `enum EXIT_SUCCESS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_EXIT_SUCCESS); }))) {
            mixin(enumMixinStr_EXIT_SUCCESS);
        }
    }
    
    #ifdef EXIT_FAILURE
    
    #endif
    static if(!is(typeof(EXIT_FAILURE))) {
        private enum enumMixinStr_EXIT_FAILURE = `enum EXIT_FAILURE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EXIT_FAILURE); }))) {
            mixin(enumMixinStr_EXIT_FAILURE);
        }
    }
    
    #define _STDLIB_H_ 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(L_ctermid))) {
        private enum enumMixinStr_L_ctermid = `enum L_ctermid = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_L_ctermid); }))) {
            mixin(enumMixinStr_L_ctermid);
        }
    }
    
    #ifdef stderr
    
    #endif
    static if(!is(typeof(stderr))) {
        private enum enumMixinStr_stderr = `enum stderr = __stderrp;`;
        static if(is(typeof({ mixin(enumMixinStr_stderr); }))) {
            mixin(enumMixinStr_stderr);
        }
    }
    
    #ifdef stdout
    
    #endif
    static if(!is(typeof(stdout))) {
        private enum enumMixinStr_stdout = `enum stdout = __stdoutp;`;
        static if(is(typeof({ mixin(enumMixinStr_stdout); }))) {
            mixin(enumMixinStr_stdout);
        }
    }
    
    #ifdef stdin
    
    #endif
    static if(!is(typeof(stdin))) {
        private enum enumMixinStr_stdin = `enum stdin = __stdinp;`;
        static if(is(typeof({ mixin(enumMixinStr_stdin); }))) {
            mixin(enumMixinStr_stdin);
        }
    }
    
    #ifdef SEEK_END
    
    #endif
    static if(!is(typeof(SEEK_END))) {
        private enum enumMixinStr_SEEK_END = `enum SEEK_END = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_END); }))) {
            mixin(enumMixinStr_SEEK_END);
        }
    }
    
    #ifdef SEEK_CUR
    
    #endif
    static if(!is(typeof(SEEK_CUR))) {
        private enum enumMixinStr_SEEK_CUR = `enum SEEK_CUR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_CUR); }))) {
            mixin(enumMixinStr_SEEK_CUR);
        }
    }
    
    #ifdef SEEK_SET
    
    #endif
    static if(!is(typeof(SEEK_SET))) {
        private enum enumMixinStr_SEEK_SET = `enum SEEK_SET = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_SET); }))) {
            mixin(enumMixinStr_SEEK_SET);
        }
    }
    
    #ifdef TMP_MAX
    
    #endif
    static if(!is(typeof(TMP_MAX))) {
        private enum enumMixinStr_TMP_MAX = `enum TMP_MAX = 308915776;`;
        static if(is(typeof({ mixin(enumMixinStr_TMP_MAX); }))) {
            mixin(enumMixinStr_TMP_MAX);
        }
    }
    
    #ifdef L_tmpnam
    
    #endif
    static if(!is(typeof(L_tmpnam))) {
        private enum enumMixinStr_L_tmpnam = `enum L_tmpnam = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_L_tmpnam); }))) {
            mixin(enumMixinStr_L_tmpnam);
        }
    }
    
    #ifdef P_tmpdir
    
    #endif
    static if(!is(typeof(P_tmpdir))) {
        private enum enumMixinStr_P_tmpdir = `enum P_tmpdir = "/var/tmp/";`;
        static if(is(typeof({ mixin(enumMixinStr_P_tmpdir); }))) {
            mixin(enumMixinStr_P_tmpdir);
        }
    }
    
    #ifdef FILENAME_MAX
    
    #endif
    static if(!is(typeof(FILENAME_MAX))) {
        private enum enumMixinStr_FILENAME_MAX = `enum FILENAME_MAX = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_FILENAME_MAX); }))) {
            mixin(enumMixinStr_FILENAME_MAX);
        }
    }
    
    #ifdef FOPEN_MAX
    
    #endif
    static if(!is(typeof(FOPEN_MAX))) {
        private enum enumMixinStr_FOPEN_MAX = `enum FOPEN_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_FOPEN_MAX); }))) {
            mixin(enumMixinStr_FOPEN_MAX);
        }
    }
    
    #ifdef EOF
    
    #endif
    static if(!is(typeof(EOF))) {
        private enum enumMixinStr_EOF = `enum EOF = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EOF); }))) {
            mixin(enumMixinStr_EOF);
        }
    }
    
    #ifdef BUFSIZ
    
    #endif
    static if(!is(typeof(BUFSIZ))) {
        private enum enumMixinStr_BUFSIZ = `enum BUFSIZ = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_BUFSIZ); }))) {
            mixin(enumMixinStr_BUFSIZ);
        }
    }
    
    #ifdef _IONBF
    
    #endif
    static if(!is(typeof(_IONBF))) {
        private enum enumMixinStr__IONBF = `enum _IONBF = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__IONBF); }))) {
            mixin(enumMixinStr__IONBF);
        }
    }
    
    #ifdef _IOLBF
    
    #endif
    static if(!is(typeof(_IOLBF))) {
        private enum enumMixinStr__IOLBF = `enum _IOLBF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__IOLBF); }))) {
            mixin(enumMixinStr__IOLBF);
        }
    }
    
    #ifdef _IOFBF
    
    #endif
    static if(!is(typeof(_IOFBF))) {
        private enum enumMixinStr__IOFBF = `enum _IOFBF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__IOFBF); }))) {
            mixin(enumMixinStr__IOFBF);
        }
    }
    
    #ifdef __SIGN
    
    #endif
    static if(!is(typeof(__SIGN))) {
        private enum enumMixinStr___SIGN = `enum __SIGN = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr___SIGN); }))) {
            mixin(enumMixinStr___SIGN);
        }
    }
    
    #ifdef __SALC
    
    #endif
    static if(!is(typeof(__SALC))) {
        private enum enumMixinStr___SALC = `enum __SALC = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr___SALC); }))) {
            mixin(enumMixinStr___SALC);
        }
    }
    
    #ifdef __SMOD
    
    #endif
    static if(!is(typeof(__SMOD))) {
        private enum enumMixinStr___SMOD = `enum __SMOD = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr___SMOD); }))) {
            mixin(enumMixinStr___SMOD);
        }
    }
    
    #ifdef __SOFF
    
    #endif
    static if(!is(typeof(__SOFF))) {
        private enum enumMixinStr___SOFF = `enum __SOFF = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr___SOFF); }))) {
            mixin(enumMixinStr___SOFF);
        }
    }
    
    #define PyImport_ImportModuleEx( n , g , l , f ) PyImport_ImportModuleLevel ( n , g , l , f , 0 )

    


    static if(!is(typeof(__SNPT))) {
        private enum enumMixinStr___SNPT = `enum __SNPT = 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr___SNPT); }))) {
            mixin(enumMixinStr___SNPT);
        }
    }
    
    #ifdef __SOPT
    
    #endif
    static if(!is(typeof(__SOPT))) {
        private enum enumMixinStr___SOPT = `enum __SOPT = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr___SOPT); }))) {
            mixin(enumMixinStr___SOPT);
        }
    }
    
    #ifdef __SSTR
    
    #endif
    static if(!is(typeof(__SSTR))) {
        private enum enumMixinStr___SSTR = `enum __SSTR = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr___SSTR); }))) {
            mixin(enumMixinStr___SSTR);
        }
    }
    
    #ifdef __SAPP
    
    #endif
    static if(!is(typeof(__SAPP))) {
        private enum enumMixinStr___SAPP = `enum __SAPP = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr___SAPP); }))) {
            mixin(enumMixinStr___SAPP);
        }
    }
    
    #ifdef __SMBF
    
    #endif
    static if(!is(typeof(__SMBF))) {
        private enum enumMixinStr___SMBF = `enum __SMBF = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr___SMBF); }))) {
            mixin(enumMixinStr___SMBF);
        }
    }
    
    #ifdef __SERR
    
    #endif
    static if(!is(typeof(__SERR))) {
        private enum enumMixinStr___SERR = `enum __SERR = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr___SERR); }))) {
            mixin(enumMixinStr___SERR);
        }
    }
    
    #ifdef __SEOF
    
    #endif
    static if(!is(typeof(__SEOF))) {
        private enum enumMixinStr___SEOF = `enum __SEOF = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr___SEOF); }))) {
            mixin(enumMixinStr___SEOF);
        }
    }
    
    #ifdef __SRW
    
    #endif
    static if(!is(typeof(__SRW))) {
        private enum enumMixinStr___SRW = `enum __SRW = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr___SRW); }))) {
            mixin(enumMixinStr___SRW);
        }
    }
    
    #ifdef __SWR
    
    #endif
    static if(!is(typeof(__SWR))) {
        private enum enumMixinStr___SWR = `enum __SWR = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr___SWR); }))) {
            mixin(enumMixinStr___SWR);
        }
    }
    
    #ifdef __SRD
    
    #endif
    static if(!is(typeof(__SRD))) {
        private enum enumMixinStr___SRD = `enum __SRD = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr___SRD); }))) {
            mixin(enumMixinStr___SRD);
        }
    }
    
    #ifdef __SNBF
    
    #endif
    static if(!is(typeof(__SNBF))) {
        private enum enumMixinStr___SNBF = `enum __SNBF = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr___SNBF); }))) {
            mixin(enumMixinStr___SNBF);
        }
    }
    
    #ifdef __SLBF
    
    #endif
    static if(!is(typeof(__SLBF))) {
        private enum enumMixinStr___SLBF = `enum __SLBF = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr___SLBF); }))) {
            mixin(enumMixinStr___SLBF);
        }
    }
    
    #define _STDIO_H_ 

    


    static if(!is(typeof(SIG_ATOMIC_MAX))) {
        private enum enumMixinStr_SIG_ATOMIC_MAX = `enum SIG_ATOMIC_MAX = INT32_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_ATOMIC_MAX); }))) {
            mixin(enumMixinStr_SIG_ATOMIC_MAX);
        }
    }
    
    #ifdef SIG_ATOMIC_MIN
    
    #endif
    static if(!is(typeof(SIG_ATOMIC_MIN))) {
        private enum enumMixinStr_SIG_ATOMIC_MIN = `enum SIG_ATOMIC_MIN = INT32_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_ATOMIC_MIN); }))) {
            mixin(enumMixinStr_SIG_ATOMIC_MIN);
        }
    }
    
    #ifdef WINT_MAX
    
    #endif
    static if(!is(typeof(WINT_MAX))) {
        private enum enumMixinStr_WINT_MAX = `enum WINT_MAX = INT32_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_WINT_MAX); }))) {
            mixin(enumMixinStr_WINT_MAX);
        }
    }
    
    #ifdef WINT_MIN
    
    #endif
    static if(!is(typeof(WINT_MIN))) {
        private enum enumMixinStr_WINT_MIN = `enum WINT_MIN = INT32_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_WINT_MIN); }))) {
            mixin(enumMixinStr_WINT_MIN);
        }
    }
    
    #ifdef WCHAR_MIN
    
    #endif
    static if(!is(typeof(WCHAR_MIN))) {
        private enum enumMixinStr_WCHAR_MIN = `enum WCHAR_MIN = ( - WCHAR_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_WCHAR_MIN); }))) {
            mixin(enumMixinStr_WCHAR_MIN);
        }
    }
    
    #ifdef WCHAR_MAX
    
    #endif
    static if(!is(typeof(WCHAR_MAX))) {
        private enum enumMixinStr_WCHAR_MAX = `enum WCHAR_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_WCHAR_MAX); }))) {
            mixin(enumMixinStr_WCHAR_MAX);
        }
    }
    
    #ifdef RSIZE_MAX
    
    #endif
    static if(!is(typeof(RSIZE_MAX))) {
        private enum enumMixinStr_RSIZE_MAX = `enum RSIZE_MAX = ( SIZE_MAX >> 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_RSIZE_MAX); }))) {
            mixin(enumMixinStr_RSIZE_MAX);
        }
    }
    
    #ifdef SIZE_MAX
    
    #endif
    static if(!is(typeof(SIZE_MAX))) {
        private enum enumMixinStr_SIZE_MAX = `enum SIZE_MAX = UINTPTR_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZE_MAX); }))) {
            mixin(enumMixinStr_SIZE_MAX);
        }
    }
    
    #ifdef PTRDIFF_MAX
    
    #endif
    static if(!is(typeof(PTRDIFF_MAX))) {
        private enum enumMixinStr_PTRDIFF_MAX = `enum PTRDIFF_MAX = INTMAX_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_PTRDIFF_MAX); }))) {
            mixin(enumMixinStr_PTRDIFF_MAX);
        }
    }
    
    #ifdef PTRDIFF_MIN
    
    #endif
    static if(!is(typeof(PTRDIFF_MIN))) {
        private enum enumMixinStr_PTRDIFF_MIN = `enum PTRDIFF_MIN = INTMAX_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_PTRDIFF_MIN); }))) {
            mixin(enumMixinStr_PTRDIFF_MIN);
        }
    }
    
    #ifdef INTMAX_MIN
    
    #endif
    static if(!is(typeof(INTMAX_MIN))) {
        private enum enumMixinStr_INTMAX_MIN = `enum INTMAX_MIN = ( - INTMAX_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INTMAX_MIN); }))) {
            mixin(enumMixinStr_INTMAX_MIN);
        }
    }
    
    #ifdef UINTMAX_MAX
    
    #endif
    static if(!is(typeof(UINTMAX_MAX))) {
        private enum enumMixinStr_UINTMAX_MAX = `enum UINTMAX_MAX = UINTMAX_C ( 18446744073709551615 );`;
        static if(is(typeof({ mixin(enumMixinStr_UINTMAX_MAX); }))) {
            mixin(enumMixinStr_UINTMAX_MAX);
        }
    }
    
    #ifdef INTMAX_MAX
    
    #endif
    static if(!is(typeof(INTMAX_MAX))) {
        private enum enumMixinStr_INTMAX_MAX = `enum INTMAX_MAX = INTMAX_C ( 9223372036854775807 );`;
        static if(is(typeof({ mixin(enumMixinStr_INTMAX_MAX); }))) {
            mixin(enumMixinStr_INTMAX_MAX);
        }
    }
    
    #ifdef UINTPTR_MAX
    
    #endif
    static if(!is(typeof(UINTPTR_MAX))) {
        private enum enumMixinStr_UINTPTR_MAX = `enum UINTPTR_MAX = 18446744073709551615UL;`;
        static if(is(typeof({ mixin(enumMixinStr_UINTPTR_MAX); }))) {
            mixin(enumMixinStr_UINTPTR_MAX);
        }
    }
    
    #ifdef INTPTR_MIN
    
    #endif
    static if(!is(typeof(INTPTR_MIN))) {
        private enum enumMixinStr_INTPTR_MIN = `enum INTPTR_MIN = ( - INTPTR_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INTPTR_MIN); }))) {
            mixin(enumMixinStr_INTPTR_MIN);
        }
    }
    
    #ifdef INTPTR_MAX
    
    #endif
    static if(!is(typeof(INTPTR_MAX))) {
        private enum enumMixinStr_INTPTR_MAX = `enum INTPTR_MAX = 9223372036854775807L;`;
        static if(is(typeof({ mixin(enumMixinStr_INTPTR_MAX); }))) {
            mixin(enumMixinStr_INTPTR_MAX);
        }
    }
    
    #ifdef UINT_FAST64_MAX
    
    #endif
    static if(!is(typeof(UINT_FAST64_MAX))) {
        private enum enumMixinStr_UINT_FAST64_MAX = `enum UINT_FAST64_MAX = UINT64_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST64_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST64_MAX);
        }
    }
    
    #ifdef UINT_FAST32_MAX
    
    #endif
    static if(!is(typeof(UINT_FAST32_MAX))) {
        private enum enumMixinStr_UINT_FAST32_MAX = `enum UINT_FAST32_MAX = UINT32_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST32_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST32_MAX);
        }
    }
    
    #ifdef UINT_FAST16_MAX
    
    #endif
    static if(!is(typeof(UINT_FAST16_MAX))) {
        private enum enumMixinStr_UINT_FAST16_MAX = `enum UINT_FAST16_MAX = UINT16_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST16_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST16_MAX);
        }
    }
    
    #ifdef UINT_FAST8_MAX
    
    #endif
    static if(!is(typeof(UINT_FAST8_MAX))) {
        private enum enumMixinStr_UINT_FAST8_MAX = `enum UINT_FAST8_MAX = UINT8_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST8_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST8_MAX);
        }
    }
    
    #ifdef INT_FAST64_MAX
    
    #endif
    static if(!is(typeof(INT_FAST64_MAX))) {
        private enum enumMixinStr_INT_FAST64_MAX = `enum INT_FAST64_MAX = INT64_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST64_MAX); }))) {
            mixin(enumMixinStr_INT_FAST64_MAX);
        }
    }
    
    #ifdef INT_FAST32_MAX
    
    #endif
    static if(!is(typeof(INT_FAST32_MAX))) {
        private enum enumMixinStr_INT_FAST32_MAX = `enum INT_FAST32_MAX = INT32_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST32_MAX); }))) {
            mixin(enumMixinStr_INT_FAST32_MAX);
        }
    }
    
    #ifdef INT_FAST16_MAX
    
    #endif
    static if(!is(typeof(INT_FAST16_MAX))) {
        private enum enumMixinStr_INT_FAST16_MAX = `enum INT_FAST16_MAX = INT16_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST16_MAX); }))) {
            mixin(enumMixinStr_INT_FAST16_MAX);
        }
    }
    
    #ifdef INT_FAST8_MAX
    
    #endif
    static if(!is(typeof(INT_FAST8_MAX))) {
        private enum enumMixinStr_INT_FAST8_MAX = `enum INT_FAST8_MAX = INT8_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST8_MAX); }))) {
            mixin(enumMixinStr_INT_FAST8_MAX);
        }
    }
    
    #ifdef INT_FAST64_MIN
    
    #endif
    static if(!is(typeof(INT_FAST64_MIN))) {
        private enum enumMixinStr_INT_FAST64_MIN = `enum INT_FAST64_MIN = INT64_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST64_MIN); }))) {
            mixin(enumMixinStr_INT_FAST64_MIN);
        }
    }
    
    #ifdef INT_FAST32_MIN
    
    #endif
    static if(!is(typeof(INT_FAST32_MIN))) {
        private enum enumMixinStr_INT_FAST32_MIN = `enum INT_FAST32_MIN = INT32_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST32_MIN); }))) {
            mixin(enumMixinStr_INT_FAST32_MIN);
        }
    }
    
    #ifdef INT_FAST16_MIN
    
    #endif
    static if(!is(typeof(INT_FAST16_MIN))) {
        private enum enumMixinStr_INT_FAST16_MIN = `enum INT_FAST16_MIN = INT16_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST16_MIN); }))) {
            mixin(enumMixinStr_INT_FAST16_MIN);
        }
    }
    
    #define Py_INTRCHECK_H 

    


    static if(!is(typeof(INT_FAST8_MIN))) {
        private enum enumMixinStr_INT_FAST8_MIN = `enum INT_FAST8_MIN = INT8_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST8_MIN); }))) {
            mixin(enumMixinStr_INT_FAST8_MIN);
        }
    }
    
    #ifdef UINT_LEAST64_MAX
    
    #endif
    static if(!is(typeof(UINT_LEAST64_MAX))) {
        private enum enumMixinStr_UINT_LEAST64_MAX = `enum UINT_LEAST64_MAX = UINT64_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST64_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST64_MAX);
        }
    }
    
    #ifdef UINT_LEAST32_MAX
    
    #endif
    static if(!is(typeof(UINT_LEAST32_MAX))) {
        private enum enumMixinStr_UINT_LEAST32_MAX = `enum UINT_LEAST32_MAX = UINT32_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST32_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST32_MAX);
        }
    }
    
    #ifdef UINT_LEAST16_MAX
    
    #endif
    static if(!is(typeof(UINT_LEAST16_MAX))) {
        private enum enumMixinStr_UINT_LEAST16_MAX = `enum UINT_LEAST16_MAX = UINT16_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST16_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST16_MAX);
        }
    }
    
    #ifdef UINT_LEAST8_MAX
    
    #endif
    static if(!is(typeof(UINT_LEAST8_MAX))) {
        private enum enumMixinStr_UINT_LEAST8_MAX = `enum UINT_LEAST8_MAX = UINT8_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST8_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST8_MAX);
        }
    }
    
    #ifdef INT_LEAST64_MAX
    
    #endif
    static if(!is(typeof(INT_LEAST64_MAX))) {
        private enum enumMixinStr_INT_LEAST64_MAX = `enum INT_LEAST64_MAX = INT64_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST64_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST64_MAX);
        }
    }
    
    #ifdef INT_LEAST32_MAX
    
    #endif
    static if(!is(typeof(INT_LEAST32_MAX))) {
        private enum enumMixinStr_INT_LEAST32_MAX = `enum INT_LEAST32_MAX = INT32_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST32_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST32_MAX);
        }
    }
    
    #ifdef INT_LEAST16_MAX
    
    #endif
    static if(!is(typeof(INT_LEAST16_MAX))) {
        private enum enumMixinStr_INT_LEAST16_MAX = `enum INT_LEAST16_MAX = INT16_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST16_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST16_MAX);
        }
    }
    
    #ifdef INT_LEAST8_MAX
    
    #endif
    static if(!is(typeof(INT_LEAST8_MAX))) {
        private enum enumMixinStr_INT_LEAST8_MAX = `enum INT_LEAST8_MAX = INT8_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST8_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST8_MAX);
        }
    }
    
    #ifdef INT_LEAST64_MIN
    
    #endif
    static if(!is(typeof(INT_LEAST64_MIN))) {
        private enum enumMixinStr_INT_LEAST64_MIN = `enum INT_LEAST64_MIN = INT64_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST64_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST64_MIN);
        }
    }
    
    #ifdef INT_LEAST32_MIN
    
    #endif
    static if(!is(typeof(INT_LEAST32_MIN))) {
        private enum enumMixinStr_INT_LEAST32_MIN = `enum INT_LEAST32_MIN = INT32_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST32_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST32_MIN);
        }
    }
    
    #ifdef INT_LEAST16_MIN
    
    #endif
    static if(!is(typeof(INT_LEAST16_MIN))) {
        private enum enumMixinStr_INT_LEAST16_MIN = `enum INT_LEAST16_MIN = INT16_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST16_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST16_MIN);
        }
    }
    
    #ifdef INT_LEAST8_MIN
    
    #endif
    static if(!is(typeof(INT_LEAST8_MIN))) {
        private enum enumMixinStr_INT_LEAST8_MIN = `enum INT_LEAST8_MIN = INT8_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST8_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST8_MIN);
        }
    }
    
    #ifdef UINT64_MAX
    
    #endif
    static if(!is(typeof(UINT64_MAX))) {
        private enum enumMixinStr_UINT64_MAX = `enum UINT64_MAX = 18446744073709551615LU;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT64_MAX); }))) {
            mixin(enumMixinStr_UINT64_MAX);
        }
    }
    
    #ifdef UINT32_MAX
    
    #endif
    static if(!is(typeof(UINT32_MAX))) {
        private enum enumMixinStr_UINT32_MAX = `enum UINT32_MAX = 4294967295U;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT32_MAX); }))) {
            mixin(enumMixinStr_UINT32_MAX);
        }
    }
    
    #ifdef UINT16_MAX
    
    #endif
    static if(!is(typeof(UINT16_MAX))) {
        private enum enumMixinStr_UINT16_MAX = `enum UINT16_MAX = 65535;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT16_MAX); }))) {
            mixin(enumMixinStr_UINT16_MAX);
        }
    }
    
    #ifdef UINT8_MAX
    
    #endif
    static if(!is(typeof(UINT8_MAX))) {
        private enum enumMixinStr_UINT8_MAX = `enum UINT8_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_UINT8_MAX); }))) {
            mixin(enumMixinStr_UINT8_MAX);
        }
    }
    
    #ifdef INT64_MIN
    
    #endif
    static if(!is(typeof(INT64_MIN))) {
        private enum enumMixinStr_INT64_MIN = `enum INT64_MIN = ( - INT64_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT64_MIN); }))) {
            mixin(enumMixinStr_INT64_MIN);
        }
    }
    
    #define Py_ITEROBJECT_H 

    


    static if(!is(typeof(INT32_MIN))) {
        private enum enumMixinStr_INT32_MIN = `enum INT32_MIN = ( - INT32_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT32_MIN); }))) {
            mixin(enumMixinStr_INT32_MIN);
        }
    }
    
    #ifdef INT16_MIN
    
    #endif
    static if(!is(typeof(INT16_MIN))) {
        private enum enumMixinStr_INT16_MIN = `enum INT16_MIN = - 32768;`;
        static if(is(typeof({ mixin(enumMixinStr_INT16_MIN); }))) {
            mixin(enumMixinStr_INT16_MIN);
        }
    }
    
    #ifdef INT8_MIN
    
    #endif
    static if(!is(typeof(INT8_MIN))) {
        private enum enumMixinStr_INT8_MIN = `enum INT8_MIN = - 128;`;
        static if(is(typeof({ mixin(enumMixinStr_INT8_MIN); }))) {
            mixin(enumMixinStr_INT8_MIN);
        }
    }
    
    #ifdef INT64_MAX
    
    #endif
    static if(!is(typeof(INT64_MAX))) {
        private enum enumMixinStr_INT64_MAX = `enum INT64_MAX = 9223372036854775807L;`;
        static if(is(typeof({ mixin(enumMixinStr_INT64_MAX); }))) {
            mixin(enumMixinStr_INT64_MAX);
        }
    }
    
    #ifdef INT32_MAX
    
    #endif
    static if(!is(typeof(INT32_MAX))) {
        private enum enumMixinStr_INT32_MAX = `enum INT32_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_INT32_MAX); }))) {
            mixin(enumMixinStr_INT32_MAX);
        }
    }
    
    #ifdef INT16_MAX
    
    #endif
    static if(!is(typeof(INT16_MAX))) {
        private enum enumMixinStr_INT16_MAX = `enum INT16_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr_INT16_MAX); }))) {
            mixin(enumMixinStr_INT16_MAX);
        }
    }
    
    #define PySeqIter_Check( op ) ( Py_TYPE ( op ) == & PySeqIter_Type )

    


    static if(!is(typeof(INT8_MAX))) {
        private enum enumMixinStr_INT8_MAX = `enum INT8_MAX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_INT8_MAX); }))) {
            mixin(enumMixinStr_INT8_MAX);
        }
    }
    
    #define UINTMAX_C( v ) ( v ## UL )

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__WORDSIZE))) {
        private enum enumMixinStr___WORDSIZE = `enum __WORDSIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___WORDSIZE); }))) {
            mixin(enumMixinStr___WORDSIZE);
        }
    }
    
    #define _STDINT_H_ 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__HAS_FIXED_CHK_PROTOTYPES))) {
        private enum enumMixinStr___HAS_FIXED_CHK_PROTOTYPES = `enum __HAS_FIXED_CHK_PROTOTYPES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAS_FIXED_CHK_PROTOTYPES); }))) {
            mixin(enumMixinStr___HAS_FIXED_CHK_PROTOTYPES);
        }
    }
    
    #define _SECURE__STRING_H_ 

    

    

    

    

    

    

    

    


    static if(!is(typeof(_USE_FORTIFY_LEVEL))) {
        private enum enumMixinStr__USE_FORTIFY_LEVEL = `enum _USE_FORTIFY_LEVEL = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__USE_FORTIFY_LEVEL); }))) {
            mixin(enumMixinStr__USE_FORTIFY_LEVEL);
        }
    }
    
    #define _SECURE__COMMON_H_ 

    


    static if(!is(typeof(_RUNE_MAGIC_A))) {
        private enum enumMixinStr__RUNE_MAGIC_A = `enum _RUNE_MAGIC_A = "RuneMagA";`;
        static if(is(typeof({ mixin(enumMixinStr__RUNE_MAGIC_A); }))) {
            mixin(enumMixinStr__RUNE_MAGIC_A);
        }
    }
    
    #ifdef _CRMASK
    
    #endif
    static if(!is(typeof(_CRMASK))) {
        private enum enumMixinStr__CRMASK = `enum _CRMASK = ( ~ ( _CACHED_RUNES - 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr__CRMASK); }))) {
            mixin(enumMixinStr__CRMASK);
        }
    }
    
    #ifdef _CACHED_RUNES
    
    #endif
    static if(!is(typeof(_CACHED_RUNES))) {
        private enum enumMixinStr__CACHED_RUNES = `enum _CACHED_RUNES = ( 1 << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr__CACHED_RUNES); }))) {
            mixin(enumMixinStr__CACHED_RUNES);
        }
    }
    
    #define _RUNETYPE_H_ 

    

    

    

    

    

    


    static if(!is(typeof(__SCHED_PARAM_SIZE__))) {
        private enum enumMixinStr___SCHED_PARAM_SIZE__ = `enum __SCHED_PARAM_SIZE__ = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SCHED_PARAM_SIZE__); }))) {
            mixin(enumMixinStr___SCHED_PARAM_SIZE__);
        }
    }
    
    #ifdef SCHED_RR
    
    #endif
    static if(!is(typeof(SCHED_RR))) {
        private enum enumMixinStr_SCHED_RR = `enum SCHED_RR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_RR); }))) {
            mixin(enumMixinStr_SCHED_RR);
        }
    }
    
    #ifdef SCHED_FIFO
    
    #endif
    static if(!is(typeof(SCHED_FIFO))) {
        private enum enumMixinStr_SCHED_FIFO = `enum SCHED_FIFO = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_FIFO); }))) {
            mixin(enumMixinStr_SCHED_FIFO);
        }
    }
    
    #ifdef SCHED_OTHER
    
    #endif
    static if(!is(typeof(SCHED_OTHER))) {
        private enum enumMixinStr_SCHED_OTHER = `enum SCHED_OTHER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_OTHER); }))) {
            mixin(enumMixinStr_SCHED_OTHER);
        }
    }
    
    #ifdef _PTHREAD_RWLOCK_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_RWLOCK_SIG_init))) {
        private enum enumMixinStr__PTHREAD_RWLOCK_SIG_init = `enum _PTHREAD_RWLOCK_SIG_init = 0x2DA8B3B4;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_RWLOCK_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_RWLOCK_SIG_init);
        }
    }
    
    #ifdef PyLong_SHIFT
    
    #endif
    static if(!is(typeof(PyLong_SHIFT))) {
        private enum enumMixinStr_PyLong_SHIFT = `enum PyLong_SHIFT = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_PyLong_SHIFT); }))) {
            mixin(enumMixinStr_PyLong_SHIFT);
        }
    }
    
    #ifdef _PyLong_DECIMAL_SHIFT
    
    #endif
    static if(!is(typeof(_PyLong_DECIMAL_SHIFT))) {
        private enum enumMixinStr__PyLong_DECIMAL_SHIFT = `enum _PyLong_DECIMAL_SHIFT = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__PyLong_DECIMAL_SHIFT); }))) {
            mixin(enumMixinStr__PyLong_DECIMAL_SHIFT);
        }
    }
    
    #ifdef _PyLong_DECIMAL_BASE
    
    #endif
    static if(!is(typeof(_PyLong_DECIMAL_BASE))) {
        private enum enumMixinStr__PyLong_DECIMAL_BASE = `enum _PyLong_DECIMAL_BASE = ( cast( digit ) 1000000000 );`;
        static if(is(typeof({ mixin(enumMixinStr__PyLong_DECIMAL_BASE); }))) {
            mixin(enumMixinStr__PyLong_DECIMAL_BASE);
        }
    }
    
    #ifdef PyLong_BASE
    
    #endif
    static if(!is(typeof(PyLong_BASE))) {
        private enum enumMixinStr_PyLong_BASE = `enum PyLong_BASE = ( cast( digit ) 1 << 30 );`;
        static if(is(typeof({ mixin(enumMixinStr_PyLong_BASE); }))) {
            mixin(enumMixinStr_PyLong_BASE);
        }
    }
    
    #ifdef PyLong_MASK
    
    #endif
    static if(!is(typeof(PyLong_MASK))) {
        private enum enumMixinStr_PyLong_MASK = `enum PyLong_MASK = ( cast( digit ) ( ( cast( digit ) 1 << 30 ) - 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PyLong_MASK); }))) {
            mixin(enumMixinStr_PyLong_MASK);
        }
    }
    
    #ifdef _PTHREAD_ONCE_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_ONCE_SIG_init))) {
        private enum enumMixinStr__PTHREAD_ONCE_SIG_init = `enum _PTHREAD_ONCE_SIG_init = 0x30B1BCBA;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_ONCE_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_ONCE_SIG_init);
        }
    }
    
    #ifdef _PTHREAD_COND_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_COND_SIG_init))) {
        private enum enumMixinStr__PTHREAD_COND_SIG_init = `enum _PTHREAD_COND_SIG_init = 0x3CB0B1BB;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_COND_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_COND_SIG_init);
        }
    }
    
    #ifdef _PTHREAD_FIRSTFIT_MUTEX_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_FIRSTFIT_MUTEX_SIG_init))) {
        private enum enumMixinStr__PTHREAD_FIRSTFIT_MUTEX_SIG_init = `enum _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 0x32AAABA3;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_FIRSTFIT_MUTEX_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_FIRSTFIT_MUTEX_SIG_init);
        }
    }
    
    #ifdef _PTHREAD_RECURSIVE_MUTEX_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_RECURSIVE_MUTEX_SIG_init))) {
        private enum enumMixinStr__PTHREAD_RECURSIVE_MUTEX_SIG_init = `enum _PTHREAD_RECURSIVE_MUTEX_SIG_init = 0x32AAABA2;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_RECURSIVE_MUTEX_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_RECURSIVE_MUTEX_SIG_init);
        }
    }
    
    #ifdef _PTHREAD_ERRORCHECK_MUTEX_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_ERRORCHECK_MUTEX_SIG_init))) {
        private enum enumMixinStr__PTHREAD_ERRORCHECK_MUTEX_SIG_init = `enum _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 0x32AAABA1;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_ERRORCHECK_MUTEX_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_ERRORCHECK_MUTEX_SIG_init);
        }
    }
    
    #ifdef _PTHREAD_MUTEX_SIG_init
    
    #endif
    static if(!is(typeof(_PTHREAD_MUTEX_SIG_init))) {
        private enum enumMixinStr__PTHREAD_MUTEX_SIG_init = `enum _PTHREAD_MUTEX_SIG_init = 0x32AAABA7;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_MUTEX_SIG_init); }))) {
            mixin(enumMixinStr__PTHREAD_MUTEX_SIG_init);
        }
    }
    
    #define Py_LONGOBJECT_H 

    

    

    

    


    static if(!is(typeof(PTHREAD_ONCE_INIT))) {
        private enum enumMixinStr_PTHREAD_ONCE_INIT = `enum PTHREAD_ONCE_INIT = { 0x30B1BCBA , { 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_ONCE_INIT); }))) {
            mixin(enumMixinStr_PTHREAD_ONCE_INIT);
        }
    }
    
    #define PyLong_Check( op ) PyType_FastSubclass ( Py_TYPE ( op ) , Py_TPFLAGS_LONG_SUBCLASS )

    

    


    static if(!is(typeof(PTHREAD_COND_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_COND_INITIALIZER = `enum PTHREAD_COND_INITIALIZER = { 0x3CB0B1BB , { 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_COND_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_COND_INITIALIZER);
        }
    }
    
    #ifdef _PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT
    
    #endif
    static if(!is(typeof(_PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT))) {
        private enum enumMixinStr__PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT = `enum _PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT = defined ( SWIFT_CLASS_EXTRA ) && ( ! defined ( SWIFT_SDK_OVERLAY_PTHREAD_EPOCH ) || ( SWIFT_SDK_OVERLAY_PTHREAD_EPOCH < 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT); }))) {
            mixin(enumMixinStr__PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT);
        }
    }
    
    #ifdef PTHREAD_RECURSIVE_MUTEX_INITIALIZER
    
    #endif
    static if(!is(typeof(PTHREAD_RECURSIVE_MUTEX_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_RECURSIVE_MUTEX_INITIALIZER = `enum PTHREAD_RECURSIVE_MUTEX_INITIALIZER = { 0x32AAABA2 , { 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_RECURSIVE_MUTEX_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_RECURSIVE_MUTEX_INITIALIZER);
        }
    }
    
    #ifdef PTHREAD_ERRORCHECK_MUTEX_INITIALIZER
    
    #endif
    static if(!is(typeof(PTHREAD_ERRORCHECK_MUTEX_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_ERRORCHECK_MUTEX_INITIALIZER = `enum PTHREAD_ERRORCHECK_MUTEX_INITIALIZER = { 0x32AAABA1 , { 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_ERRORCHECK_MUTEX_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_ERRORCHECK_MUTEX_INITIALIZER);
        }
    }
    
    #ifdef PTHREAD_MUTEX_INITIALIZER
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_MUTEX_INITIALIZER = `enum PTHREAD_MUTEX_INITIALIZER = { 0x32AAABA7 , { 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_INITIALIZER);
        }
    }
    
    #ifdef PTHREAD_RWLOCK_INITIALIZER
    
    #endif
    static if(!is(typeof(PTHREAD_RWLOCK_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_RWLOCK_INITIALIZER = `enum PTHREAD_RWLOCK_INITIALIZER = { 0x2DA8B3B4 , { 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_RWLOCK_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_RWLOCK_INITIALIZER);
        }
    }
    
    #ifdef PTHREAD_MUTEX_POLICY_FIRSTFIT_NP
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_POLICY_FIRSTFIT_NP))) {
        private enum enumMixinStr_PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = `enum PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_POLICY_FIRSTFIT_NP); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_POLICY_FIRSTFIT_NP);
        }
    }
    
    #ifdef PTHREAD_MUTEX_POLICY_FAIRSHARE_NP
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_POLICY_FAIRSHARE_NP))) {
        private enum enumMixinStr_PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = `enum PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_POLICY_FAIRSHARE_NP); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_POLICY_FAIRSHARE_NP);
        }
    }
    
    #ifdef PTHREAD_MUTEX_DEFAULT
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_DEFAULT))) {
        private enum enumMixinStr_PTHREAD_MUTEX_DEFAULT = `enum PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_DEFAULT); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_DEFAULT);
        }
    }
    
    #ifdef PTHREAD_MUTEX_RECURSIVE
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_RECURSIVE))) {
        private enum enumMixinStr_PTHREAD_MUTEX_RECURSIVE = `enum PTHREAD_MUTEX_RECURSIVE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_RECURSIVE); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_RECURSIVE);
        }
    }
    
    #ifdef PTHREAD_MUTEX_ERRORCHECK
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_ERRORCHECK))) {
        private enum enumMixinStr_PTHREAD_MUTEX_ERRORCHECK = `enum PTHREAD_MUTEX_ERRORCHECK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_ERRORCHECK); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_ERRORCHECK);
        }
    }
    
    #ifdef PTHREAD_MUTEX_NORMAL
    
    #endif
    static if(!is(typeof(PTHREAD_MUTEX_NORMAL))) {
        private enum enumMixinStr_PTHREAD_MUTEX_NORMAL = `enum PTHREAD_MUTEX_NORMAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_NORMAL); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_NORMAL);
        }
    }
    
    #ifdef PTHREAD_PRIO_PROTECT
    
    #endif
    static if(!is(typeof(PTHREAD_PRIO_PROTECT))) {
        private enum enumMixinStr_PTHREAD_PRIO_PROTECT = `enum PTHREAD_PRIO_PROTECT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PRIO_PROTECT); }))) {
            mixin(enumMixinStr_PTHREAD_PRIO_PROTECT);
        }
    }
    
    #ifdef PTHREAD_PRIO_INHERIT
    
    #endif
    static if(!is(typeof(PTHREAD_PRIO_INHERIT))) {
        private enum enumMixinStr_PTHREAD_PRIO_INHERIT = `enum PTHREAD_PRIO_INHERIT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PRIO_INHERIT); }))) {
            mixin(enumMixinStr_PTHREAD_PRIO_INHERIT);
        }
    }
    
    #ifdef PTHREAD_PRIO_NONE
    
    #endif
    static if(!is(typeof(PTHREAD_PRIO_NONE))) {
        private enum enumMixinStr_PTHREAD_PRIO_NONE = `enum PTHREAD_PRIO_NONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PRIO_NONE); }))) {
            mixin(enumMixinStr_PTHREAD_PRIO_NONE);
        }
    }
    
    #ifdef PTHREAD_PROCESS_PRIVATE
    
    #endif
    static if(!is(typeof(PTHREAD_PROCESS_PRIVATE))) {
        private enum enumMixinStr_PTHREAD_PROCESS_PRIVATE = `enum PTHREAD_PROCESS_PRIVATE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PROCESS_PRIVATE); }))) {
            mixin(enumMixinStr_PTHREAD_PROCESS_PRIVATE);
        }
    }
    
    #ifdef PTHREAD_PROCESS_SHARED
    
    #endif
    static if(!is(typeof(PTHREAD_PROCESS_SHARED))) {
        private enum enumMixinStr_PTHREAD_PROCESS_SHARED = `enum PTHREAD_PROCESS_SHARED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr_PTHREAD_PROCESS_SHARED);
        }
    }
    
    #ifdef PTHREAD_SCOPE_PROCESS
    
    #endif
    static if(!is(typeof(PTHREAD_SCOPE_PROCESS))) {
        private enum enumMixinStr_PTHREAD_SCOPE_PROCESS = `enum PTHREAD_SCOPE_PROCESS = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SCOPE_PROCESS); }))) {
            mixin(enumMixinStr_PTHREAD_SCOPE_PROCESS);
        }
    }
    
    #ifdef PTHREAD_SCOPE_SYSTEM
    
    #endif
    static if(!is(typeof(PTHREAD_SCOPE_SYSTEM))) {
        private enum enumMixinStr_PTHREAD_SCOPE_SYSTEM = `enum PTHREAD_SCOPE_SYSTEM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SCOPE_SYSTEM); }))) {
            mixin(enumMixinStr_PTHREAD_SCOPE_SYSTEM);
        }
    }
    
    #ifdef PTHREAD_CANCELED
    
    #endif
    static if(!is(typeof(PTHREAD_CANCELED))) {
        private enum enumMixinStr_PTHREAD_CANCELED = `enum PTHREAD_CANCELED = ( cast( void * ) 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCELED); }))) {
            mixin(enumMixinStr_PTHREAD_CANCELED);
        }
    }
    
    #ifdef PTHREAD_CANCEL_ASYNCHRONOUS
    
    #endif
    static if(!is(typeof(PTHREAD_CANCEL_ASYNCHRONOUS))) {
        private enum enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS = `enum PTHREAD_CANCEL_ASYNCHRONOUS = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS);
        }
    }
    
    #ifdef PTHREAD_CANCEL_DEFERRED
    
    #endif
    static if(!is(typeof(PTHREAD_CANCEL_DEFERRED))) {
        private enum enumMixinStr_PTHREAD_CANCEL_DEFERRED = `enum PTHREAD_CANCEL_DEFERRED = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_DEFERRED); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_DEFERRED);
        }
    }
    
    #ifdef PTHREAD_CANCEL_DISABLE
    
    #endif
    static if(!is(typeof(PTHREAD_CANCEL_DISABLE))) {
        private enum enumMixinStr_PTHREAD_CANCEL_DISABLE = `enum PTHREAD_CANCEL_DISABLE = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_DISABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_DISABLE);
        }
    }
    
    #ifdef PTHREAD_CANCEL_ENABLE
    
    #endif
    static if(!is(typeof(PTHREAD_CANCEL_ENABLE))) {
        private enum enumMixinStr_PTHREAD_CANCEL_ENABLE = `enum PTHREAD_CANCEL_ENABLE = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_ENABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_ENABLE);
        }
    }
    
    #ifdef PTHREAD_EXPLICIT_SCHED
    
    #endif
    static if(!is(typeof(PTHREAD_EXPLICIT_SCHED))) {
        private enum enumMixinStr_PTHREAD_EXPLICIT_SCHED = `enum PTHREAD_EXPLICIT_SCHED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_EXPLICIT_SCHED); }))) {
            mixin(enumMixinStr_PTHREAD_EXPLICIT_SCHED);
        }
    }
    
    #ifdef PTHREAD_INHERIT_SCHED
    
    #endif
    static if(!is(typeof(PTHREAD_INHERIT_SCHED))) {
        private enum enumMixinStr_PTHREAD_INHERIT_SCHED = `enum PTHREAD_INHERIT_SCHED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_INHERIT_SCHED); }))) {
            mixin(enumMixinStr_PTHREAD_INHERIT_SCHED);
        }
    }
    
    #define PyLong_AS_LONG( op ) PyLong_AsLong ( op )

    


    static if(!is(typeof(PTHREAD_CREATE_DETACHED))) {
        private enum enumMixinStr_PTHREAD_CREATE_DETACHED = `enum PTHREAD_CREATE_DETACHED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CREATE_DETACHED); }))) {
            mixin(enumMixinStr_PTHREAD_CREATE_DETACHED);
        }
    }
    
    #ifdef PTHREAD_CREATE_JOINABLE
    
    #endif
    static if(!is(typeof(PTHREAD_CREATE_JOINABLE))) {
        private enum enumMixinStr_PTHREAD_CREATE_JOINABLE = `enum PTHREAD_CREATE_JOINABLE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CREATE_JOINABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CREATE_JOINABLE);
        }
    }
    
    #define pthread_cleanup_pop( execute )  __self . __cleanup_stack = __handler . __next ; if ( execute ) ( __handler . __routine ) ( __handler . __arg ) ; }

    


    static if(!is(typeof(_Py_PARSE_PID))) {
        private enum enumMixinStr__Py_PARSE_PID = `enum _Py_PARSE_PID = "i";`;
        static if(is(typeof({ mixin(enumMixinStr__Py_PARSE_PID); }))) {
            mixin(enumMixinStr__Py_PARSE_PID);
        }
    }
    
    #ifdef PyLong_FromPid
    
    #endif
    static if(!is(typeof(PyLong_FromPid))) {
        private enum enumMixinStr_PyLong_FromPid = `enum PyLong_FromPid = PyLong_FromLong;`;
        static if(is(typeof({ mixin(enumMixinStr_PyLong_FromPid); }))) {
            mixin(enumMixinStr_PyLong_FromPid);
        }
    }
    
    #ifdef PyLong_AsPid
    
    #endif
    static if(!is(typeof(PyLong_AsPid))) {
        private enum enumMixinStr_PyLong_AsPid = `enum PyLong_AsPid = PyLong_AsLong;`;
        static if(is(typeof({ mixin(enumMixinStr_PyLong_AsPid); }))) {
            mixin(enumMixinStr_PyLong_AsPid);
        }
    }
    
    #define pthread_cleanup_push( func , val ) { __darwin_pthread_handler_rec __handler ; pthread_t __self = pthread_self ( ) ; __handler . __routine = func ; __handler . __arg = val ; __handler . __next = __self . __cleanup_stack ; __self . __cleanup_stack = & __handler ;

    

    


    static if(!is(typeof(PLOSS))) {
        private enum enumMixinStr_PLOSS = `enum PLOSS = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_PLOSS); }))) {
            mixin(enumMixinStr_PLOSS);
        }
    }
    
    #ifdef TLOSS
    
    #endif
    static if(!is(typeof(TLOSS))) {
        private enum enumMixinStr_TLOSS = `enum TLOSS = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLOSS); }))) {
            mixin(enumMixinStr_TLOSS);
        }
    }
    
    #ifdef _Py_PARSE_INTPTR
    
    #endif
    static if(!is(typeof(_Py_PARSE_INTPTR))) {
        private enum enumMixinStr__Py_PARSE_INTPTR = `enum _Py_PARSE_INTPTR = "l";`;
        static if(is(typeof({ mixin(enumMixinStr__Py_PARSE_INTPTR); }))) {
            mixin(enumMixinStr__Py_PARSE_INTPTR);
        }
    }
    
    #ifdef _Py_PARSE_UINTPTR
    
    #endif
    static if(!is(typeof(_Py_PARSE_UINTPTR))) {
        private enum enumMixinStr__Py_PARSE_UINTPTR = `enum _Py_PARSE_UINTPTR = "k";`;
        static if(is(typeof({ mixin(enumMixinStr__Py_PARSE_UINTPTR); }))) {
            mixin(enumMixinStr__Py_PARSE_UINTPTR);
        }
    }
    
    #ifdef UNDERFLOW
    
    #endif
    static if(!is(typeof(UNDERFLOW))) {
        private enum enumMixinStr_UNDERFLOW = `enum UNDERFLOW = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_UNDERFLOW); }))) {
            mixin(enumMixinStr_UNDERFLOW);
        }
    }
    
    #ifdef OVERFLOW
    
    #endif
    static if(!is(typeof(OVERFLOW))) {
        private enum enumMixinStr_OVERFLOW = `enum OVERFLOW = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_OVERFLOW); }))) {
            mixin(enumMixinStr_OVERFLOW);
        }
    }
    
    #ifdef SING
    
    #endif
    static if(!is(typeof(SING))) {
        private enum enumMixinStr_SING = `enum SING = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SING); }))) {
            mixin(enumMixinStr_SING);
        }
    }
    
    #ifdef DOMAIN
    
    #endif
    static if(!is(typeof(DOMAIN))) {
        private enum enumMixinStr_DOMAIN = `enum DOMAIN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DOMAIN); }))) {
            mixin(enumMixinStr_DOMAIN);
        }
    }
    
    #ifdef X_TLOSS
    
    #endif
    static if(!is(typeof(X_TLOSS))) {
        private enum enumMixinStr_X_TLOSS = `enum X_TLOSS = 1.41484755040568800000e+16;`;
        static if(is(typeof({ mixin(enumMixinStr_X_TLOSS); }))) {
            mixin(enumMixinStr_X_TLOSS);
        }
    }
    
    #ifdef HUGE
    
    #endif
    static if(!is(typeof(HUGE))) {
        private enum enumMixinStr_HUGE = `enum HUGE = MAXFLOAT;`;
        static if(is(typeof({ mixin(enumMixinStr_HUGE); }))) {
            mixin(enumMixinStr_HUGE);
        }
    }
    
    #ifdef FP_QNAN
    
    #endif
    static if(!is(typeof(FP_QNAN))) {
        private enum enumMixinStr_FP_QNAN = `enum FP_QNAN = FP_NAN;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_QNAN); }))) {
            mixin(enumMixinStr_FP_QNAN);
        }
    }
    
    #ifdef FP_SNAN
    
    #endif
    static if(!is(typeof(FP_SNAN))) {
        private enum enumMixinStr_FP_SNAN = `enum FP_SNAN = FP_NAN;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_SNAN); }))) {
            mixin(enumMixinStr_FP_SNAN);
        }
    }
    
    #ifdef MAXFLOAT
    
    #endif
    static if(!is(typeof(MAXFLOAT))) {
        private enum enumMixinStr_MAXFLOAT = `enum MAXFLOAT = 0x1.fffffep+127f;`;
        static if(is(typeof({ mixin(enumMixinStr_MAXFLOAT); }))) {
            mixin(enumMixinStr_MAXFLOAT);
        }
    }
    
    #ifdef M_SQRT1_2
    
    #endif
    static if(!is(typeof(M_SQRT1_2))) {
        private enum enumMixinStr_M_SQRT1_2 = `enum M_SQRT1_2 = 0.707106781186547524400844362104849039;`;
        static if(is(typeof({ mixin(enumMixinStr_M_SQRT1_2); }))) {
            mixin(enumMixinStr_M_SQRT1_2);
        }
    }
    
    #ifdef M_SQRT2
    
    #endif
    static if(!is(typeof(M_SQRT2))) {
        private enum enumMixinStr_M_SQRT2 = `enum M_SQRT2 = 1.41421356237309504880168872420969808;`;
        static if(is(typeof({ mixin(enumMixinStr_M_SQRT2); }))) {
            mixin(enumMixinStr_M_SQRT2);
        }
    }
    
    #ifdef M_2_SQRTPI
    
    #endif
    static if(!is(typeof(M_2_SQRTPI))) {
        private enum enumMixinStr_M_2_SQRTPI = `enum M_2_SQRTPI = 1.12837916709551257389615890312154517;`;
        static if(is(typeof({ mixin(enumMixinStr_M_2_SQRTPI); }))) {
            mixin(enumMixinStr_M_2_SQRTPI);
        }
    }
    
    #ifdef M_2_PI
    
    #endif
    static if(!is(typeof(M_2_PI))) {
        private enum enumMixinStr_M_2_PI = `enum M_2_PI = 0.636619772367581343075535053490057448;`;
        static if(is(typeof({ mixin(enumMixinStr_M_2_PI); }))) {
            mixin(enumMixinStr_M_2_PI);
        }
    }
    
    #ifdef M_1_PI
    
    #endif
    static if(!is(typeof(M_1_PI))) {
        private enum enumMixinStr_M_1_PI = `enum M_1_PI = 0.318309886183790671537767526745028724;`;
        static if(is(typeof({ mixin(enumMixinStr_M_1_PI); }))) {
            mixin(enumMixinStr_M_1_PI);
        }
    }
    
    #ifdef M_PI_4
    
    #endif
    static if(!is(typeof(M_PI_4))) {
        private enum enumMixinStr_M_PI_4 = `enum M_PI_4 = 0.785398163397448309615660845819875721;`;
        static if(is(typeof({ mixin(enumMixinStr_M_PI_4); }))) {
            mixin(enumMixinStr_M_PI_4);
        }
    }
    
    #ifdef M_PI_2
    
    #endif
    static if(!is(typeof(M_PI_2))) {
        private enum enumMixinStr_M_PI_2 = `enum M_PI_2 = 1.57079632679489661923132169163975144;`;
        static if(is(typeof({ mixin(enumMixinStr_M_PI_2); }))) {
            mixin(enumMixinStr_M_PI_2);
        }
    }
    
    #ifdef M_PI
    
    #endif
    static if(!is(typeof(M_PI))) {
        private enum enumMixinStr_M_PI = `enum M_PI = 3.14159265358979323846264338327950288;`;
        static if(is(typeof({ mixin(enumMixinStr_M_PI); }))) {
            mixin(enumMixinStr_M_PI);
        }
    }
    
    #ifdef M_LN10
    
    #endif
    static if(!is(typeof(M_LN10))) {
        private enum enumMixinStr_M_LN10 = `enum M_LN10 = 2.30258509299404568401799145468436421;`;
        static if(is(typeof({ mixin(enumMixinStr_M_LN10); }))) {
            mixin(enumMixinStr_M_LN10);
        }
    }
    
    #ifdef M_LN2
    
    #endif
    static if(!is(typeof(M_LN2))) {
        private enum enumMixinStr_M_LN2 = `enum M_LN2 = 0.693147180559945309417232121458176568;`;
        static if(is(typeof({ mixin(enumMixinStr_M_LN2); }))) {
            mixin(enumMixinStr_M_LN2);
        }
    }
    
    #ifdef M_LOG10E
    
    #endif
    static if(!is(typeof(M_LOG10E))) {
        private enum enumMixinStr_M_LOG10E = `enum M_LOG10E = 0.434294481903251827651128918916605082;`;
        static if(is(typeof({ mixin(enumMixinStr_M_LOG10E); }))) {
            mixin(enumMixinStr_M_LOG10E);
        }
    }
    
    #ifdef M_LOG2E
    
    #endif
    static if(!is(typeof(M_LOG2E))) {
        private enum enumMixinStr_M_LOG2E = `enum M_LOG2E = 1.44269504088896340735992468100189214;`;
        static if(is(typeof({ mixin(enumMixinStr_M_LOG2E); }))) {
            mixin(enumMixinStr_M_LOG2E);
        }
    }
    
    #ifdef M_E
    
    #endif
    static if(!is(typeof(M_E))) {
        private enum enumMixinStr_M_E = `enum M_E = 2.71828182845904523536028747135266250;`;
        static if(is(typeof({ mixin(enumMixinStr_M_E); }))) {
            mixin(enumMixinStr_M_E);
        }
    }
    
    #define isunordered( x , y ) __builtin_isunordered ( ( x ) , ( y ) )

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(math_errhandling))) {
        private enum enumMixinStr_math_errhandling = `enum math_errhandling = ( __math_errhandling ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_math_errhandling); }))) {
            mixin(enumMixinStr_math_errhandling);
        }
    }
    
    #ifdef MATH_ERREXCEPT
    
    #endif
    static if(!is(typeof(MATH_ERREXCEPT))) {
        private enum enumMixinStr_MATH_ERREXCEPT = `enum MATH_ERREXCEPT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_MATH_ERREXCEPT); }))) {
            mixin(enumMixinStr_MATH_ERREXCEPT);
        }
    }
    
    #ifdef MATH_ERRNO
    
    #endif
    static if(!is(typeof(MATH_ERRNO))) {
        private enum enumMixinStr_MATH_ERRNO = `enum MATH_ERRNO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_MATH_ERRNO); }))) {
            mixin(enumMixinStr_MATH_ERRNO);
        }
    }
    
    #ifdef FP_ILOGBNAN
    
    #endif
    static if(!is(typeof(FP_ILOGBNAN))) {
        private enum enumMixinStr_FP_ILOGBNAN = `enum FP_ILOGBNAN = ( - 2147483647 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_FP_ILOGBNAN); }))) {
            mixin(enumMixinStr_FP_ILOGBNAN);
        }
    }
    
    #ifdef FP_ILOGB0
    
    #endif
    static if(!is(typeof(FP_ILOGB0))) {
        private enum enumMixinStr_FP_ILOGB0 = `enum FP_ILOGB0 = ( - 2147483647 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_FP_ILOGB0); }))) {
            mixin(enumMixinStr_FP_ILOGB0);
        }
    }
    
    #ifdef FP_SUPERNORMAL
    
    #endif
    static if(!is(typeof(FP_SUPERNORMAL))) {
        private enum enumMixinStr_FP_SUPERNORMAL = `enum FP_SUPERNORMAL = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_SUPERNORMAL); }))) {
            mixin(enumMixinStr_FP_SUPERNORMAL);
        }
    }
    
    #ifdef FP_SUBNORMAL
    
    #endif
    static if(!is(typeof(FP_SUBNORMAL))) {
        private enum enumMixinStr_FP_SUBNORMAL = `enum FP_SUBNORMAL = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_SUBNORMAL); }))) {
            mixin(enumMixinStr_FP_SUBNORMAL);
        }
    }
    
    #ifdef FP_NORMAL
    
    #endif
    static if(!is(typeof(FP_NORMAL))) {
        private enum enumMixinStr_FP_NORMAL = `enum FP_NORMAL = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_NORMAL); }))) {
            mixin(enumMixinStr_FP_NORMAL);
        }
    }
    
    #ifdef FP_ZERO
    
    #endif
    static if(!is(typeof(FP_ZERO))) {
        private enum enumMixinStr_FP_ZERO = `enum FP_ZERO = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_ZERO); }))) {
            mixin(enumMixinStr_FP_ZERO);
        }
    }
    
    #ifdef FP_INFINITE
    
    #endif
    static if(!is(typeof(FP_INFINITE))) {
        private enum enumMixinStr_FP_INFINITE = `enum FP_INFINITE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_INFINITE); }))) {
            mixin(enumMixinStr_FP_INFINITE);
        }
    }
    
    #ifdef FP_NAN
    
    #endif
    static if(!is(typeof(FP_NAN))) {
        private enum enumMixinStr_FP_NAN = `enum FP_NAN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_NAN); }))) {
            mixin(enumMixinStr_FP_NAN);
        }
    }
    
    #ifdef INFINITY
    
    #endif
    static if(!is(typeof(INFINITY))) {
        private enum enumMixinStr_INFINITY = `enum INFINITY = HUGE_VALF;`;
        static if(is(typeof({ mixin(enumMixinStr_INFINITY); }))) {
            mixin(enumMixinStr_INFINITY);
        }
    }
    
    #ifdef NAN
    
    #endif
    static if(!is(typeof(NAN))) {
        private enum enumMixinStr_NAN = `enum NAN = __builtin_nanf ( "0x7fc00000" );`;
        static if(is(typeof({ mixin(enumMixinStr_NAN); }))) {
            mixin(enumMixinStr_NAN);
        }
    }
    
    #ifdef HUGE_VALL
    
    #endif
    static if(!is(typeof(HUGE_VALL))) {
        private enum enumMixinStr_HUGE_VALL = `enum HUGE_VALL = __builtin_huge_vall ( );`;
        static if(is(typeof({ mixin(enumMixinStr_HUGE_VALL); }))) {
            mixin(enumMixinStr_HUGE_VALL);
        }
    }
    
    #ifdef HUGE_VALF
    
    #endif
    static if(!is(typeof(HUGE_VALF))) {
        private enum enumMixinStr_HUGE_VALF = `enum HUGE_VALF = __builtin_huge_valf ( );`;
        static if(is(typeof({ mixin(enumMixinStr_HUGE_VALF); }))) {
            mixin(enumMixinStr_HUGE_VALF);
        }
    }
    
    #ifdef HUGE_VAL
    
    #endif
    static if(!is(typeof(HUGE_VAL))) {
        private enum enumMixinStr_HUGE_VAL = `enum HUGE_VAL = __builtin_huge_val ( );`;
        static if(is(typeof({ mixin(enumMixinStr_HUGE_VAL); }))) {
            mixin(enumMixinStr_HUGE_VAL);
        }
    }
    
    #define __MATH__ 

    

    

    

    

    

    

    

    


    static if(!is(typeof(_STRUCT_X86_CPMU_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_CPMU_STATE64 = `enum _STRUCT_X86_CPMU_STATE64 = __darwin_x86_cpmu_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_CPMU_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_CPMU_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_DEBUG_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_DEBUG_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_DEBUG_STATE64 = `enum _STRUCT_X86_DEBUG_STATE64 = __darwin_x86_debug_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_DEBUG_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_DEBUG_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_EXCEPTION_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_EXCEPTION_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_EXCEPTION_STATE64 = `enum _STRUCT_X86_EXCEPTION_STATE64 = __darwin_x86_exception_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_EXCEPTION_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_EXCEPTION_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_AVX512_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_AVX512_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_AVX512_STATE64 = `enum _STRUCT_X86_AVX512_STATE64 = __darwin_x86_avx512_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_AVX512_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_AVX512_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_AVX_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_AVX_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_AVX_STATE64 = `enum _STRUCT_X86_AVX_STATE64 = __darwin_x86_avx_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_AVX_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_AVX_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_FLOAT_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_FLOAT_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_FLOAT_STATE64 = `enum _STRUCT_X86_FLOAT_STATE64 = __darwin_x86_float_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_FLOAT_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_FLOAT_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_THREAD_FULL_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_THREAD_FULL_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_THREAD_FULL_STATE64 = `enum _STRUCT_X86_THREAD_FULL_STATE64 = __darwin_x86_thread_full_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_THREAD_FULL_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_THREAD_FULL_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_THREAD_STATE64
    
    #endif
    static if(!is(typeof(_STRUCT_X86_THREAD_STATE64))) {
        private enum enumMixinStr__STRUCT_X86_THREAD_STATE64 = `enum _STRUCT_X86_THREAD_STATE64 = __darwin_x86_thread_state64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_THREAD_STATE64); }))) {
            mixin(enumMixinStr__STRUCT_X86_THREAD_STATE64);
        }
    }
    
    #ifdef _STRUCT_X86_PAGEIN_STATE
    
    #endif
    static if(!is(typeof(_STRUCT_X86_PAGEIN_STATE))) {
        private enum enumMixinStr__STRUCT_X86_PAGEIN_STATE = `enum _STRUCT_X86_PAGEIN_STATE = __x86_pagein_state;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_PAGEIN_STATE); }))) {
            mixin(enumMixinStr__STRUCT_X86_PAGEIN_STATE);
        }
    }
    
    #ifdef _STRUCT_X86_DEBUG_STATE32
    
    #endif
    static if(!is(typeof(_STRUCT_X86_DEBUG_STATE32))) {
        private enum enumMixinStr__STRUCT_X86_DEBUG_STATE32 = `enum _STRUCT_X86_DEBUG_STATE32 = __darwin_x86_debug_state32;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_DEBUG_STATE32); }))) {
            mixin(enumMixinStr__STRUCT_X86_DEBUG_STATE32);
        }
    }
    
    #ifdef _STRUCT_X86_EXCEPTION_STATE32
    
    #endif
    static if(!is(typeof(_STRUCT_X86_EXCEPTION_STATE32))) {
        private enum enumMixinStr__STRUCT_X86_EXCEPTION_STATE32 = `enum _STRUCT_X86_EXCEPTION_STATE32 = __darwin_i386_exception_state;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_EXCEPTION_STATE32); }))) {
            mixin(enumMixinStr__STRUCT_X86_EXCEPTION_STATE32);
        }
    }
    
    #ifdef _STRUCT_X86_AVX512_STATE32
    
    #endif
    static if(!is(typeof(_STRUCT_X86_AVX512_STATE32))) {
        private enum enumMixinStr__STRUCT_X86_AVX512_STATE32 = `enum _STRUCT_X86_AVX512_STATE32 = __darwin_i386_avx512_state;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_AVX512_STATE32); }))) {
            mixin(enumMixinStr__STRUCT_X86_AVX512_STATE32);
        }
    }
    
    #ifdef _STRUCT_X86_AVX_STATE32
    
    #endif
    static if(!is(typeof(_STRUCT_X86_AVX_STATE32))) {
        private enum enumMixinStr__STRUCT_X86_AVX_STATE32 = `enum _STRUCT_X86_AVX_STATE32 = __darwin_i386_avx_state;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_AVX_STATE32); }))) {
            mixin(enumMixinStr__STRUCT_X86_AVX_STATE32);
        }
    }
    
    #ifdef _STRUCT_X86_FLOAT_STATE32
    
    #endif
    static if(!is(typeof(_STRUCT_X86_FLOAT_STATE32))) {
        private enum enumMixinStr__STRUCT_X86_FLOAT_STATE32 = `enum _STRUCT_X86_FLOAT_STATE32 = __darwin_i386_float_state;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_FLOAT_STATE32); }))) {
            mixin(enumMixinStr__STRUCT_X86_FLOAT_STATE32);
        }
    }
    
    #ifdef FP_STATE_BYTES
    
    #endif
    static if(!is(typeof(FP_STATE_BYTES))) {
        private enum enumMixinStr_FP_STATE_BYTES = `enum FP_STATE_BYTES = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_STATE_BYTES); }))) {
            mixin(enumMixinStr_FP_STATE_BYTES);
        }
    }
    
    #ifdef _STRUCT_OPMASK_REG
    
    #endif
    static if(!is(typeof(_STRUCT_OPMASK_REG))) {
        private enum enumMixinStr__STRUCT_OPMASK_REG = `enum _STRUCT_OPMASK_REG = __darwin_opmask_reg;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_OPMASK_REG); }))) {
            mixin(enumMixinStr__STRUCT_OPMASK_REG);
        }
    }
    
    #ifdef _STRUCT_ZMM_REG
    
    #endif
    static if(!is(typeof(_STRUCT_ZMM_REG))) {
        private enum enumMixinStr__STRUCT_ZMM_REG = `enum _STRUCT_ZMM_REG = __darwin_zmm_reg;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_ZMM_REG); }))) {
            mixin(enumMixinStr__STRUCT_ZMM_REG);
        }
    }
    
    #ifdef _STRUCT_YMM_REG
    
    #endif
    static if(!is(typeof(_STRUCT_YMM_REG))) {
        private enum enumMixinStr__STRUCT_YMM_REG = `enum _STRUCT_YMM_REG = __darwin_ymm_reg;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_YMM_REG); }))) {
            mixin(enumMixinStr__STRUCT_YMM_REG);
        }
    }
    
    #ifdef _STRUCT_XMM_REG
    
    #endif
    static if(!is(typeof(_STRUCT_XMM_REG))) {
        private enum enumMixinStr__STRUCT_XMM_REG = `enum _STRUCT_XMM_REG = __darwin_xmm_reg;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_XMM_REG); }))) {
            mixin(enumMixinStr__STRUCT_XMM_REG);
        }
    }
    
    #define Py_MEMORYOBJECT_H 

    


    static if(!is(typeof(_STRUCT_MMST_REG))) {
        private enum enumMixinStr__STRUCT_MMST_REG = `enum _STRUCT_MMST_REG = __darwin_mmst_reg;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MMST_REG); }))) {
            mixin(enumMixinStr__STRUCT_MMST_REG);
        }
    }
    
    #ifdef _STRUCT_FP_STATUS
    
    #endif
    static if(!is(typeof(_STRUCT_FP_STATUS))) {
        private enum enumMixinStr__STRUCT_FP_STATUS = `enum _STRUCT_FP_STATUS = __darwin_fp_status;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_FP_STATUS); }))) {
            mixin(enumMixinStr__STRUCT_FP_STATUS);
        }
    }
    
    #ifdef FP_CHOP
    
    #endif
    static if(!is(typeof(FP_CHOP))) {
        private enum enumMixinStr_FP_CHOP = `enum FP_CHOP = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_CHOP); }))) {
            mixin(enumMixinStr_FP_CHOP);
        }
    }
    
    #ifdef FP_RND_UP
    
    #endif
    static if(!is(typeof(FP_RND_UP))) {
        private enum enumMixinStr_FP_RND_UP = `enum FP_RND_UP = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_RND_UP); }))) {
            mixin(enumMixinStr_FP_RND_UP);
        }
    }
    
    #define PyMemoryView_Check( op ) ( Py_TYPE ( op ) == & PyMemoryView_Type )

    

    

    


    static if(!is(typeof(FP_RND_DOWN))) {
        private enum enumMixinStr_FP_RND_DOWN = `enum FP_RND_DOWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_RND_DOWN); }))) {
            mixin(enumMixinStr_FP_RND_DOWN);
        }
    }
    
    #ifdef FP_RND_NEAR
    
    #endif
    static if(!is(typeof(FP_RND_NEAR))) {
        private enum enumMixinStr_FP_RND_NEAR = `enum FP_RND_NEAR = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_RND_NEAR); }))) {
            mixin(enumMixinStr_FP_RND_NEAR);
        }
    }
    
    #ifdef FP_PREC_64B
    
    #endif
    static if(!is(typeof(FP_PREC_64B))) {
        private enum enumMixinStr_FP_PREC_64B = `enum FP_PREC_64B = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_PREC_64B); }))) {
            mixin(enumMixinStr_FP_PREC_64B);
        }
    }
    
    #ifdef FP_PREC_53B
    
    #endif
    static if(!is(typeof(FP_PREC_53B))) {
        private enum enumMixinStr_FP_PREC_53B = `enum FP_PREC_53B = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_PREC_53B); }))) {
            mixin(enumMixinStr_FP_PREC_53B);
        }
    }
    
    #ifdef FP_PREC_24B
    
    #endif
    static if(!is(typeof(FP_PREC_24B))) {
        private enum enumMixinStr_FP_PREC_24B = `enum FP_PREC_24B = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_PREC_24B); }))) {
            mixin(enumMixinStr_FP_PREC_24B);
        }
    }
    
    #ifdef _STRUCT_FP_CONTROL
    
    #endif
    static if(!is(typeof(_STRUCT_FP_CONTROL))) {
        private enum enumMixinStr__STRUCT_FP_CONTROL = `enum _STRUCT_FP_CONTROL = __darwin_fp_control;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_FP_CONTROL); }))) {
            mixin(enumMixinStr__STRUCT_FP_CONTROL);
        }
    }
    
    #ifdef _STRUCT_X86_THREAD_STATE32
    
    #endif
    static if(!is(typeof(_STRUCT_X86_THREAD_STATE32))) {
        private enum enumMixinStr__STRUCT_X86_THREAD_STATE32 = `enum _STRUCT_X86_THREAD_STATE32 = __darwin_i386_thread_state;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_X86_THREAD_STATE32); }))) {
            mixin(enumMixinStr__STRUCT_X86_THREAD_STATE32);
        }
    }
    
    #define _MACH_I386__STRUCTS_H_ 

    


    static if(!is(typeof(_Py_MANAGED_BUFFER_RELEASED))) {
        private enum enumMixinStr__Py_MANAGED_BUFFER_RELEASED = `enum _Py_MANAGED_BUFFER_RELEASED = 0x001;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MANAGED_BUFFER_RELEASED); }))) {
            mixin(enumMixinStr__Py_MANAGED_BUFFER_RELEASED);
        }
    }
    
    #ifdef _Py_MANAGED_BUFFER_FREE_FORMAT
    
    #endif
    static if(!is(typeof(_Py_MANAGED_BUFFER_FREE_FORMAT))) {
        private enum enumMixinStr__Py_MANAGED_BUFFER_FREE_FORMAT = `enum _Py_MANAGED_BUFFER_FREE_FORMAT = 0x002;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MANAGED_BUFFER_FREE_FORMAT); }))) {
            mixin(enumMixinStr__Py_MANAGED_BUFFER_FREE_FORMAT);
        }
    }
    
    #ifdef _XOPEN_PATH_MAX
    
    #endif
    static if(!is(typeof(_XOPEN_PATH_MAX))) {
        private enum enumMixinStr__XOPEN_PATH_MAX = `enum _XOPEN_PATH_MAX = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_PATH_MAX); }))) {
            mixin(enumMixinStr__XOPEN_PATH_MAX);
        }
    }
    
    #ifdef _XOPEN_NAME_MAX
    
    #endif
    static if(!is(typeof(_XOPEN_NAME_MAX))) {
        private enum enumMixinStr__XOPEN_NAME_MAX = `enum _XOPEN_NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_NAME_MAX); }))) {
            mixin(enumMixinStr__XOPEN_NAME_MAX);
        }
    }
    
    #ifdef IOV_MAX
    
    #endif
    static if(!is(typeof(IOV_MAX))) {
        private enum enumMixinStr_IOV_MAX = `enum IOV_MAX = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_IOV_MAX); }))) {
            mixin(enumMixinStr_IOV_MAX);
        }
    }
    
    #ifdef _Py_MEMORYVIEW_RELEASED
    
    #endif
    static if(!is(typeof(_Py_MEMORYVIEW_RELEASED))) {
        private enum enumMixinStr__Py_MEMORYVIEW_RELEASED = `enum _Py_MEMORYVIEW_RELEASED = 0x001;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MEMORYVIEW_RELEASED); }))) {
            mixin(enumMixinStr__Py_MEMORYVIEW_RELEASED);
        }
    }
    
    #ifdef _Py_MEMORYVIEW_C
    
    #endif
    static if(!is(typeof(_Py_MEMORYVIEW_C))) {
        private enum enumMixinStr__Py_MEMORYVIEW_C = `enum _Py_MEMORYVIEW_C = 0x002;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MEMORYVIEW_C); }))) {
            mixin(enumMixinStr__Py_MEMORYVIEW_C);
        }
    }
    
    #ifdef _Py_MEMORYVIEW_FORTRAN
    
    #endif
    static if(!is(typeof(_Py_MEMORYVIEW_FORTRAN))) {
        private enum enumMixinStr__Py_MEMORYVIEW_FORTRAN = `enum _Py_MEMORYVIEW_FORTRAN = 0x004;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MEMORYVIEW_FORTRAN); }))) {
            mixin(enumMixinStr__Py_MEMORYVIEW_FORTRAN);
        }
    }
    
    #ifdef _Py_MEMORYVIEW_SCALAR
    
    #endif
    static if(!is(typeof(_Py_MEMORYVIEW_SCALAR))) {
        private enum enumMixinStr__Py_MEMORYVIEW_SCALAR = `enum _Py_MEMORYVIEW_SCALAR = 0x008;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MEMORYVIEW_SCALAR); }))) {
            mixin(enumMixinStr__Py_MEMORYVIEW_SCALAR);
        }
    }
    
    #ifdef _Py_MEMORYVIEW_PIL
    
    #endif
    static if(!is(typeof(_Py_MEMORYVIEW_PIL))) {
        private enum enumMixinStr__Py_MEMORYVIEW_PIL = `enum _Py_MEMORYVIEW_PIL = 0x010;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_MEMORYVIEW_PIL); }))) {
            mixin(enumMixinStr__Py_MEMORYVIEW_PIL);
        }
    }
    
    #ifdef _XOPEN_IOV_MAX
    
    #endif
    static if(!is(typeof(_XOPEN_IOV_MAX))) {
        private enum enumMixinStr__XOPEN_IOV_MAX = `enum _XOPEN_IOV_MAX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_IOV_MAX); }))) {
            mixin(enumMixinStr__XOPEN_IOV_MAX);
        }
    }
    
    #ifdef NL_TEXTMAX
    
    #endif
    static if(!is(typeof(NL_TEXTMAX))) {
        private enum enumMixinStr_NL_TEXTMAX = `enum NL_TEXTMAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_NL_TEXTMAX); }))) {
            mixin(enumMixinStr_NL_TEXTMAX);
        }
    }
    
    #ifdef NL_SETMAX
    
    #endif
    static if(!is(typeof(NL_SETMAX))) {
        private enum enumMixinStr_NL_SETMAX = `enum NL_SETMAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_NL_SETMAX); }))) {
            mixin(enumMixinStr_NL_SETMAX);
        }
    }
    
    #define Py_METHODOBJECT_H 

    


    static if(!is(typeof(NL_NMAX))) {
        private enum enumMixinStr_NL_NMAX = `enum NL_NMAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_NL_NMAX); }))) {
            mixin(enumMixinStr_NL_NMAX);
        }
    }
    
    #ifdef NL_MSGMAX
    
    #endif
    static if(!is(typeof(NL_MSGMAX))) {
        private enum enumMixinStr_NL_MSGMAX = `enum NL_MSGMAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr_NL_MSGMAX); }))) {
            mixin(enumMixinStr_NL_MSGMAX);
        }
    }
    
    #define PyCFunction_Check( op ) ( Py_TYPE ( op ) == & PyCFunction_Type )

    


    static if(!is(typeof(NL_LANGMAX))) {
        private enum enumMixinStr_NL_LANGMAX = `enum NL_LANGMAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_NL_LANGMAX); }))) {
            mixin(enumMixinStr_NL_LANGMAX);
        }
    }
    
    #ifdef NL_ARGMAX
    
    #endif
    static if(!is(typeof(NL_ARGMAX))) {
        private enum enumMixinStr_NL_ARGMAX = `enum NL_ARGMAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_NL_ARGMAX); }))) {
            mixin(enumMixinStr_NL_ARGMAX);
        }
    }
    
    #ifdef PASS_MAX
    
    #endif
    static if(!is(typeof(PASS_MAX))) {
        private enum enumMixinStr_PASS_MAX = `enum PASS_MAX = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PASS_MAX); }))) {
            mixin(enumMixinStr_PASS_MAX);
        }
    }
    
    #ifdef OFF_MAX
    
    #endif
    static if(!is(typeof(OFF_MAX))) {
        private enum enumMixinStr_OFF_MAX = `enum OFF_MAX = 9223372036854775807LL;`;
        static if(is(typeof({ mixin(enumMixinStr_OFF_MAX); }))) {
            mixin(enumMixinStr_OFF_MAX);
        }
    }
    
    #ifdef OFF_MIN
    
    #endif
    static if(!is(typeof(OFF_MIN))) {
        private enum enumMixinStr_OFF_MIN = `enum OFF_MIN = ( - 9223372036854775807LL - 1LL );`;
        static if(is(typeof({ mixin(enumMixinStr_OFF_MIN); }))) {
            mixin(enumMixinStr_OFF_MIN);
        }
    }
    
    #ifdef _POSIX_RE_DUP_MAX
    
    #endif
    static if(!is(typeof(_POSIX_RE_DUP_MAX))) {
        private enum enumMixinStr__POSIX_RE_DUP_MAX = `enum _POSIX_RE_DUP_MAX = _POSIX2_RE_DUP_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__POSIX_RE_DUP_MAX);
        }
    }
    
    #ifdef _POSIX2_COLL_WEIGHTS_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr__POSIX2_COLL_WEIGHTS_MAX = `enum _POSIX2_COLL_WEIGHTS_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr__POSIX2_COLL_WEIGHTS_MAX);
        }
    }
    
    #ifdef _POSIX2_CHARCLASS_NAME_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr__POSIX2_CHARCLASS_NAME_MAX = `enum _POSIX2_CHARCLASS_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX2_CHARCLASS_NAME_MAX);
        }
    }
    
    #ifdef _POSIX_TTY_NAME_MAX
    
    #endif
    static if(!is(typeof(_POSIX_TTY_NAME_MAX))) {
        private enum enumMixinStr__POSIX_TTY_NAME_MAX = `enum _POSIX_TTY_NAME_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TTY_NAME_MAX);
        }
    }
    
    #ifdef _POSIX_TRACE_USER_EVENT_MAX
    
    #endif
    static if(!is(typeof(_POSIX_TRACE_USER_EVENT_MAX))) {
        private enum enumMixinStr__POSIX_TRACE_USER_EVENT_MAX = `enum _POSIX_TRACE_USER_EVENT_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_USER_EVENT_MAX); }))) {
            mixin(enumMixinStr__POSIX_TRACE_USER_EVENT_MAX);
        }
    }
    
    #ifdef _POSIX_TRACE_SYS_MAX
    
    #endif
    static if(!is(typeof(_POSIX_TRACE_SYS_MAX))) {
        private enum enumMixinStr__POSIX_TRACE_SYS_MAX = `enum _POSIX_TRACE_SYS_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_SYS_MAX); }))) {
            mixin(enumMixinStr__POSIX_TRACE_SYS_MAX);
        }
    }
    
    #define PyCFunction_GET_FUNCTION( func ) ( ( cast( PyCFunctionObject * ) func ) . m_ml . ml_meth )

    

    

    


    static if(!is(typeof(_POSIX_TRACE_NAME_MAX))) {
        private enum enumMixinStr__POSIX_TRACE_NAME_MAX = `enum _POSIX_TRACE_NAME_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TRACE_NAME_MAX);
        }
    }
    
    #ifdef _POSIX_TRACE_EVENT_NAME_MAX
    
    #endif
    static if(!is(typeof(_POSIX_TRACE_EVENT_NAME_MAX))) {
        private enum enumMixinStr__POSIX_TRACE_EVENT_NAME_MAX = `enum _POSIX_TRACE_EVENT_NAME_MAX = 30;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_EVENT_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TRACE_EVENT_NAME_MAX);
        }
    }
    
    #ifdef _POSIX_SYMLOOP_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SYMLOOP_MAX))) {
        private enum enumMixinStr__POSIX_SYMLOOP_MAX = `enum _POSIX_SYMLOOP_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYMLOOP_MAX); }))) {
            mixin(enumMixinStr__POSIX_SYMLOOP_MAX);
        }
    }
    
    #ifdef _POSIX_SYMLINK_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SYMLINK_MAX))) {
        private enum enumMixinStr__POSIX_SYMLINK_MAX = `enum _POSIX_SYMLINK_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYMLINK_MAX); }))) {
            mixin(enumMixinStr__POSIX_SYMLINK_MAX);
        }
    }
    
    #ifdef _POSIX_SS_REPL_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SS_REPL_MAX))) {
        private enum enumMixinStr__POSIX_SS_REPL_MAX = `enum _POSIX_SS_REPL_MAX = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SS_REPL_MAX); }))) {
            mixin(enumMixinStr__POSIX_SS_REPL_MAX);
        }
    }
    
    #define PyCFunction_New( ML , SELF ) PyCFunction_NewEx ( ( ML ) , ( SELF ) , null )

    


    static if(!is(typeof(_POSIX_LOGIN_NAME_MAX))) {
        private enum enumMixinStr__POSIX_LOGIN_NAME_MAX = `enum _POSIX_LOGIN_NAME_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_LOGIN_NAME_MAX);
        }
    }
    
    #ifdef _POSIX_HOST_NAME_MAX
    
    #endif
    static if(!is(typeof(_POSIX_HOST_NAME_MAX))) {
        private enum enumMixinStr__POSIX_HOST_NAME_MAX = `enum _POSIX_HOST_NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_HOST_NAME_MAX);
        }
    }
    
    #ifdef METH_VARARGS
    
    #endif
    static if(!is(typeof(METH_VARARGS))) {
        private enum enumMixinStr_METH_VARARGS = `enum METH_VARARGS = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_VARARGS); }))) {
            mixin(enumMixinStr_METH_VARARGS);
        }
    }
    
    #ifdef METH_KEYWORDS
    
    #endif
    static if(!is(typeof(METH_KEYWORDS))) {
        private enum enumMixinStr_METH_KEYWORDS = `enum METH_KEYWORDS = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_KEYWORDS); }))) {
            mixin(enumMixinStr_METH_KEYWORDS);
        }
    }
    
    #ifdef METH_NOARGS
    
    #endif
    static if(!is(typeof(METH_NOARGS))) {
        private enum enumMixinStr_METH_NOARGS = `enum METH_NOARGS = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_NOARGS); }))) {
            mixin(enumMixinStr_METH_NOARGS);
        }
    }
    
    #ifdef METH_O
    
    #endif
    static if(!is(typeof(METH_O))) {
        private enum enumMixinStr_METH_O = `enum METH_O = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_O); }))) {
            mixin(enumMixinStr_METH_O);
        }
    }
    
    #ifdef METH_CLASS
    
    #endif
    static if(!is(typeof(METH_CLASS))) {
        private enum enumMixinStr_METH_CLASS = `enum METH_CLASS = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_CLASS); }))) {
            mixin(enumMixinStr_METH_CLASS);
        }
    }
    
    #ifdef METH_STATIC
    
    #endif
    static if(!is(typeof(METH_STATIC))) {
        private enum enumMixinStr_METH_STATIC = `enum METH_STATIC = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_STATIC); }))) {
            mixin(enumMixinStr_METH_STATIC);
        }
    }
    
    #ifdef METH_COEXIST
    
    #endif
    static if(!is(typeof(METH_COEXIST))) {
        private enum enumMixinStr_METH_COEXIST = `enum METH_COEXIST = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_COEXIST); }))) {
            mixin(enumMixinStr_METH_COEXIST);
        }
    }
    
    #ifdef METH_FASTCALL
    
    #endif
    static if(!is(typeof(METH_FASTCALL))) {
        private enum enumMixinStr_METH_FASTCALL = `enum METH_FASTCALL = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_FASTCALL); }))) {
            mixin(enumMixinStr_METH_FASTCALL);
        }
    }
    
    #ifdef METH_STACKLESS
    
    #endif
    static if(!is(typeof(METH_STACKLESS))) {
        private enum enumMixinStr_METH_STACKLESS = `enum METH_STACKLESS = 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_METH_STACKLESS); }))) {
            mixin(enumMixinStr_METH_STACKLESS);
        }
    }
    
    #ifdef PTHREAD_STACK_MIN
    
    #endif
    static if(!is(typeof(PTHREAD_STACK_MIN))) {
        private enum enumMixinStr_PTHREAD_STACK_MIN = `enum PTHREAD_STACK_MIN = 8192;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_STACK_MIN); }))) {
            mixin(enumMixinStr_PTHREAD_STACK_MIN);
        }
    }
    
    #ifdef PTHREAD_KEYS_MAX
    
    #endif
    static if(!is(typeof(PTHREAD_KEYS_MAX))) {
        private enum enumMixinStr_PTHREAD_KEYS_MAX = `enum PTHREAD_KEYS_MAX = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr_PTHREAD_KEYS_MAX);
        }
    }
    
    #ifdef PTHREAD_DESTRUCTOR_ITERATIONS
    
    #endif
    static if(!is(typeof(PTHREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS = `enum PTHREAD_DESTRUCTOR_ITERATIONS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS);
        }
    }
    
    #ifdef _POSIX_THREAD_THREADS_MAX
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_THREADS_MAX))) {
        private enum enumMixinStr__POSIX_THREAD_THREADS_MAX = `enum _POSIX_THREAD_THREADS_MAX = 64;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_THREADS_MAX); }))) {
            mixin(enumMixinStr__POSIX_THREAD_THREADS_MAX);
        }
    }
    
    #ifdef _POSIX_THREAD_DESTRUCTOR_ITERATIONS
    
    #endif
    static if(!is(typeof(_POSIX_THREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS = `enum _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS);
        }
    }
    
    #ifdef _POSIX_CLOCKRES_MIN
    
    #endif
    static if(!is(typeof(_POSIX_CLOCKRES_MIN))) {
        private enum enumMixinStr__POSIX_CLOCKRES_MIN = `enum _POSIX_CLOCKRES_MIN = 20000000;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CLOCKRES_MIN); }))) {
            mixin(enumMixinStr__POSIX_CLOCKRES_MIN);
        }
    }
    
    #ifdef _POSIX_TIMER_MAX
    
    #endif
    static if(!is(typeof(_POSIX_TIMER_MAX))) {
        private enum enumMixinStr__POSIX_TIMER_MAX = `enum _POSIX_TIMER_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMER_MAX); }))) {
            mixin(enumMixinStr__POSIX_TIMER_MAX);
        }
    }
    
    #ifdef _POSIX_SIGQUEUE_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SIGQUEUE_MAX))) {
        private enum enumMixinStr__POSIX_SIGQUEUE_MAX = `enum _POSIX_SIGQUEUE_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SIGQUEUE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SIGQUEUE_MAX);
        }
    }
    
    #ifdef _POSIX_SEM_VALUE_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SEM_VALUE_MAX))) {
        private enum enumMixinStr__POSIX_SEM_VALUE_MAX = `enum _POSIX_SEM_VALUE_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SEM_VALUE_MAX);
        }
    }
    
    #ifdef _POSIX_SEM_NSEMS_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SEM_NSEMS_MAX))) {
        private enum enumMixinStr__POSIX_SEM_NSEMS_MAX = `enum _POSIX_SEM_NSEMS_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEM_NSEMS_MAX); }))) {
            mixin(enumMixinStr__POSIX_SEM_NSEMS_MAX);
        }
    }
    
    #ifdef _POSIX_RTSIG_MAX
    
    #endif
    static if(!is(typeof(_POSIX_RTSIG_MAX))) {
        private enum enumMixinStr__POSIX_RTSIG_MAX = `enum _POSIX_RTSIG_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RTSIG_MAX); }))) {
            mixin(enumMixinStr__POSIX_RTSIG_MAX);
        }
    }
    
    #ifdef _POSIX_MQ_PRIO_MAX
    
    #endif
    static if(!is(typeof(_POSIX_MQ_PRIO_MAX))) {
        private enum enumMixinStr__POSIX_MQ_PRIO_MAX = `enum _POSIX_MQ_PRIO_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_MQ_PRIO_MAX);
        }
    }
    
    #define Py_MODSUPPORT_H 

    


    static if(!is(typeof(_POSIX_MQ_OPEN_MAX))) {
        private enum enumMixinStr__POSIX_MQ_OPEN_MAX = `enum _POSIX_MQ_OPEN_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MQ_OPEN_MAX); }))) {
            mixin(enumMixinStr__POSIX_MQ_OPEN_MAX);
        }
    }
    
    #ifdef _POSIX_DELAYTIMER_MAX
    
    #endif
    static if(!is(typeof(_POSIX_DELAYTIMER_MAX))) {
        private enum enumMixinStr__POSIX_DELAYTIMER_MAX = `enum _POSIX_DELAYTIMER_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr__POSIX_DELAYTIMER_MAX);
        }
    }
    
    #ifdef _POSIX_AIO_MAX
    
    #endif
    static if(!is(typeof(_POSIX_AIO_MAX))) {
        private enum enumMixinStr__POSIX_AIO_MAX = `enum _POSIX_AIO_MAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_AIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_AIO_MAX);
        }
    }
    
    #ifdef _POSIX_AIO_LISTIO_MAX
    
    #endif
    static if(!is(typeof(_POSIX_AIO_LISTIO_MAX))) {
        private enum enumMixinStr__POSIX_AIO_LISTIO_MAX = `enum _POSIX_AIO_LISTIO_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_AIO_LISTIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_AIO_LISTIO_MAX);
        }
    }
    
    #ifdef _POSIX2_RE_DUP_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_RE_DUP_MAX))) {
        private enum enumMixinStr__POSIX2_RE_DUP_MAX = `enum _POSIX2_RE_DUP_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__POSIX2_RE_DUP_MAX);
        }
    }
    
    #ifdef _POSIX2_LINE_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_LINE_MAX))) {
        private enum enumMixinStr__POSIX2_LINE_MAX = `enum _POSIX2_LINE_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_LINE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_LINE_MAX);
        }
    }
    
    #ifdef _POSIX2_EXPR_NEST_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_EXPR_NEST_MAX))) {
        private enum enumMixinStr__POSIX2_EXPR_NEST_MAX = `enum _POSIX2_EXPR_NEST_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr__POSIX2_EXPR_NEST_MAX);
        }
    }
    
    #ifdef _POSIX2_EQUIV_CLASS_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_EQUIV_CLASS_MAX))) {
        private enum enumMixinStr__POSIX2_EQUIV_CLASS_MAX = `enum _POSIX2_EQUIV_CLASS_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_EQUIV_CLASS_MAX); }))) {
            mixin(enumMixinStr__POSIX2_EQUIV_CLASS_MAX);
        }
    }
    
    #ifdef _POSIX2_BC_STRING_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_BC_STRING_MAX))) {
        private enum enumMixinStr__POSIX2_BC_STRING_MAX = `enum _POSIX2_BC_STRING_MAX = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_STRING_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_STRING_MAX);
        }
    }
    
    #ifdef _POSIX2_BC_SCALE_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_BC_SCALE_MAX))) {
        private enum enumMixinStr__POSIX2_BC_SCALE_MAX = `enum _POSIX2_BC_SCALE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_SCALE_MAX);
        }
    }
    
    #ifdef _POSIX2_BC_DIM_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_BC_DIM_MAX))) {
        private enum enumMixinStr__POSIX2_BC_DIM_MAX = `enum _POSIX2_BC_DIM_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_DIM_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_DIM_MAX);
        }
    }
    
    #ifdef _POSIX2_BC_BASE_MAX
    
    #endif
    static if(!is(typeof(_POSIX2_BC_BASE_MAX))) {
        private enum enumMixinStr__POSIX2_BC_BASE_MAX = `enum _POSIX2_BC_BASE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_BASE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_BASE_MAX);
        }
    }
    
    #ifdef _POSIX_TZNAME_MAX
    
    #endif
    static if(!is(typeof(_POSIX_TZNAME_MAX))) {
        private enum enumMixinStr__POSIX_TZNAME_MAX = `enum _POSIX_TZNAME_MAX = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TZNAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TZNAME_MAX);
        }
    }
    
    #ifdef _POSIX_STREAM_MAX
    
    #endif
    static if(!is(typeof(_POSIX_STREAM_MAX))) {
        private enum enumMixinStr__POSIX_STREAM_MAX = `enum _POSIX_STREAM_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_STREAM_MAX); }))) {
            mixin(enumMixinStr__POSIX_STREAM_MAX);
        }
    }
    
    #ifdef _POSIX_SSIZE_MAX
    
    #endif
    static if(!is(typeof(_POSIX_SSIZE_MAX))) {
        private enum enumMixinStr__POSIX_SSIZE_MAX = `enum _POSIX_SSIZE_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SSIZE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SSIZE_MAX);
        }
    }
    
    #ifdef _POSIX_PIPE_BUF
    
    #endif
    static if(!is(typeof(_POSIX_PIPE_BUF))) {
        private enum enumMixinStr__POSIX_PIPE_BUF = `enum _POSIX_PIPE_BUF = 512;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PIPE_BUF); }))) {
            mixin(enumMixinStr__POSIX_PIPE_BUF);
        }
    }
    
    #ifdef _POSIX_PATH_MAX
    
    #endif
    static if(!is(typeof(_POSIX_PATH_MAX))) {
        private enum enumMixinStr__POSIX_PATH_MAX = `enum _POSIX_PATH_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PATH_MAX); }))) {
            mixin(enumMixinStr__POSIX_PATH_MAX);
        }
    }
    
    #ifdef _POSIX_OPEN_MAX
    
    #endif
    static if(!is(typeof(_POSIX_OPEN_MAX))) {
        private enum enumMixinStr__POSIX_OPEN_MAX = `enum _POSIX_OPEN_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_OPEN_MAX); }))) {
            mixin(enumMixinStr__POSIX_OPEN_MAX);
        }
    }
    
    #ifdef _POSIX_NGROUPS_MAX
    
    #endif
    static if(!is(typeof(_POSIX_NGROUPS_MAX))) {
        private enum enumMixinStr__POSIX_NGROUPS_MAX = `enum _POSIX_NGROUPS_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NGROUPS_MAX); }))) {
            mixin(enumMixinStr__POSIX_NGROUPS_MAX);
        }
    }
    
    #ifdef _POSIX_NAME_MAX
    
    #endif
    static if(!is(typeof(_POSIX_NAME_MAX))) {
        private enum enumMixinStr__POSIX_NAME_MAX = `enum _POSIX_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_NAME_MAX);
        }
    }
    
    #ifdef _POSIX_MAX_INPUT
    
    #endif
    static if(!is(typeof(_POSIX_MAX_INPUT))) {
        private enum enumMixinStr__POSIX_MAX_INPUT = `enum _POSIX_MAX_INPUT = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAX_INPUT); }))) {
            mixin(enumMixinStr__POSIX_MAX_INPUT);
        }
    }
    
    #ifdef _POSIX_MAX_CANON
    
    #endif
    static if(!is(typeof(_POSIX_MAX_CANON))) {
        private enum enumMixinStr__POSIX_MAX_CANON = `enum _POSIX_MAX_CANON = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAX_CANON); }))) {
            mixin(enumMixinStr__POSIX_MAX_CANON);
        }
    }
    
    #ifdef _POSIX_LINK_MAX
    
    #endif
    static if(!is(typeof(_POSIX_LINK_MAX))) {
        private enum enumMixinStr__POSIX_LINK_MAX = `enum _POSIX_LINK_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_LINK_MAX); }))) {
            mixin(enumMixinStr__POSIX_LINK_MAX);
        }
    }
    
    #ifdef _POSIX_CHILD_MAX
    
    #endif
    static if(!is(typeof(_POSIX_CHILD_MAX))) {
        private enum enumMixinStr__POSIX_CHILD_MAX = `enum _POSIX_CHILD_MAX = 25;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CHILD_MAX); }))) {
            mixin(enumMixinStr__POSIX_CHILD_MAX);
        }
    }
    
    #ifdef _POSIX_ARG_MAX
    
    #endif
    static if(!is(typeof(_POSIX_ARG_MAX))) {
        private enum enumMixinStr__POSIX_ARG_MAX = `enum _POSIX_ARG_MAX = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ARG_MAX); }))) {
            mixin(enumMixinStr__POSIX_ARG_MAX);
        }
    }
    
    #define _LIMITS_H_ 

    


    static if(!is(typeof(__DARWIN_OS_INLINE))) {
        private enum enumMixinStr___DARWIN_OS_INLINE = `enum __DARWIN_OS_INLINE = static inline;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_OS_INLINE); }))) {
            mixin(enumMixinStr___DARWIN_OS_INLINE);
        }
    }
    
    #define _OS__OSBYTEORDERI386_H 

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(SCNxMAX))) {
        private enum enumMixinStr_SCNxMAX = `enum SCNxMAX = __SCN_MAX_LENGTH_MODIFIER__ "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxMAX); }))) {
            mixin(enumMixinStr_SCNxMAX);
        }
    }
    
    #ifdef SCNuMAX
    
    #endif
    static if(!is(typeof(SCNuMAX))) {
        private enum enumMixinStr_SCNuMAX = `enum SCNuMAX = __SCN_MAX_LENGTH_MODIFIER__ "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuMAX); }))) {
            mixin(enumMixinStr_SCNuMAX);
        }
    }
    
    #ifdef SCNoMAX
    
    #endif
    static if(!is(typeof(SCNoMAX))) {
        private enum enumMixinStr_SCNoMAX = `enum SCNoMAX = __SCN_MAX_LENGTH_MODIFIER__ "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoMAX); }))) {
            mixin(enumMixinStr_SCNoMAX);
        }
    }
    
    #ifdef SCNiMAX
    
    #endif
    static if(!is(typeof(SCNiMAX))) {
        private enum enumMixinStr_SCNiMAX = `enum SCNiMAX = __SCN_MAX_LENGTH_MODIFIER__ "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiMAX); }))) {
            mixin(enumMixinStr_SCNiMAX);
        }
    }
    
    #ifdef SCNdMAX
    
    #endif
    static if(!is(typeof(SCNdMAX))) {
        private enum enumMixinStr_SCNdMAX = `enum SCNdMAX = __SCN_MAX_LENGTH_MODIFIER__ "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdMAX); }))) {
            mixin(enumMixinStr_SCNdMAX);
        }
    }
    
    #ifdef SCNxPTR
    
    #endif
    static if(!is(typeof(SCNxPTR))) {
        private enum enumMixinStr_SCNxPTR = `enum SCNxPTR = "lx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxPTR); }))) {
            mixin(enumMixinStr_SCNxPTR);
        }
    }
    
    #ifdef SCNuPTR
    
    #endif
    static if(!is(typeof(SCNuPTR))) {
        private enum enumMixinStr_SCNuPTR = `enum SCNuPTR = "lu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuPTR); }))) {
            mixin(enumMixinStr_SCNuPTR);
        }
    }
    
    #ifdef SCNoPTR
    
    #endif
    static if(!is(typeof(SCNoPTR))) {
        private enum enumMixinStr_SCNoPTR = `enum SCNoPTR = "lo";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoPTR); }))) {
            mixin(enumMixinStr_SCNoPTR);
        }
    }
    
    #ifdef SCNiPTR
    
    #endif
    static if(!is(typeof(SCNiPTR))) {
        private enum enumMixinStr_SCNiPTR = `enum SCNiPTR = "li";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiPTR); }))) {
            mixin(enumMixinStr_SCNiPTR);
        }
    }
    
    #ifdef SCNdPTR
    
    #endif
    static if(!is(typeof(SCNdPTR))) {
        private enum enumMixinStr_SCNdPTR = `enum SCNdPTR = "ld";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdPTR); }))) {
            mixin(enumMixinStr_SCNdPTR);
        }
    }
    
    #ifdef SCNxFAST64
    
    #endif
    static if(!is(typeof(SCNxFAST64))) {
        private enum enumMixinStr_SCNxFAST64 = `enum SCNxFAST64 = SCNx64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST64); }))) {
            mixin(enumMixinStr_SCNxFAST64);
        }
    }
    
    #ifdef SCNuFAST64
    
    #endif
    static if(!is(typeof(SCNuFAST64))) {
        private enum enumMixinStr_SCNuFAST64 = `enum SCNuFAST64 = SCNu64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST64); }))) {
            mixin(enumMixinStr_SCNuFAST64);
        }
    }
    
    #ifdef SCNoFAST64
    
    #endif
    static if(!is(typeof(SCNoFAST64))) {
        private enum enumMixinStr_SCNoFAST64 = `enum SCNoFAST64 = SCNo64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST64); }))) {
            mixin(enumMixinStr_SCNoFAST64);
        }
    }
    
    #ifdef SCNiFAST64
    
    #endif
    static if(!is(typeof(SCNiFAST64))) {
        private enum enumMixinStr_SCNiFAST64 = `enum SCNiFAST64 = SCNi64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST64); }))) {
            mixin(enumMixinStr_SCNiFAST64);
        }
    }
    
    #define _PyArg_UnpackKeywords( args , nargs , kwargs , kwnames , parser , minpos , maxpos , minkw , buf ) ( ( ( minkw ) == 0 && ( kwargs ) == null && ( kwnames ) == null && ( minpos ) <= ( nargs ) && ( nargs ) <= ( maxpos ) && args != null ) ? ( args ) : _PyArg_UnpackKeywords ( ( args ) , ( nargs ) , ( kwargs ) , ( kwnames ) , ( parser ) , ( minpos ) , ( maxpos ) , ( minkw ) , ( buf ) ) )

    


    static if(!is(typeof(SCNdFAST64))) {
        private enum enumMixinStr_SCNdFAST64 = `enum SCNdFAST64 = SCNd64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST64); }))) {
            mixin(enumMixinStr_SCNdFAST64);
        }
    }
    
    #ifdef SCNxFAST32
    
    #endif
    static if(!is(typeof(SCNxFAST32))) {
        private enum enumMixinStr_SCNxFAST32 = `enum SCNxFAST32 = SCNx32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST32); }))) {
            mixin(enumMixinStr_SCNxFAST32);
        }
    }
    
    #ifdef SCNuFAST32
    
    #endif
    static if(!is(typeof(SCNuFAST32))) {
        private enum enumMixinStr_SCNuFAST32 = `enum SCNuFAST32 = SCNu32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST32); }))) {
            mixin(enumMixinStr_SCNuFAST32);
        }
    }
    
    #ifdef SCNoFAST32
    
    #endif
    static if(!is(typeof(SCNoFAST32))) {
        private enum enumMixinStr_SCNoFAST32 = `enum SCNoFAST32 = SCNo32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST32); }))) {
            mixin(enumMixinStr_SCNoFAST32);
        }
    }
    
    #ifdef SCNiFAST32
    
    #endif
    static if(!is(typeof(SCNiFAST32))) {
        private enum enumMixinStr_SCNiFAST32 = `enum SCNiFAST32 = SCNi32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST32); }))) {
            mixin(enumMixinStr_SCNiFAST32);
        }
    }
    
    #ifdef SCNdFAST32
    
    #endif
    static if(!is(typeof(SCNdFAST32))) {
        private enum enumMixinStr_SCNdFAST32 = `enum SCNdFAST32 = SCNd32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST32); }))) {
            mixin(enumMixinStr_SCNdFAST32);
        }
    }
    
    #ifdef SCNxFAST16
    
    #endif
    static if(!is(typeof(SCNxFAST16))) {
        private enum enumMixinStr_SCNxFAST16 = `enum SCNxFAST16 = SCNx16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST16); }))) {
            mixin(enumMixinStr_SCNxFAST16);
        }
    }
    
    #define PyModule_AddIntMacro( m , c ) PyModule_AddIntConstant ( m , # c , c )

    

    


    static if(!is(typeof(SCNuFAST16))) {
        private enum enumMixinStr_SCNuFAST16 = `enum SCNuFAST16 = SCNu16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST16); }))) {
            mixin(enumMixinStr_SCNuFAST16);
        }
    }
    
    #ifdef SCNoFAST16
    
    #endif
    static if(!is(typeof(SCNoFAST16))) {
        private enum enumMixinStr_SCNoFAST16 = `enum SCNoFAST16 = SCNo16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST16); }))) {
            mixin(enumMixinStr_SCNoFAST16);
        }
    }
    
    #ifdef SCNiFAST16
    
    #endif
    static if(!is(typeof(SCNiFAST16))) {
        private enum enumMixinStr_SCNiFAST16 = `enum SCNiFAST16 = SCNi16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST16); }))) {
            mixin(enumMixinStr_SCNiFAST16);
        }
    }
    
    #ifdef SCNdFAST16
    
    #endif
    static if(!is(typeof(SCNdFAST16))) {
        private enum enumMixinStr_SCNdFAST16 = `enum SCNdFAST16 = SCNd16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST16); }))) {
            mixin(enumMixinStr_SCNdFAST16);
        }
    }
    
    #ifdef SCNxFAST8
    
    #endif
    static if(!is(typeof(SCNxFAST8))) {
        private enum enumMixinStr_SCNxFAST8 = `enum SCNxFAST8 = SCNx8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST8); }))) {
            mixin(enumMixinStr_SCNxFAST8);
        }
    }
    
    #ifdef SCNuFAST8
    
    #endif
    static if(!is(typeof(SCNuFAST8))) {
        private enum enumMixinStr_SCNuFAST8 = `enum SCNuFAST8 = SCNu8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST8); }))) {
            mixin(enumMixinStr_SCNuFAST8);
        }
    }
    
    #ifdef Py_CLEANUP_SUPPORTED
    
    #endif
    static if(!is(typeof(Py_CLEANUP_SUPPORTED))) {
        private enum enumMixinStr_Py_CLEANUP_SUPPORTED = `enum Py_CLEANUP_SUPPORTED = 0x20000;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_CLEANUP_SUPPORTED); }))) {
            mixin(enumMixinStr_Py_CLEANUP_SUPPORTED);
        }
    }
    
    #ifdef PYTHON_API_VERSION
    
    #endif
    static if(!is(typeof(PYTHON_API_VERSION))) {
        private enum enumMixinStr_PYTHON_API_VERSION = `enum PYTHON_API_VERSION = 1013;`;
        static if(is(typeof({ mixin(enumMixinStr_PYTHON_API_VERSION); }))) {
            mixin(enumMixinStr_PYTHON_API_VERSION);
        }
    }
    
    #ifdef PYTHON_API_STRING
    
    #endif
    static if(!is(typeof(PYTHON_API_STRING))) {
        private enum enumMixinStr_PYTHON_API_STRING = `enum PYTHON_API_STRING = "1013";`;
        static if(is(typeof({ mixin(enumMixinStr_PYTHON_API_STRING); }))) {
            mixin(enumMixinStr_PYTHON_API_STRING);
        }
    }
    
    #ifdef PYTHON_ABI_VERSION
    
    #endif
    static if(!is(typeof(PYTHON_ABI_VERSION))) {
        private enum enumMixinStr_PYTHON_ABI_VERSION = `enum PYTHON_ABI_VERSION = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PYTHON_ABI_VERSION); }))) {
            mixin(enumMixinStr_PYTHON_ABI_VERSION);
        }
    }
    
    #ifdef PYTHON_ABI_STRING
    
    #endif
    static if(!is(typeof(PYTHON_ABI_STRING))) {
        private enum enumMixinStr_PYTHON_ABI_STRING = `enum PYTHON_ABI_STRING = "3";`;
        static if(is(typeof({ mixin(enumMixinStr_PYTHON_ABI_STRING); }))) {
            mixin(enumMixinStr_PYTHON_ABI_STRING);
        }
    }
    
    #ifdef SCNoFAST8
    
    #endif
    static if(!is(typeof(SCNoFAST8))) {
        private enum enumMixinStr_SCNoFAST8 = `enum SCNoFAST8 = SCNo8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST8); }))) {
            mixin(enumMixinStr_SCNoFAST8);
        }
    }
    
    #ifdef SCNiFAST8
    
    #endif
    static if(!is(typeof(SCNiFAST8))) {
        private enum enumMixinStr_SCNiFAST8 = `enum SCNiFAST8 = SCNi8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST8); }))) {
            mixin(enumMixinStr_SCNiFAST8);
        }
    }
    
    #ifdef SCNdFAST8
    
    #endif
    static if(!is(typeof(SCNdFAST8))) {
        private enum enumMixinStr_SCNdFAST8 = `enum SCNdFAST8 = SCNd8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST8); }))) {
            mixin(enumMixinStr_SCNdFAST8);
        }
    }
    
    #ifdef SCNxLEAST64
    
    #endif
    static if(!is(typeof(SCNxLEAST64))) {
        private enum enumMixinStr_SCNxLEAST64 = `enum SCNxLEAST64 = SCNx64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST64); }))) {
            mixin(enumMixinStr_SCNxLEAST64);
        }
    }
    
    #define PyModule_Create( module ) PyModule_Create2 ( module , 1013 )

    


    static if(!is(typeof(SCNuLEAST64))) {
        private enum enumMixinStr_SCNuLEAST64 = `enum SCNuLEAST64 = SCNu64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST64); }))) {
            mixin(enumMixinStr_SCNuLEAST64);
        }
    }
    
    #ifdef SCNoLEAST64
    
    #endif
    static if(!is(typeof(SCNoLEAST64))) {
        private enum enumMixinStr_SCNoLEAST64 = `enum SCNoLEAST64 = SCNo64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST64); }))) {
            mixin(enumMixinStr_SCNoLEAST64);
        }
    }
    
    #define PyModule_FromDefAndSpec( module , spec ) PyModule_FromDefAndSpec2 ( module , spec , 1013 )

    


    static if(!is(typeof(SCNiLEAST64))) {
        private enum enumMixinStr_SCNiLEAST64 = `enum SCNiLEAST64 = SCNi64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST64); }))) {
            mixin(enumMixinStr_SCNiLEAST64);
        }
    }
    
    #ifdef SCNdLEAST64
    
    #endif
    static if(!is(typeof(SCNdLEAST64))) {
        private enum enumMixinStr_SCNdLEAST64 = `enum SCNdLEAST64 = SCNd64;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST64); }))) {
            mixin(enumMixinStr_SCNdLEAST64);
        }
    }
    
    #define Py_MODULEOBJECT_H 

    


    static if(!is(typeof(SCNxLEAST32))) {
        private enum enumMixinStr_SCNxLEAST32 = `enum SCNxLEAST32 = SCNx32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST32); }))) {
            mixin(enumMixinStr_SCNxLEAST32);
        }
    }
    
    #ifdef SCNuLEAST32
    
    #endif
    static if(!is(typeof(SCNuLEAST32))) {
        private enum enumMixinStr_SCNuLEAST32 = `enum SCNuLEAST32 = SCNu32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST32); }))) {
            mixin(enumMixinStr_SCNuLEAST32);
        }
    }
    
    #define PyModule_Check( op ) PyObject_TypeCheck ( op , & PyModule_Type )

    

    


    static if(!is(typeof(SCNoLEAST32))) {
        private enum enumMixinStr_SCNoLEAST32 = `enum SCNoLEAST32 = SCNo32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST32); }))) {
            mixin(enumMixinStr_SCNoLEAST32);
        }
    }
    
    #ifdef SCNiLEAST32
    
    #endif
    static if(!is(typeof(SCNiLEAST32))) {
        private enum enumMixinStr_SCNiLEAST32 = `enum SCNiLEAST32 = SCNi32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST32); }))) {
            mixin(enumMixinStr_SCNiLEAST32);
        }
    }
    
    #ifdef SCNdLEAST32
    
    #endif
    static if(!is(typeof(SCNdLEAST32))) {
        private enum enumMixinStr_SCNdLEAST32 = `enum SCNdLEAST32 = SCNd32;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST32); }))) {
            mixin(enumMixinStr_SCNdLEAST32);
        }
    }
    
    #ifdef SCNxLEAST16
    
    #endif
    static if(!is(typeof(SCNxLEAST16))) {
        private enum enumMixinStr_SCNxLEAST16 = `enum SCNxLEAST16 = SCNx16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST16); }))) {
            mixin(enumMixinStr_SCNxLEAST16);
        }
    }
    
    #ifdef SCNuLEAST16
    
    #endif
    static if(!is(typeof(SCNuLEAST16))) {
        private enum enumMixinStr_SCNuLEAST16 = `enum SCNuLEAST16 = SCNu16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST16); }))) {
            mixin(enumMixinStr_SCNuLEAST16);
        }
    }
    
    #ifdef SCNoLEAST16
    
    #endif
    static if(!is(typeof(SCNoLEAST16))) {
        private enum enumMixinStr_SCNoLEAST16 = `enum SCNoLEAST16 = SCNo16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST16); }))) {
            mixin(enumMixinStr_SCNoLEAST16);
        }
    }
    
    #ifdef SCNiLEAST16
    
    #endif
    static if(!is(typeof(SCNiLEAST16))) {
        private enum enumMixinStr_SCNiLEAST16 = `enum SCNiLEAST16 = SCNi16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST16); }))) {
            mixin(enumMixinStr_SCNiLEAST16);
        }
    }
    
    #ifdef SCNdLEAST16
    
    #endif
    static if(!is(typeof(SCNdLEAST16))) {
        private enum enumMixinStr_SCNdLEAST16 = `enum SCNdLEAST16 = SCNd16;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST16); }))) {
            mixin(enumMixinStr_SCNdLEAST16);
        }
    }
    
    #ifdef SCNxLEAST8
    
    #endif
    static if(!is(typeof(SCNxLEAST8))) {
        private enum enumMixinStr_SCNxLEAST8 = `enum SCNxLEAST8 = SCNx8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST8); }))) {
            mixin(enumMixinStr_SCNxLEAST8);
        }
    }
    
    #ifdef SCNuLEAST8
    
    #endif
    static if(!is(typeof(SCNuLEAST8))) {
        private enum enumMixinStr_SCNuLEAST8 = `enum SCNuLEAST8 = SCNu8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST8); }))) {
            mixin(enumMixinStr_SCNuLEAST8);
        }
    }
    
    #ifdef SCNoLEAST8
    
    #endif
    static if(!is(typeof(SCNoLEAST8))) {
        private enum enumMixinStr_SCNoLEAST8 = `enum SCNoLEAST8 = SCNo8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST8); }))) {
            mixin(enumMixinStr_SCNoLEAST8);
        }
    }
    
    #ifdef SCNiLEAST8
    
    #endif
    static if(!is(typeof(SCNiLEAST8))) {
        private enum enumMixinStr_SCNiLEAST8 = `enum SCNiLEAST8 = SCNi8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST8); }))) {
            mixin(enumMixinStr_SCNiLEAST8);
        }
    }
    
    #ifdef SCNdLEAST8
    
    #endif
    static if(!is(typeof(SCNdLEAST8))) {
        private enum enumMixinStr_SCNdLEAST8 = `enum SCNdLEAST8 = SCNd8;`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST8); }))) {
            mixin(enumMixinStr_SCNdLEAST8);
        }
    }
    
    #ifdef SCNx64
    
    #endif
    static if(!is(typeof(SCNx64))) {
        private enum enumMixinStr_SCNx64 = `enum SCNx64 = __SCN_64_LENGTH_MODIFIER__ "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx64); }))) {
            mixin(enumMixinStr_SCNx64);
        }
    }
    
    #ifdef SCNu64
    
    #endif
    static if(!is(typeof(SCNu64))) {
        private enum enumMixinStr_SCNu64 = `enum SCNu64 = __SCN_64_LENGTH_MODIFIER__ "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu64); }))) {
            mixin(enumMixinStr_SCNu64);
        }
    }
    
    #ifdef SCNo64
    
    #endif
    static if(!is(typeof(SCNo64))) {
        private enum enumMixinStr_SCNo64 = `enum SCNo64 = __SCN_64_LENGTH_MODIFIER__ "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo64); }))) {
            mixin(enumMixinStr_SCNo64);
        }
    }
    
    #ifdef SCNi64
    
    #endif
    static if(!is(typeof(SCNi64))) {
        private enum enumMixinStr_SCNi64 = `enum SCNi64 = __SCN_64_LENGTH_MODIFIER__ "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi64); }))) {
            mixin(enumMixinStr_SCNi64);
        }
    }
    
    #ifdef SCNd64
    
    #endif
    static if(!is(typeof(SCNd64))) {
        private enum enumMixinStr_SCNd64 = `enum SCNd64 = __SCN_64_LENGTH_MODIFIER__ "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd64); }))) {
            mixin(enumMixinStr_SCNd64);
        }
    }
    
    #ifdef SCNx32
    
    #endif
    static if(!is(typeof(SCNx32))) {
        private enum enumMixinStr_SCNx32 = `enum SCNx32 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx32); }))) {
            mixin(enumMixinStr_SCNx32);
        }
    }
    
    #ifdef SCNu32
    
    #endif
    static if(!is(typeof(SCNu32))) {
        private enum enumMixinStr_SCNu32 = `enum SCNu32 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu32); }))) {
            mixin(enumMixinStr_SCNu32);
        }
    }
    
    #ifdef SCNo32
    
    #endif
    static if(!is(typeof(SCNo32))) {
        private enum enumMixinStr_SCNo32 = `enum SCNo32 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo32); }))) {
            mixin(enumMixinStr_SCNo32);
        }
    }
    
    #ifdef SCNi32
    
    #endif
    static if(!is(typeof(SCNi32))) {
        private enum enumMixinStr_SCNi32 = `enum SCNi32 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi32); }))) {
            mixin(enumMixinStr_SCNi32);
        }
    }
    
    #ifdef SCNd32
    
    #endif
    static if(!is(typeof(SCNd32))) {
        private enum enumMixinStr_SCNd32 = `enum SCNd32 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd32); }))) {
            mixin(enumMixinStr_SCNd32);
        }
    }
    
    #ifdef SCNx16
    
    #endif
    static if(!is(typeof(SCNx16))) {
        private enum enumMixinStr_SCNx16 = `enum SCNx16 = "hx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx16); }))) {
            mixin(enumMixinStr_SCNx16);
        }
    }
    
    #ifdef SCNu16
    
    #endif
    static if(!is(typeof(SCNu16))) {
        private enum enumMixinStr_SCNu16 = `enum SCNu16 = "hu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu16); }))) {
            mixin(enumMixinStr_SCNu16);
        }
    }
    
    #ifdef SCNo16
    
    #endif
    static if(!is(typeof(SCNo16))) {
        private enum enumMixinStr_SCNo16 = `enum SCNo16 = "ho";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo16); }))) {
            mixin(enumMixinStr_SCNo16);
        }
    }
    
    #ifdef SCNi16
    
    #endif
    static if(!is(typeof(SCNi16))) {
        private enum enumMixinStr_SCNi16 = `enum SCNi16 = "hi";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi16); }))) {
            mixin(enumMixinStr_SCNi16);
        }
    }
    
    #ifdef SCNd16
    
    #endif
    static if(!is(typeof(SCNd16))) {
        private enum enumMixinStr_SCNd16 = `enum SCNd16 = "hd";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd16); }))) {
            mixin(enumMixinStr_SCNd16);
        }
    }
    
    #ifdef SCNx8
    
    #endif
    static if(!is(typeof(SCNx8))) {
        private enum enumMixinStr_SCNx8 = `enum SCNx8 = __PRI_8_LENGTH_MODIFIER__ "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx8); }))) {
            mixin(enumMixinStr_SCNx8);
        }
    }
    
    #ifdef SCNu8
    
    #endif
    static if(!is(typeof(SCNu8))) {
        private enum enumMixinStr_SCNu8 = `enum SCNu8 = __PRI_8_LENGTH_MODIFIER__ "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu8); }))) {
            mixin(enumMixinStr_SCNu8);
        }
    }
    
    #ifdef SCNo8
    
    #endif
    static if(!is(typeof(SCNo8))) {
        private enum enumMixinStr_SCNo8 = `enum SCNo8 = __PRI_8_LENGTH_MODIFIER__ "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo8); }))) {
            mixin(enumMixinStr_SCNo8);
        }
    }
    
    #ifdef SCNi8
    
    #endif
    static if(!is(typeof(SCNi8))) {
        private enum enumMixinStr_SCNi8 = `enum SCNi8 = __PRI_8_LENGTH_MODIFIER__ "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi8); }))) {
            mixin(enumMixinStr_SCNi8);
        }
    }
    
    #ifdef SCNd8
    
    #endif
    static if(!is(typeof(SCNd8))) {
        private enum enumMixinStr_SCNd8 = `enum SCNd8 = __PRI_8_LENGTH_MODIFIER__ "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd8); }))) {
            mixin(enumMixinStr_SCNd8);
        }
    }
    
    #ifdef PyModuleDef_HEAD_INIT
    
    #endif
    static if(!is(typeof(PyModuleDef_HEAD_INIT))) {
        private enum enumMixinStr_PyModuleDef_HEAD_INIT = `enum PyModuleDef_HEAD_INIT = { PyObject_HEAD_INIT ( null ) null ,  0 ,  null ,  };`;
        static if(is(typeof({ mixin(enumMixinStr_PyModuleDef_HEAD_INIT); }))) {
            mixin(enumMixinStr_PyModuleDef_HEAD_INIT);
        }
    }
    
    #ifdef PRIXMAX
    
    #endif
    static if(!is(typeof(PRIXMAX))) {
        private enum enumMixinStr_PRIXMAX = `enum PRIXMAX = __PRI_MAX_LENGTH_MODIFIER__ "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXMAX); }))) {
            mixin(enumMixinStr_PRIXMAX);
        }
    }
    
    #ifdef PRIxMAX
    
    #endif
    static if(!is(typeof(PRIxMAX))) {
        private enum enumMixinStr_PRIxMAX = `enum PRIxMAX = __PRI_MAX_LENGTH_MODIFIER__ "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxMAX); }))) {
            mixin(enumMixinStr_PRIxMAX);
        }
    }
    
    #ifdef Py_mod_create
    
    #endif
    static if(!is(typeof(Py_mod_create))) {
        private enum enumMixinStr_Py_mod_create = `enum Py_mod_create = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_mod_create); }))) {
            mixin(enumMixinStr_Py_mod_create);
        }
    }
    
    #ifdef Py_mod_exec
    
    #endif
    static if(!is(typeof(Py_mod_exec))) {
        private enum enumMixinStr_Py_mod_exec = `enum Py_mod_exec = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_mod_exec); }))) {
            mixin(enumMixinStr_Py_mod_exec);
        }
    }
    
    #ifdef _Py_mod_LAST_SLOT
    
    #endif
    static if(!is(typeof(_Py_mod_LAST_SLOT))) {
        private enum enumMixinStr__Py_mod_LAST_SLOT = `enum _Py_mod_LAST_SLOT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__Py_mod_LAST_SLOT); }))) {
            mixin(enumMixinStr__Py_mod_LAST_SLOT);
        }
    }
    
    #ifdef PRIuMAX
    
    #endif
    static if(!is(typeof(PRIuMAX))) {
        private enum enumMixinStr_PRIuMAX = `enum PRIuMAX = __PRI_MAX_LENGTH_MODIFIER__ "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuMAX); }))) {
            mixin(enumMixinStr_PRIuMAX);
        }
    }
    
    #define NAMESPACEOBJECT_H 

    


    static if(!is(typeof(PRIoMAX))) {
        private enum enumMixinStr_PRIoMAX = `enum PRIoMAX = __PRI_MAX_LENGTH_MODIFIER__ "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoMAX); }))) {
            mixin(enumMixinStr_PRIoMAX);
        }
    }
    
    #ifdef PRIiMAX
    
    #endif
    static if(!is(typeof(PRIiMAX))) {
        private enum enumMixinStr_PRIiMAX = `enum PRIiMAX = __PRI_MAX_LENGTH_MODIFIER__ "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiMAX); }))) {
            mixin(enumMixinStr_PRIiMAX);
        }
    }
    
    #ifdef PRIdMAX
    
    #endif
    static if(!is(typeof(PRIdMAX))) {
        private enum enumMixinStr_PRIdMAX = `enum PRIdMAX = __PRI_MAX_LENGTH_MODIFIER__ "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdMAX); }))) {
            mixin(enumMixinStr_PRIdMAX);
        }
    }
    
    #ifdef PRIXPTR
    
    #endif
    static if(!is(typeof(PRIXPTR))) {
        private enum enumMixinStr_PRIXPTR = `enum PRIXPTR = "lX";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXPTR); }))) {
            mixin(enumMixinStr_PRIXPTR);
        }
    }
    
    #define Py_OBJECT_H 

    


    static if(!is(typeof(PRIxPTR))) {
        private enum enumMixinStr_PRIxPTR = `enum PRIxPTR = "lx";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxPTR); }))) {
            mixin(enumMixinStr_PRIxPTR);
        }
    }
    
    #define _PyObject_HEAD_EXTRA 

    

    


    static if(!is(typeof(PyObject_HEAD))) {
        private enum enumMixinStr_PyObject_HEAD = `enum PyObject_HEAD = PyObject ob_base ;;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_HEAD); }))) {
            mixin(enumMixinStr_PyObject_HEAD);
        }
    }
    
    #define PyObject_HEAD_INIT( type ) {  1 , type } ,

    

    


    static if(!is(typeof(PyObject_VAR_HEAD))) {
        private enum enumMixinStr_PyObject_VAR_HEAD = `enum PyObject_VAR_HEAD = PyVarObject ob_base ;;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_VAR_HEAD); }))) {
            mixin(enumMixinStr_PyObject_VAR_HEAD);
        }
    }
    
    #ifdef Py_INVALID_SIZE
    
    #endif
    static if(!is(typeof(Py_INVALID_SIZE))) {
        private enum enumMixinStr_Py_INVALID_SIZE = `enum Py_INVALID_SIZE = cast( Py_ssize_t ) - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_INVALID_SIZE); }))) {
            mixin(enumMixinStr_Py_INVALID_SIZE);
        }
    }
    
    #ifdef PRIuPTR
    
    #endif
    static if(!is(typeof(PRIuPTR))) {
        private enum enumMixinStr_PRIuPTR = `enum PRIuPTR = "lu";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuPTR); }))) {
            mixin(enumMixinStr_PRIuPTR);
        }
    }
    
    #ifdef PRIoPTR
    
    #endif
    static if(!is(typeof(PRIoPTR))) {
        private enum enumMixinStr_PRIoPTR = `enum PRIoPTR = "lo";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoPTR); }))) {
            mixin(enumMixinStr_PRIoPTR);
        }
    }
    
    #ifdef PRIiPTR
    
    #endif
    static if(!is(typeof(PRIiPTR))) {
        private enum enumMixinStr_PRIiPTR = `enum PRIiPTR = "li";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiPTR); }))) {
            mixin(enumMixinStr_PRIiPTR);
        }
    }
    
    #ifdef PRIdPTR
    
    #endif
    static if(!is(typeof(PRIdPTR))) {
        private enum enumMixinStr_PRIdPTR = `enum PRIdPTR = "ld";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdPTR); }))) {
            mixin(enumMixinStr_PRIdPTR);
        }
    }
    
    #define _PyObject_CAST( op ) ( cast( PyObject * ) ( op ) )

    


    static if(!is(typeof(PRIXFAST64))) {
        private enum enumMixinStr_PRIXFAST64 = `enum PRIXFAST64 = PRIX64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST64); }))) {
            mixin(enumMixinStr_PRIXFAST64);
        }
    }
    
    #ifdef PRIxFAST64
    
    #endif
    static if(!is(typeof(PRIxFAST64))) {
        private enum enumMixinStr_PRIxFAST64 = `enum PRIxFAST64 = PRIx64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST64); }))) {
            mixin(enumMixinStr_PRIxFAST64);
        }
    }
    
    #define _PyVarObject_CAST( op ) ( cast( PyVarObject * ) ( op ) )

    

    

    

    


    static if(!is(typeof(PRIuFAST64))) {
        private enum enumMixinStr_PRIuFAST64 = `enum PRIuFAST64 = PRIu64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST64); }))) {
            mixin(enumMixinStr_PRIuFAST64);
        }
    }
    
    #ifdef PRIoFAST64
    
    #endif
    static if(!is(typeof(PRIoFAST64))) {
        private enum enumMixinStr_PRIoFAST64 = `enum PRIoFAST64 = PRIo64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST64); }))) {
            mixin(enumMixinStr_PRIoFAST64);
        }
    }
    
    #ifdef PRIiFAST64
    
    #endif
    static if(!is(typeof(PRIiFAST64))) {
        private enum enumMixinStr_PRIiFAST64 = `enum PRIiFAST64 = PRIi64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST64); }))) {
            mixin(enumMixinStr_PRIiFAST64);
        }
    }
    
    #ifdef PRIdFAST64
    
    #endif
    static if(!is(typeof(PRIdFAST64))) {
        private enum enumMixinStr_PRIdFAST64 = `enum PRIdFAST64 = PRId64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST64); }))) {
            mixin(enumMixinStr_PRIdFAST64);
        }
    }
    
    #ifdef PRIXFAST32
    
    #endif
    static if(!is(typeof(PRIXFAST32))) {
        private enum enumMixinStr_PRIXFAST32 = `enum PRIXFAST32 = PRIX32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST32); }))) {
            mixin(enumMixinStr_PRIXFAST32);
        }
    }
    
    #ifdef PRIxFAST32
    
    #endif
    static if(!is(typeof(PRIxFAST32))) {
        private enum enumMixinStr_PRIxFAST32 = `enum PRIxFAST32 = PRIx32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST32); }))) {
            mixin(enumMixinStr_PRIxFAST32);
        }
    }
    
    #ifdef PRIuFAST32
    
    #endif
    static if(!is(typeof(PRIuFAST32))) {
        private enum enumMixinStr_PRIuFAST32 = `enum PRIuFAST32 = PRIu32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST32); }))) {
            mixin(enumMixinStr_PRIuFAST32);
        }
    }
    
    #ifdef PRIoFAST32
    
    #endif
    static if(!is(typeof(PRIoFAST32))) {
        private enum enumMixinStr_PRIoFAST32 = `enum PRIoFAST32 = PRIo32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST32); }))) {
            mixin(enumMixinStr_PRIoFAST32);
        }
    }
    
    #ifdef PRIiFAST32
    
    #endif
    static if(!is(typeof(PRIiFAST32))) {
        private enum enumMixinStr_PRIiFAST32 = `enum PRIiFAST32 = PRIi32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST32); }))) {
            mixin(enumMixinStr_PRIiFAST32);
        }
    }
    
    #ifdef PRIdFAST32
    
    #endif
    static if(!is(typeof(PRIdFAST32))) {
        private enum enumMixinStr_PRIdFAST32 = `enum PRIdFAST32 = PRId32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST32); }))) {
            mixin(enumMixinStr_PRIdFAST32);
        }
    }
    
    #ifdef PRIXFAST16
    
    #endif
    static if(!is(typeof(PRIXFAST16))) {
        private enum enumMixinStr_PRIXFAST16 = `enum PRIXFAST16 = PRIX16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST16); }))) {
            mixin(enumMixinStr_PRIXFAST16);
        }
    }
    
    #ifdef PRIxFAST16
    
    #endif
    static if(!is(typeof(PRIxFAST16))) {
        private enum enumMixinStr_PRIxFAST16 = `enum PRIxFAST16 = PRIx16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST16); }))) {
            mixin(enumMixinStr_PRIxFAST16);
        }
    }
    
    #ifdef PRIuFAST16
    
    #endif
    static if(!is(typeof(PRIuFAST16))) {
        private enum enumMixinStr_PRIuFAST16 = `enum PRIuFAST16 = PRIu16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST16); }))) {
            mixin(enumMixinStr_PRIuFAST16);
        }
    }
    
    #ifdef PRIoFAST16
    
    #endif
    static if(!is(typeof(PRIoFAST16))) {
        private enum enumMixinStr_PRIoFAST16 = `enum PRIoFAST16 = PRIo16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST16); }))) {
            mixin(enumMixinStr_PRIoFAST16);
        }
    }
    
    #ifdef PRIiFAST16
    
    #endif
    static if(!is(typeof(PRIiFAST16))) {
        private enum enumMixinStr_PRIiFAST16 = `enum PRIiFAST16 = PRIi16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST16); }))) {
            mixin(enumMixinStr_PRIiFAST16);
        }
    }
    
    #ifdef PRIdFAST16
    
    #endif
    static if(!is(typeof(PRIdFAST16))) {
        private enum enumMixinStr_PRIdFAST16 = `enum PRIdFAST16 = PRId16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST16); }))) {
            mixin(enumMixinStr_PRIdFAST16);
        }
    }
    
    #ifdef PRIXFAST8
    
    #endif
    static if(!is(typeof(PRIXFAST8))) {
        private enum enumMixinStr_PRIXFAST8 = `enum PRIXFAST8 = PRIX8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST8); }))) {
            mixin(enumMixinStr_PRIXFAST8);
        }
    }
    
    #ifdef PRIxFAST8
    
    #endif
    static if(!is(typeof(PRIxFAST8))) {
        private enum enumMixinStr_PRIxFAST8 = `enum PRIxFAST8 = PRIx8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST8); }))) {
            mixin(enumMixinStr_PRIxFAST8);
        }
    }
    
    #ifdef PRIuFAST8
    
    #endif
    static if(!is(typeof(PRIuFAST8))) {
        private enum enumMixinStr_PRIuFAST8 = `enum PRIuFAST8 = PRIu8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST8); }))) {
            mixin(enumMixinStr_PRIuFAST8);
        }
    }
    
    #ifdef PRIoFAST8
    
    #endif
    static if(!is(typeof(PRIoFAST8))) {
        private enum enumMixinStr_PRIoFAST8 = `enum PRIoFAST8 = PRIo8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST8); }))) {
            mixin(enumMixinStr_PRIoFAST8);
        }
    }
    
    #ifdef PRIiFAST8
    
    #endif
    static if(!is(typeof(PRIiFAST8))) {
        private enum enumMixinStr_PRIiFAST8 = `enum PRIiFAST8 = PRIi8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST8); }))) {
            mixin(enumMixinStr_PRIiFAST8);
        }
    }
    
    #ifdef PRIdFAST8
    
    #endif
    static if(!is(typeof(PRIdFAST8))) {
        private enum enumMixinStr_PRIdFAST8 = `enum PRIdFAST8 = PRId8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST8); }))) {
            mixin(enumMixinStr_PRIdFAST8);
        }
    }
    
    #ifdef PRIXLEAST64
    
    #endif
    static if(!is(typeof(PRIXLEAST64))) {
        private enum enumMixinStr_PRIXLEAST64 = `enum PRIXLEAST64 = PRIX64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST64); }))) {
            mixin(enumMixinStr_PRIXLEAST64);
        }
    }
    
    #ifdef PRIxLEAST64
    
    #endif
    static if(!is(typeof(PRIxLEAST64))) {
        private enum enumMixinStr_PRIxLEAST64 = `enum PRIxLEAST64 = PRIx64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST64); }))) {
            mixin(enumMixinStr_PRIxLEAST64);
        }
    }
    
    #ifdef PRIuLEAST64
    
    #endif
    static if(!is(typeof(PRIuLEAST64))) {
        private enum enumMixinStr_PRIuLEAST64 = `enum PRIuLEAST64 = PRIu64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST64); }))) {
            mixin(enumMixinStr_PRIuLEAST64);
        }
    }
    
    #ifdef PRIoLEAST64
    
    #endif
    static if(!is(typeof(PRIoLEAST64))) {
        private enum enumMixinStr_PRIoLEAST64 = `enum PRIoLEAST64 = PRIo64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST64); }))) {
            mixin(enumMixinStr_PRIoLEAST64);
        }
    }
    
    #ifdef PRIiLEAST64
    
    #endif
    static if(!is(typeof(PRIiLEAST64))) {
        private enum enumMixinStr_PRIiLEAST64 = `enum PRIiLEAST64 = PRIi64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST64); }))) {
            mixin(enumMixinStr_PRIiLEAST64);
        }
    }
    
    #ifdef PRIdLEAST64
    
    #endif
    static if(!is(typeof(PRIdLEAST64))) {
        private enum enumMixinStr_PRIdLEAST64 = `enum PRIdLEAST64 = PRId64;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST64); }))) {
            mixin(enumMixinStr_PRIdLEAST64);
        }
    }
    
    #ifdef PRIXLEAST32
    
    #endif
    static if(!is(typeof(PRIXLEAST32))) {
        private enum enumMixinStr_PRIXLEAST32 = `enum PRIXLEAST32 = PRIX32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST32); }))) {
            mixin(enumMixinStr_PRIXLEAST32);
        }
    }
    
    #ifdef PRIxLEAST32
    
    #endif
    static if(!is(typeof(PRIxLEAST32))) {
        private enum enumMixinStr_PRIxLEAST32 = `enum PRIxLEAST32 = PRIx32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST32); }))) {
            mixin(enumMixinStr_PRIxLEAST32);
        }
    }
    
    #ifdef PRIuLEAST32
    
    #endif
    static if(!is(typeof(PRIuLEAST32))) {
        private enum enumMixinStr_PRIuLEAST32 = `enum PRIuLEAST32 = PRIu32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST32); }))) {
            mixin(enumMixinStr_PRIuLEAST32);
        }
    }
    
    #ifdef PRIoLEAST32
    
    #endif
    static if(!is(typeof(PRIoLEAST32))) {
        private enum enumMixinStr_PRIoLEAST32 = `enum PRIoLEAST32 = PRIo32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST32); }))) {
            mixin(enumMixinStr_PRIoLEAST32);
        }
    }
    
    #ifdef PRIiLEAST32
    
    #endif
    static if(!is(typeof(PRIiLEAST32))) {
        private enum enumMixinStr_PRIiLEAST32 = `enum PRIiLEAST32 = PRIi32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST32); }))) {
            mixin(enumMixinStr_PRIiLEAST32);
        }
    }
    
    #ifdef PRIdLEAST32
    
    #endif
    static if(!is(typeof(PRIdLEAST32))) {
        private enum enumMixinStr_PRIdLEAST32 = `enum PRIdLEAST32 = PRId32;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST32); }))) {
            mixin(enumMixinStr_PRIdLEAST32);
        }
    }
    
    #ifdef PRIXLEAST16
    
    #endif
    static if(!is(typeof(PRIXLEAST16))) {
        private enum enumMixinStr_PRIXLEAST16 = `enum PRIXLEAST16 = PRIX16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST16); }))) {
            mixin(enumMixinStr_PRIXLEAST16);
        }
    }
    
    #ifdef PRIxLEAST16
    
    #endif
    static if(!is(typeof(PRIxLEAST16))) {
        private enum enumMixinStr_PRIxLEAST16 = `enum PRIxLEAST16 = PRIx16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST16); }))) {
            mixin(enumMixinStr_PRIxLEAST16);
        }
    }
    
    #ifdef PRIuLEAST16
    
    #endif
    static if(!is(typeof(PRIuLEAST16))) {
        private enum enumMixinStr_PRIuLEAST16 = `enum PRIuLEAST16 = PRIu16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST16); }))) {
            mixin(enumMixinStr_PRIuLEAST16);
        }
    }
    
    #ifdef PRIoLEAST16
    
    #endif
    static if(!is(typeof(PRIoLEAST16))) {
        private enum enumMixinStr_PRIoLEAST16 = `enum PRIoLEAST16 = PRIo16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST16); }))) {
            mixin(enumMixinStr_PRIoLEAST16);
        }
    }
    
    #ifdef PRIiLEAST16
    
    #endif
    static if(!is(typeof(PRIiLEAST16))) {
        private enum enumMixinStr_PRIiLEAST16 = `enum PRIiLEAST16 = PRIi16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST16); }))) {
            mixin(enumMixinStr_PRIiLEAST16);
        }
    }
    
    #ifdef PRIdLEAST16
    
    #endif
    static if(!is(typeof(PRIdLEAST16))) {
        private enum enumMixinStr_PRIdLEAST16 = `enum PRIdLEAST16 = PRId16;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST16); }))) {
            mixin(enumMixinStr_PRIdLEAST16);
        }
    }
    
    #ifdef PRIXLEAST8
    
    #endif
    static if(!is(typeof(PRIXLEAST8))) {
        private enum enumMixinStr_PRIXLEAST8 = `enum PRIXLEAST8 = PRIX8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST8); }))) {
            mixin(enumMixinStr_PRIXLEAST8);
        }
    }
    
    #define PyObject_TypeCheck( ob , tp ) ( Py_TYPE ( ob ) == ( tp ) || PyType_IsSubtype ( Py_TYPE ( ob ) , ( tp ) ) )

    


    static if(!is(typeof(PRIxLEAST8))) {
        private enum enumMixinStr_PRIxLEAST8 = `enum PRIxLEAST8 = PRIx8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST8); }))) {
            mixin(enumMixinStr_PRIxLEAST8);
        }
    }
    
    #ifdef PRIuLEAST8
    
    #endif
    static if(!is(typeof(PRIuLEAST8))) {
        private enum enumMixinStr_PRIuLEAST8 = `enum PRIuLEAST8 = PRIu8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST8); }))) {
            mixin(enumMixinStr_PRIuLEAST8);
        }
    }
    
    #ifdef PRIoLEAST8
    
    #endif
    static if(!is(typeof(PRIoLEAST8))) {
        private enum enumMixinStr_PRIoLEAST8 = `enum PRIoLEAST8 = PRIo8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST8); }))) {
            mixin(enumMixinStr_PRIoLEAST8);
        }
    }
    
    #ifdef PRIiLEAST8
    
    #endif
    static if(!is(typeof(PRIiLEAST8))) {
        private enum enumMixinStr_PRIiLEAST8 = `enum PRIiLEAST8 = PRIi8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST8); }))) {
            mixin(enumMixinStr_PRIiLEAST8);
        }
    }
    
    #ifdef PRIdLEAST8
    
    #endif
    static if(!is(typeof(PRIdLEAST8))) {
        private enum enumMixinStr_PRIdLEAST8 = `enum PRIdLEAST8 = PRId8;`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST8); }))) {
            mixin(enumMixinStr_PRIdLEAST8);
        }
    }
    
    #ifdef PRIX64
    
    #endif
    static if(!is(typeof(PRIX64))) {
        private enum enumMixinStr_PRIX64 = `enum PRIX64 = __PRI_64_LENGTH_MODIFIER__ "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX64); }))) {
            mixin(enumMixinStr_PRIX64);
        }
    }
    
    #ifdef PRIx64
    
    #endif
    static if(!is(typeof(PRIx64))) {
        private enum enumMixinStr_PRIx64 = `enum PRIx64 = __PRI_64_LENGTH_MODIFIER__ "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx64); }))) {
            mixin(enumMixinStr_PRIx64);
        }
    }
    
    #ifdef PRIu64
    
    #endif
    static if(!is(typeof(PRIu64))) {
        private enum enumMixinStr_PRIu64 = `enum PRIu64 = __PRI_64_LENGTH_MODIFIER__ "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu64); }))) {
            mixin(enumMixinStr_PRIu64);
        }
    }
    
    #define PyType_Check( op ) PyType_FastSubclass ( Py_TYPE ( op ) , Py_TPFLAGS_TYPE_SUBCLASS )

    

    


    static if(!is(typeof(PRIo64))) {
        private enum enumMixinStr_PRIo64 = `enum PRIo64 = __PRI_64_LENGTH_MODIFIER__ "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo64); }))) {
            mixin(enumMixinStr_PRIo64);
        }
    }
    
    #ifdef PRIi64
    
    #endif
    static if(!is(typeof(PRIi64))) {
        private enum enumMixinStr_PRIi64 = `enum PRIi64 = __PRI_64_LENGTH_MODIFIER__ "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi64); }))) {
            mixin(enumMixinStr_PRIi64);
        }
    }
    
    #ifdef PRId64
    
    #endif
    static if(!is(typeof(PRId64))) {
        private enum enumMixinStr_PRId64 = `enum PRId64 = __PRI_64_LENGTH_MODIFIER__ "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId64); }))) {
            mixin(enumMixinStr_PRId64);
        }
    }
    
    #ifdef PRIX32
    
    #endif
    static if(!is(typeof(PRIX32))) {
        private enum enumMixinStr_PRIX32 = `enum PRIX32 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX32); }))) {
            mixin(enumMixinStr_PRIX32);
        }
    }
    
    #ifdef PRIx32
    
    #endif
    static if(!is(typeof(PRIx32))) {
        private enum enumMixinStr_PRIx32 = `enum PRIx32 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx32); }))) {
            mixin(enumMixinStr_PRIx32);
        }
    }
    
    #ifdef PRIu32
    
    #endif
    static if(!is(typeof(PRIu32))) {
        private enum enumMixinStr_PRIu32 = `enum PRIu32 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu32); }))) {
            mixin(enumMixinStr_PRIu32);
        }
    }
    
    #ifdef PRIo32
    
    #endif
    static if(!is(typeof(PRIo32))) {
        private enum enumMixinStr_PRIo32 = `enum PRIo32 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo32); }))) {
            mixin(enumMixinStr_PRIo32);
        }
    }
    
    #ifdef PRIi32
    
    #endif
    static if(!is(typeof(PRIi32))) {
        private enum enumMixinStr_PRIi32 = `enum PRIi32 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi32); }))) {
            mixin(enumMixinStr_PRIi32);
        }
    }
    
    #ifdef PRId32
    
    #endif
    static if(!is(typeof(PRId32))) {
        private enum enumMixinStr_PRId32 = `enum PRId32 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId32); }))) {
            mixin(enumMixinStr_PRId32);
        }
    }
    
    #ifdef PRIX16
    
    #endif
    static if(!is(typeof(PRIX16))) {
        private enum enumMixinStr_PRIX16 = `enum PRIX16 = "hX";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX16); }))) {
            mixin(enumMixinStr_PRIX16);
        }
    }
    
    #ifdef PRIx16
    
    #endif
    static if(!is(typeof(PRIx16))) {
        private enum enumMixinStr_PRIx16 = `enum PRIx16 = "hx";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx16); }))) {
            mixin(enumMixinStr_PRIx16);
        }
    }
    
    #ifdef PRIu16
    
    #endif
    static if(!is(typeof(PRIu16))) {
        private enum enumMixinStr_PRIu16 = `enum PRIu16 = "hu";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu16); }))) {
            mixin(enumMixinStr_PRIu16);
        }
    }
    
    #ifdef PRIo16
    
    #endif
    static if(!is(typeof(PRIo16))) {
        private enum enumMixinStr_PRIo16 = `enum PRIo16 = "ho";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo16); }))) {
            mixin(enumMixinStr_PRIo16);
        }
    }
    
    #ifdef PRIi16
    
    #endif
    static if(!is(typeof(PRIi16))) {
        private enum enumMixinStr_PRIi16 = `enum PRIi16 = "hi";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi16); }))) {
            mixin(enumMixinStr_PRIi16);
        }
    }
    
    #ifdef PRId16
    
    #endif
    static if(!is(typeof(PRId16))) {
        private enum enumMixinStr_PRId16 = `enum PRId16 = "hd";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId16); }))) {
            mixin(enumMixinStr_PRId16);
        }
    }
    
    #ifdef PRIX8
    
    #endif
    static if(!is(typeof(PRIX8))) {
        private enum enumMixinStr_PRIX8 = `enum PRIX8 = __PRI_8_LENGTH_MODIFIER__ "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX8); }))) {
            mixin(enumMixinStr_PRIX8);
        }
    }
    
    #ifdef PRIx8
    
    #endif
    static if(!is(typeof(PRIx8))) {
        private enum enumMixinStr_PRIx8 = `enum PRIx8 = __PRI_8_LENGTH_MODIFIER__ "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx8); }))) {
            mixin(enumMixinStr_PRIx8);
        }
    }
    
    #ifdef PRIu8
    
    #endif
    static if(!is(typeof(PRIu8))) {
        private enum enumMixinStr_PRIu8 = `enum PRIu8 = __PRI_8_LENGTH_MODIFIER__ "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu8); }))) {
            mixin(enumMixinStr_PRIu8);
        }
    }
    
    #ifdef PRIo8
    
    #endif
    static if(!is(typeof(PRIo8))) {
        private enum enumMixinStr_PRIo8 = `enum PRIo8 = __PRI_8_LENGTH_MODIFIER__ "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo8); }))) {
            mixin(enumMixinStr_PRIo8);
        }
    }
    
    #ifdef PRIi8
    
    #endif
    static if(!is(typeof(PRIi8))) {
        private enum enumMixinStr_PRIi8 = `enum PRIi8 = __PRI_8_LENGTH_MODIFIER__ "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi8); }))) {
            mixin(enumMixinStr_PRIi8);
        }
    }
    
    #ifdef PRId8
    
    #endif
    static if(!is(typeof(PRId8))) {
        private enum enumMixinStr_PRId8 = `enum PRId8 = __PRI_8_LENGTH_MODIFIER__ "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId8); }))) {
            mixin(enumMixinStr_PRId8);
        }
    }
    
    #ifdef __SCN_MAX_LENGTH_MODIFIER__
    
    #endif
    static if(!is(typeof(__SCN_MAX_LENGTH_MODIFIER__))) {
        private enum enumMixinStr___SCN_MAX_LENGTH_MODIFIER__ = `enum __SCN_MAX_LENGTH_MODIFIER__ = "j";`;
        static if(is(typeof({ mixin(enumMixinStr___SCN_MAX_LENGTH_MODIFIER__); }))) {
            mixin(enumMixinStr___SCN_MAX_LENGTH_MODIFIER__);
        }
    }
    
    #ifdef __PRI_MAX_LENGTH_MODIFIER__
    
    #endif
    static if(!is(typeof(__PRI_MAX_LENGTH_MODIFIER__))) {
        private enum enumMixinStr___PRI_MAX_LENGTH_MODIFIER__ = `enum __PRI_MAX_LENGTH_MODIFIER__ = "j";`;
        static if(is(typeof({ mixin(enumMixinStr___PRI_MAX_LENGTH_MODIFIER__); }))) {
            mixin(enumMixinStr___PRI_MAX_LENGTH_MODIFIER__);
        }
    }
    
    #ifdef __SCN_64_LENGTH_MODIFIER__
    
    #endif
    static if(!is(typeof(__SCN_64_LENGTH_MODIFIER__))) {
        private enum enumMixinStr___SCN_64_LENGTH_MODIFIER__ = `enum __SCN_64_LENGTH_MODIFIER__ = "ll";`;
        static if(is(typeof({ mixin(enumMixinStr___SCN_64_LENGTH_MODIFIER__); }))) {
            mixin(enumMixinStr___SCN_64_LENGTH_MODIFIER__);
        }
    }
    
    #ifdef __PRI_64_LENGTH_MODIFIER__
    
    #endif
    static if(!is(typeof(__PRI_64_LENGTH_MODIFIER__))) {
        private enum enumMixinStr___PRI_64_LENGTH_MODIFIER__ = `enum __PRI_64_LENGTH_MODIFIER__ = "ll";`;
        static if(is(typeof({ mixin(enumMixinStr___PRI_64_LENGTH_MODIFIER__); }))) {
            mixin(enumMixinStr___PRI_64_LENGTH_MODIFIER__);
        }
    }
    
    #ifdef __PRI_8_LENGTH_MODIFIER__
    
    #endif
    static if(!is(typeof(__PRI_8_LENGTH_MODIFIER__))) {
        private enum enumMixinStr___PRI_8_LENGTH_MODIFIER__ = `enum __PRI_8_LENGTH_MODIFIER__ = "hh";`;
        static if(is(typeof({ mixin(enumMixinStr___PRI_8_LENGTH_MODIFIER__); }))) {
            mixin(enumMixinStr___PRI_8_LENGTH_MODIFIER__);
        }
    }
    
    #define _INTTYPES_H_ 

    

    


    static if(!is(typeof(USER_ADDR_NULL))) {
        private enum enumMixinStr_USER_ADDR_NULL = `enum USER_ADDR_NULL = ( cast( user_addr_t ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_USER_ADDR_NULL); }))) {
            mixin(enumMixinStr_USER_ADDR_NULL);
        }
    }
    
    #define _MACHTYPES_H_ 

    


    static if(!is(typeof(_I386_SIGNAL_H_))) {
        private enum enumMixinStr__I386_SIGNAL_H_ = `enum _I386_SIGNAL_H_ = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__I386_SIGNAL_H_); }))) {
            mixin(enumMixinStr__I386_SIGNAL_H_);
        }
    }
    
    #ifdef QUAD_MIN
    
    #endif
    static if(!is(typeof(QUAD_MIN))) {
        private enum enumMixinStr_QUAD_MIN = `enum QUAD_MIN = ( - 9223372036854775807LL - 1LL );`;
        static if(is(typeof({ mixin(enumMixinStr_QUAD_MIN); }))) {
            mixin(enumMixinStr_QUAD_MIN);
        }
    }
    
    #ifdef QUAD_MAX
    
    #endif
    static if(!is(typeof(QUAD_MAX))) {
        private enum enumMixinStr_QUAD_MAX = `enum QUAD_MAX = 9223372036854775807LL;`;
        static if(is(typeof({ mixin(enumMixinStr_QUAD_MAX); }))) {
            mixin(enumMixinStr_QUAD_MAX);
        }
    }
    
    #ifdef UQUAD_MAX
    
    #endif
    static if(!is(typeof(UQUAD_MAX))) {
        private enum enumMixinStr_UQUAD_MAX = `enum UQUAD_MAX = ( 9223372036854775807LL * 2ULL + 1ULL );`;
        static if(is(typeof({ mixin(enumMixinStr_UQUAD_MAX); }))) {
            mixin(enumMixinStr_UQUAD_MAX);
        }
    }
    
    #ifdef SIZE_T_MAX
    
    #endif
    static if(!is(typeof(SIZE_T_MAX))) {
        private enum enumMixinStr_SIZE_T_MAX = `enum SIZE_T_MAX = ( 9223372036854775807L * 2UL + 1UL );`;
        static if(is(typeof({ mixin(enumMixinStr_SIZE_T_MAX); }))) {
            mixin(enumMixinStr_SIZE_T_MAX);
        }
    }
    
    #ifdef WORD_BIT
    
    #endif
    static if(!is(typeof(WORD_BIT))) {
        private enum enumMixinStr_WORD_BIT = `enum WORD_BIT = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_WORD_BIT); }))) {
            mixin(enumMixinStr_WORD_BIT);
        }
    }
    
    #ifdef SSIZE_MAX
    
    #endif
    static if(!is(typeof(SSIZE_MAX))) {
        private enum enumMixinStr_SSIZE_MAX = `enum SSIZE_MAX = 9223372036854775807L;`;
        static if(is(typeof({ mixin(enumMixinStr_SSIZE_MAX); }))) {
            mixin(enumMixinStr_SSIZE_MAX);
        }
    }
    
    #ifdef LONG_BIT
    
    #endif
    static if(!is(typeof(LONG_BIT))) {
        private enum enumMixinStr_LONG_BIT = `enum LONG_BIT = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_BIT); }))) {
            mixin(enumMixinStr_LONG_BIT);
        }
    }
    
    #ifdef CLK_TCK
    
    #endif
    static if(!is(typeof(CLK_TCK))) {
        private enum enumMixinStr_CLK_TCK = `enum CLK_TCK = __DARWIN_CLK_TCK;`;
        static if(is(typeof({ mixin(enumMixinStr_CLK_TCK); }))) {
            mixin(enumMixinStr_CLK_TCK);
        }
    }
    
    #ifdef MB_LEN_MAX
    
    #endif
    static if(!is(typeof(MB_LEN_MAX))) {
        private enum enumMixinStr_MB_LEN_MAX = `enum MB_LEN_MAX = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_MB_LEN_MAX); }))) {
            mixin(enumMixinStr_MB_LEN_MAX);
        }
    }
    
    #define _I386_LIMITS_H_ 

    


    static if(!is(typeof(BYTE_ORDER))) {
        private enum enumMixinStr_BYTE_ORDER = `enum BYTE_ORDER = __DARWIN_BYTE_ORDER;`;
        static if(is(typeof({ mixin(enumMixinStr_BYTE_ORDER); }))) {
            mixin(enumMixinStr_BYTE_ORDER);
        }
    }
    
    #ifdef Py_PRINT_RAW
    
    #endif
    static if(!is(typeof(Py_PRINT_RAW))) {
        private enum enumMixinStr_Py_PRINT_RAW = `enum Py_PRINT_RAW = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_PRINT_RAW); }))) {
            mixin(enumMixinStr_Py_PRINT_RAW);
        }
    }
    
    #ifdef Py_TPFLAGS_HEAPTYPE
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_HEAPTYPE))) {
        private enum enumMixinStr_Py_TPFLAGS_HEAPTYPE = `enum Py_TPFLAGS_HEAPTYPE = ( 1UL << 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_HEAPTYPE); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_HEAPTYPE);
        }
    }
    
    #ifdef Py_TPFLAGS_BASETYPE
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_BASETYPE))) {
        private enum enumMixinStr_Py_TPFLAGS_BASETYPE = `enum Py_TPFLAGS_BASETYPE = ( 1UL << 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_BASETYPE); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_BASETYPE);
        }
    }
    
    #ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    
    #endif
    static if(!is(typeof(_Py_TPFLAGS_HAVE_VECTORCALL))) {
        private enum enumMixinStr__Py_TPFLAGS_HAVE_VECTORCALL = `enum _Py_TPFLAGS_HAVE_VECTORCALL = ( 1UL << 11 );`;
        static if(is(typeof({ mixin(enumMixinStr__Py_TPFLAGS_HAVE_VECTORCALL); }))) {
            mixin(enumMixinStr__Py_TPFLAGS_HAVE_VECTORCALL);
        }
    }
    
    #ifdef Py_TPFLAGS_READY
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_READY))) {
        private enum enumMixinStr_Py_TPFLAGS_READY = `enum Py_TPFLAGS_READY = ( 1UL << 12 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_READY); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_READY);
        }
    }
    
    #ifdef Py_TPFLAGS_READYING
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_READYING))) {
        private enum enumMixinStr_Py_TPFLAGS_READYING = `enum Py_TPFLAGS_READYING = ( 1UL << 13 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_READYING); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_READYING);
        }
    }
    
    #ifdef Py_TPFLAGS_HAVE_GC
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_HAVE_GC))) {
        private enum enumMixinStr_Py_TPFLAGS_HAVE_GC = `enum Py_TPFLAGS_HAVE_GC = ( 1UL << 14 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_HAVE_GC); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_HAVE_GC);
        }
    }
    
    #ifdef Py_TPFLAGS_HAVE_STACKLESS_EXTENSION
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_HAVE_STACKLESS_EXTENSION))) {
        private enum enumMixinStr_Py_TPFLAGS_HAVE_STACKLESS_EXTENSION = `enum Py_TPFLAGS_HAVE_STACKLESS_EXTENSION = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_HAVE_STACKLESS_EXTENSION); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_HAVE_STACKLESS_EXTENSION);
        }
    }
    
    #ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_METHOD_DESCRIPTOR))) {
        private enum enumMixinStr_Py_TPFLAGS_METHOD_DESCRIPTOR = `enum Py_TPFLAGS_METHOD_DESCRIPTOR = ( 1UL << 17 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_METHOD_DESCRIPTOR); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_METHOD_DESCRIPTOR);
        }
    }
    
    #ifdef Py_TPFLAGS_HAVE_VERSION_TAG
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_HAVE_VERSION_TAG))) {
        private enum enumMixinStr_Py_TPFLAGS_HAVE_VERSION_TAG = `enum Py_TPFLAGS_HAVE_VERSION_TAG = ( 1UL << 18 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_HAVE_VERSION_TAG); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_HAVE_VERSION_TAG);
        }
    }
    
    #ifdef Py_TPFLAGS_VALID_VERSION_TAG
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_VALID_VERSION_TAG))) {
        private enum enumMixinStr_Py_TPFLAGS_VALID_VERSION_TAG = `enum Py_TPFLAGS_VALID_VERSION_TAG = ( 1UL << 19 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_VALID_VERSION_TAG); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_VALID_VERSION_TAG);
        }
    }
    
    #ifdef Py_TPFLAGS_IS_ABSTRACT
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_IS_ABSTRACT))) {
        private enum enumMixinStr_Py_TPFLAGS_IS_ABSTRACT = `enum Py_TPFLAGS_IS_ABSTRACT = ( 1UL << 20 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_IS_ABSTRACT); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_IS_ABSTRACT);
        }
    }
    
    #ifdef Py_TPFLAGS_LONG_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_LONG_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_LONG_SUBCLASS = `enum Py_TPFLAGS_LONG_SUBCLASS = ( 1UL << 24 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_LONG_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_LONG_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_LIST_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_LIST_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_LIST_SUBCLASS = `enum Py_TPFLAGS_LIST_SUBCLASS = ( 1UL << 25 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_LIST_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_LIST_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_TUPLE_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_TUPLE_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_TUPLE_SUBCLASS = `enum Py_TPFLAGS_TUPLE_SUBCLASS = ( 1UL << 26 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_TUPLE_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_TUPLE_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_BYTES_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_BYTES_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_BYTES_SUBCLASS = `enum Py_TPFLAGS_BYTES_SUBCLASS = ( 1UL << 27 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_BYTES_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_BYTES_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_UNICODE_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_UNICODE_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_UNICODE_SUBCLASS = `enum Py_TPFLAGS_UNICODE_SUBCLASS = ( 1UL << 28 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_UNICODE_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_UNICODE_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_DICT_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_DICT_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_DICT_SUBCLASS = `enum Py_TPFLAGS_DICT_SUBCLASS = ( 1UL << 29 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_DICT_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_DICT_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_BASE_EXC_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_BASE_EXC_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_BASE_EXC_SUBCLASS = `enum Py_TPFLAGS_BASE_EXC_SUBCLASS = ( 1UL << 30 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_BASE_EXC_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_BASE_EXC_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_TYPE_SUBCLASS
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_TYPE_SUBCLASS))) {
        private enum enumMixinStr_Py_TPFLAGS_TYPE_SUBCLASS = `enum Py_TPFLAGS_TYPE_SUBCLASS = ( 1UL << 31 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_TYPE_SUBCLASS); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_TYPE_SUBCLASS);
        }
    }
    
    #ifdef Py_TPFLAGS_DEFAULT
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_DEFAULT))) {
        private enum enumMixinStr_Py_TPFLAGS_DEFAULT = `enum Py_TPFLAGS_DEFAULT = ( 0 | ( 1UL << 18 ) | 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_DEFAULT); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_DEFAULT);
        }
    }
    
    #ifdef Py_TPFLAGS_HAVE_FINALIZE
    
    #endif
    static if(!is(typeof(Py_TPFLAGS_HAVE_FINALIZE))) {
        private enum enumMixinStr_Py_TPFLAGS_HAVE_FINALIZE = `enum Py_TPFLAGS_HAVE_FINALIZE = ( 1UL << 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TPFLAGS_HAVE_FINALIZE); }))) {
            mixin(enumMixinStr_Py_TPFLAGS_HAVE_FINALIZE);
        }
    }
    
    #define PyType_FastSubclass( t , f ) PyType_HasFeature ( t , f )

    

    

    

    

    

    

    


    static if(!is(typeof(PDP_ENDIAN))) {
        private enum enumMixinStr_PDP_ENDIAN = `enum PDP_ENDIAN = __DARWIN_PDP_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_PDP_ENDIAN); }))) {
            mixin(enumMixinStr_PDP_ENDIAN);
        }
    }
    
    #ifdef BIG_ENDIAN
    
    #endif
    static if(!is(typeof(BIG_ENDIAN))) {
        private enum enumMixinStr_BIG_ENDIAN = `enum BIG_ENDIAN = __DARWIN_BIG_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_BIG_ENDIAN); }))) {
            mixin(enumMixinStr_BIG_ENDIAN);
        }
    }
    
    #ifdef LITTLE_ENDIAN
    
    #endif
    static if(!is(typeof(LITTLE_ENDIAN))) {
        private enum enumMixinStr_LITTLE_ENDIAN = `enum LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr_LITTLE_ENDIAN);
        }
    }
    
    #ifdef __DARWIN_BYTE_ORDER
    
    #endif
    static if(!is(typeof(__DARWIN_BYTE_ORDER))) {
        private enum enumMixinStr___DARWIN_BYTE_ORDER = `enum __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_BYTE_ORDER); }))) {
            mixin(enumMixinStr___DARWIN_BYTE_ORDER);
        }
    }
    
    #ifdef __DARWIN_PDP_ENDIAN
    
    #endif
    static if(!is(typeof(__DARWIN_PDP_ENDIAN))) {
        private enum enumMixinStr___DARWIN_PDP_ENDIAN = `enum __DARWIN_PDP_ENDIAN = 3412;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_PDP_ENDIAN); }))) {
            mixin(enumMixinStr___DARWIN_PDP_ENDIAN);
        }
    }
    
    #ifdef __DARWIN_BIG_ENDIAN
    
    #endif
    static if(!is(typeof(__DARWIN_BIG_ENDIAN))) {
        private enum enumMixinStr___DARWIN_BIG_ENDIAN = `enum __DARWIN_BIG_ENDIAN = 4321;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_BIG_ENDIAN); }))) {
            mixin(enumMixinStr___DARWIN_BIG_ENDIAN);
        }
    }
    
    #ifdef __DARWIN_LITTLE_ENDIAN
    
    #endif
    static if(!is(typeof(__DARWIN_LITTLE_ENDIAN))) {
        private enum enumMixinStr___DARWIN_LITTLE_ENDIAN = `enum __DARWIN_LITTLE_ENDIAN = 1234;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr___DARWIN_LITTLE_ENDIAN);
        }
    }
    
    #ifdef _QUAD_LOWWORD
    
    #endif
    static if(!is(typeof(_QUAD_LOWWORD))) {
        private enum enumMixinStr__QUAD_LOWWORD = `enum _QUAD_LOWWORD = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__QUAD_LOWWORD); }))) {
            mixin(enumMixinStr__QUAD_LOWWORD);
        }
    }
    
    #ifdef _QUAD_HIGHWORD
    
    #endif
    static if(!is(typeof(_QUAD_HIGHWORD))) {
        private enum enumMixinStr__QUAD_HIGHWORD = `enum _QUAD_HIGHWORD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__QUAD_HIGHWORD); }))) {
            mixin(enumMixinStr__QUAD_HIGHWORD);
        }
    }
    
    #define _I386__ENDIAN_H_ 

    

    


    static if(!is(typeof(_STRUCT_MCONTEXT))) {
        private enum enumMixinStr__STRUCT_MCONTEXT = `enum _STRUCT_MCONTEXT = _STRUCT_MCONTEXT64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT);
        }
    }
    
    #define Py_INCREF( op ) _Py_INCREF ( _PyObject_CAST ( op ) )

    

    


    static if(!is(typeof(_STRUCT_MCONTEXT_AVX512_64_FULL))) {
        private enum enumMixinStr__STRUCT_MCONTEXT_AVX512_64_FULL = `enum _STRUCT_MCONTEXT_AVX512_64_FULL = __darwin_mcontext_avx512_64_full;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT_AVX512_64_FULL); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT_AVX512_64_FULL);
        }
    }
    
    #define Py_DECREF( op ) _Py_DECREF ( "source/python/raw.d.tmp" , 21018 , _PyObject_CAST ( op ) )

    

    


    static if(!is(typeof(_STRUCT_MCONTEXT_AVX512_64))) {
        private enum enumMixinStr__STRUCT_MCONTEXT_AVX512_64 = `enum _STRUCT_MCONTEXT_AVX512_64 = __darwin_mcontext_avx512_64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT_AVX512_64); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT_AVX512_64);
        }
    }
    
    #ifdef _STRUCT_MCONTEXT_AVX64_FULL
    
    #endif
    static if(!is(typeof(_STRUCT_MCONTEXT_AVX64_FULL))) {
        private enum enumMixinStr__STRUCT_MCONTEXT_AVX64_FULL = `enum _STRUCT_MCONTEXT_AVX64_FULL = __darwin_mcontext_avx64_full;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT_AVX64_FULL); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT_AVX64_FULL);
        }
    }
    
    #ifdef _STRUCT_MCONTEXT_AVX64
    
    #endif
    static if(!is(typeof(_STRUCT_MCONTEXT_AVX64))) {
        private enum enumMixinStr__STRUCT_MCONTEXT_AVX64 = `enum _STRUCT_MCONTEXT_AVX64 = __darwin_mcontext_avx64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT_AVX64); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT_AVX64);
        }
    }
    
    #define Py_XINCREF( op ) _Py_XINCREF ( _PyObject_CAST ( op ) )

    


    static if(!is(typeof(_STRUCT_MCONTEXT64_FULL))) {
        private enum enumMixinStr__STRUCT_MCONTEXT64_FULL = `enum _STRUCT_MCONTEXT64_FULL = __darwin_mcontext64_full;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT64_FULL); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT64_FULL);
        }
    }
    
    #ifdef _STRUCT_MCONTEXT64
    
    #endif
    static if(!is(typeof(_STRUCT_MCONTEXT64))) {
        private enum enumMixinStr__STRUCT_MCONTEXT64 = `enum _STRUCT_MCONTEXT64 = __darwin_mcontext64;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT64); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT64);
        }
    }
    
    #ifdef _STRUCT_MCONTEXT_AVX512_32
    
    #endif
    static if(!is(typeof(_STRUCT_MCONTEXT_AVX512_32))) {
        private enum enumMixinStr__STRUCT_MCONTEXT_AVX512_32 = `enum _STRUCT_MCONTEXT_AVX512_32 = __darwin_mcontext_avx512_32;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT_AVX512_32); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT_AVX512_32);
        }
    }
    
    #define Py_XDECREF( op ) _Py_XDECREF ( _PyObject_CAST ( op ) )

    


    static if(!is(typeof(_STRUCT_MCONTEXT_AVX32))) {
        private enum enumMixinStr__STRUCT_MCONTEXT_AVX32 = `enum _STRUCT_MCONTEXT_AVX32 = __darwin_mcontext_avx32;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT_AVX32); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT_AVX32);
        }
    }
    
    #ifdef _STRUCT_MCONTEXT32
    
    #endif
    static if(!is(typeof(_STRUCT_MCONTEXT32))) {
        private enum enumMixinStr__STRUCT_MCONTEXT32 = `enum _STRUCT_MCONTEXT32 = __darwin_mcontext32;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_MCONTEXT32); }))) {
            mixin(enumMixinStr__STRUCT_MCONTEXT32);
        }
    }
    
    #define __I386_MCONTEXT_H_ 

    


    static if(!is(typeof(__DARWIN_CLK_TCK))) {
        private enum enumMixinStr___DARWIN_CLK_TCK = `enum __DARWIN_CLK_TCK = 100;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_CLK_TCK); }))) {
            mixin(enumMixinStr___DARWIN_CLK_TCK);
        }
    }
    
    #define _I386__LIMITS_H_ 

    

    


    static if(!is(typeof(Py_None))) {
        private enum enumMixinStr_Py_None = `enum Py_None = ( & _Py_NoneStruct );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_None); }))) {
            mixin(enumMixinStr_Py_None);
        }
    }
    
    #ifdef Py_RETURN_NONE
    
    #endif
    static if(!is(typeof(Py_RETURN_NONE))) {
        private enum enumMixinStr_Py_RETURN_NONE = `enum Py_RETURN_NONE = return Py_INCREF ( ( & _Py_NoneStruct ) ) , ( & _Py_NoneStruct );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_RETURN_NONE); }))) {
            mixin(enumMixinStr_Py_RETURN_NONE);
        }
    }
    
    #define _CTYPE_H_ 

    


    static if(!is(typeof(static_assert))) {
        private enum enumMixinStr_static_assert = `enum static_assert = _Static_assert;`;
        static if(is(typeof({ mixin(enumMixinStr_static_assert); }))) {
            mixin(enumMixinStr_static_assert);
        }
    }
    
    #ifdef Py_NotImplemented
    
    #endif
    static if(!is(typeof(Py_NotImplemented))) {
        private enum enumMixinStr_Py_NotImplemented = `enum Py_NotImplemented = ( & _Py_NotImplementedStruct );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_NotImplemented); }))) {
            mixin(enumMixinStr_Py_NotImplemented);
        }
    }
    
    #ifdef Py_RETURN_NOTIMPLEMENTED
    
    #endif
    static if(!is(typeof(Py_RETURN_NOTIMPLEMENTED))) {
        private enum enumMixinStr_Py_RETURN_NOTIMPLEMENTED = `enum Py_RETURN_NOTIMPLEMENTED = return Py_INCREF ( ( & _Py_NotImplementedStruct ) ) , ( & _Py_NotImplementedStruct );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_RETURN_NOTIMPLEMENTED); }))) {
            mixin(enumMixinStr_Py_RETURN_NOTIMPLEMENTED);
        }
    }
    
    #ifdef Py_LT
    
    #endif
    static if(!is(typeof(Py_LT))) {
        private enum enumMixinStr_Py_LT = `enum Py_LT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_LT); }))) {
            mixin(enumMixinStr_Py_LT);
        }
    }
    
    #ifdef Py_LE
    
    #endif
    static if(!is(typeof(Py_LE))) {
        private enum enumMixinStr_Py_LE = `enum Py_LE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_LE); }))) {
            mixin(enumMixinStr_Py_LE);
        }
    }
    
    #ifdef Py_EQ
    
    #endif
    static if(!is(typeof(Py_EQ))) {
        private enum enumMixinStr_Py_EQ = `enum Py_EQ = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_EQ); }))) {
            mixin(enumMixinStr_Py_EQ);
        }
    }
    
    #ifdef Py_NE
    
    #endif
    static if(!is(typeof(Py_NE))) {
        private enum enumMixinStr_Py_NE = `enum Py_NE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_NE); }))) {
            mixin(enumMixinStr_Py_NE);
        }
    }
    
    #ifdef Py_GT
    
    #endif
    static if(!is(typeof(Py_GT))) {
        private enum enumMixinStr_Py_GT = `enum Py_GT = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_GT); }))) {
            mixin(enumMixinStr_Py_GT);
        }
    }
    
    #ifdef Py_GE
    
    #endif
    static if(!is(typeof(Py_GE))) {
        private enum enumMixinStr_Py_GE = `enum Py_GE = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_GE); }))) {
            mixin(enumMixinStr_Py_GE);
        }
    }
    
    #define Py_RETURN_RICHCOMPARE( val1 , val2 , op ) do { switch ( op ) { case 2 : if ( ( val1 ) == ( val2 ) ) return Py_INCREF ( ( cast( PyObject * ) & _Py_TrueStruct ) ) , ( cast( PyObject * ) & _Py_TrueStruct ) ; return Py_INCREF ( ( cast( PyObject * ) & _Py_FalseStruct ) ) , ( cast( PyObject * ) & _Py_FalseStruct ) ; case 3 : if ( ( val1 ) != ( val2 ) ) return Py_INCREF ( ( cast( PyObject * ) & _Py_TrueStruct ) ) , ( cast( PyObject * ) & _Py_TrueStruct ) ; return Py_INCREF ( ( cast( PyObject * ) & _Py_FalseStruct ) ) , ( cast( PyObject * ) & _Py_FalseStruct ) ; case 0 : if ( ( val1 ) < ( val2 ) ) return Py_INCREF ( ( cast( PyObject * ) & _Py_TrueStruct ) ) , ( cast( PyObject * ) & _Py_TrueStruct ) ; return Py_INCREF ( ( cast( PyObject * ) & _Py_FalseStruct ) ) , ( cast( PyObject * ) & _Py_FalseStruct ) ; case 4 : if ( ( val1 ) > ( val2 ) ) return Py_INCREF ( ( cast( PyObject * ) & _Py_TrueStruct ) ) , ( cast( PyObject * ) & _Py_TrueStruct ) ; return Py_INCREF ( ( cast( PyObject * ) & _Py_FalseStruct ) ) , ( cast( PyObject * ) & _Py_FalseStruct ) ; case 1 : if ( ( val1 ) <= ( val2 ) ) return Py_INCREF ( ( cast( PyObject * ) & _Py_TrueStruct ) ) , ( cast( PyObject * ) & _Py_TrueStruct ) ; return Py_INCREF ( ( cast( PyObject * ) & _Py_FalseStruct ) ) , ( cast( PyObject * ) & _Py_FalseStruct ) ; case 5 : if ( ( val1 ) >= ( val2 ) ) return Py_INCREF ( ( cast( PyObject * ) & _Py_TrueStruct ) ) , ( cast( PyObject * ) & _Py_TrueStruct ) ; return Py_INCREF ( ( cast( PyObject * ) & _Py_FalseStruct ) ) , ( cast( PyObject * ) & _Py_FalseStruct ) ; default : Py_UNREACHABLE ( ) ; } } while ( 0 )

    

    

    

    

    


    static if(!is(typeof(PyTrash_UNWIND_LEVEL))) {
        private enum enumMixinStr_PyTrash_UNWIND_LEVEL = `enum PyTrash_UNWIND_LEVEL = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_PyTrash_UNWIND_LEVEL); }))) {
            mixin(enumMixinStr_PyTrash_UNWIND_LEVEL);
        }
    }
    
    #define Py_TRASHCAN_BEGIN_CONDITION( op , cond ) do { PyThreadState * _tstate = null ; 
 if ( cond ) { _tstate = PyThreadState_GET ( ) ; if ( _tstate . trash_delete_nesting >= 50 ) { 
 _PyTrash_thread_deposit_object ( _PyObject_CAST ( op ) ) ; break ; } ++ _tstate . trash_delete_nesting ; }

    


    static if(!is(typeof(Py_TRASHCAN_END))) {
        private enum enumMixinStr_Py_TRASHCAN_END = `enum Py_TRASHCAN_END = if ( _tstate ) { -- _tstate . trash_delete_nesting ; if ( _tstate . trash_delete_later && _tstate . trash_delete_nesting <= 0 ) _PyTrash_thread_destroy_chain ( ) ; } } while ( 0 ) ;;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_TRASHCAN_END); }))) {
            mixin(enumMixinStr_Py_TRASHCAN_END);
        }
    }
    
    #define Py_TRASHCAN_BEGIN( op , dealloc ) Py_TRASHCAN_BEGIN_CONDITION ( op , Py_TYPE ( op ) . tp_dealloc == ( destructor ) ( dealloc ) )

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(PyObject_MALLOC))) {
        private enum enumMixinStr_PyObject_MALLOC = `enum PyObject_MALLOC = PyObject_Malloc;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_MALLOC); }))) {
            mixin(enumMixinStr_PyObject_MALLOC);
        }
    }
    
    #ifdef PyObject_REALLOC
    
    #endif
    static if(!is(typeof(PyObject_REALLOC))) {
        private enum enumMixinStr_PyObject_REALLOC = `enum PyObject_REALLOC = PyObject_Realloc;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_REALLOC); }))) {
            mixin(enumMixinStr_PyObject_REALLOC);
        }
    }
    
    #ifdef PyObject_FREE
    
    #endif
    static if(!is(typeof(PyObject_FREE))) {
        private enum enumMixinStr_PyObject_FREE = `enum PyObject_FREE = PyObject_Free;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_FREE); }))) {
            mixin(enumMixinStr_PyObject_FREE);
        }
    }
    
    #ifdef PyObject_Del
    
    #endif
    static if(!is(typeof(PyObject_Del))) {
        private enum enumMixinStr_PyObject_Del = `enum PyObject_Del = PyObject_Free;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_Del); }))) {
            mixin(enumMixinStr_PyObject_Del);
        }
    }
    
    #ifdef PyObject_DEL
    
    #endif
    static if(!is(typeof(PyObject_DEL))) {
        private enum enumMixinStr_PyObject_DEL = `enum PyObject_DEL = PyObject_Free;`;
        static if(is(typeof({ mixin(enumMixinStr_PyObject_DEL); }))) {
            mixin(enumMixinStr_PyObject_DEL);
        }
    }
    
    #define _INTMAX_T 

    


    static if(!is(typeof(_FORTIFY_SOURCE))) {
        private enum enumMixinStr__FORTIFY_SOURCE = `enum _FORTIFY_SOURCE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__FORTIFY_SOURCE); }))) {
            mixin(enumMixinStr__FORTIFY_SOURCE);
        }
    }
    
    #ifdef __DARWIN_WEOF
    
    #endif
    static if(!is(typeof(__DARWIN_WEOF))) {
        private enum enumMixinStr___DARWIN_WEOF = `enum __DARWIN_WEOF = ( cast( __darwin_wint_t ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_WEOF); }))) {
            mixin(enumMixinStr___DARWIN_WEOF);
        }
    }
    
    #ifdef __DARWIN_WCHAR_MIN
    
    #endif
    static if(!is(typeof(__DARWIN_WCHAR_MIN))) {
        private enum enumMixinStr___DARWIN_WCHAR_MIN = `enum __DARWIN_WCHAR_MIN = ( - 0x7fffffff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_WCHAR_MIN); }))) {
            mixin(enumMixinStr___DARWIN_WCHAR_MIN);
        }
    }
    
    #ifdef __DARWIN_WCHAR_MAX
    
    #endif
    static if(!is(typeof(__DARWIN_WCHAR_MAX))) {
        private enum enumMixinStr___DARWIN_WCHAR_MAX = `enum __DARWIN_WCHAR_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_WCHAR_MAX); }))) {
            mixin(enumMixinStr___DARWIN_WCHAR_MAX);
        }
    }
    
    #define __strftimelike( fmtarg ) __attribute__ ( ( __format__ ( __strftime__ , fmtarg , 0 ) ) )

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__DARWIN_CTYPE_TOP_inline))) {
        private enum enumMixinStr___DARWIN_CTYPE_TOP_inline = `enum __DARWIN_CTYPE_TOP_inline = inline;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_CTYPE_TOP_inline); }))) {
            mixin(enumMixinStr___DARWIN_CTYPE_TOP_inline);
        }
    }
    
    #ifdef __DARWIN_CTYPE_inline
    
    #endif
    static if(!is(typeof(__DARWIN_CTYPE_inline))) {
        private enum enumMixinStr___DARWIN_CTYPE_inline = `enum __DARWIN_CTYPE_inline = inline;`;
        static if(is(typeof({ mixin(enumMixinStr___DARWIN_CTYPE_inline); }))) {
            mixin(enumMixinStr___DARWIN_CTYPE_inline);
        }
    }
    
    #define PyObject_INIT( op , typeobj ) _PyObject_INIT ( _PyObject_CAST ( op ) , ( typeobj ) )

    


    static if(!is(typeof(_CTYPE_SWS))) {
        private enum enumMixinStr__CTYPE_SWS = `enum _CTYPE_SWS = 30;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_SWS); }))) {
            mixin(enumMixinStr__CTYPE_SWS);
        }
    }
    
    #ifdef _CTYPE_SWM
    
    #endif
    static if(!is(typeof(_CTYPE_SWM))) {
        private enum enumMixinStr__CTYPE_SWM = `enum _CTYPE_SWM = 0xe0000000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_SWM); }))) {
            mixin(enumMixinStr__CTYPE_SWM);
        }
    }
    
    #ifdef _CTYPE_SW3
    
    #endif
    static if(!is(typeof(_CTYPE_SW3))) {
        private enum enumMixinStr__CTYPE_SW3 = `enum _CTYPE_SW3 = 0xc0000000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_SW3); }))) {
            mixin(enumMixinStr__CTYPE_SW3);
        }
    }
    
    #ifdef _CTYPE_SW2
    
    #endif
    static if(!is(typeof(_CTYPE_SW2))) {
        private enum enumMixinStr__CTYPE_SW2 = `enum _CTYPE_SW2 = 0x80000000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_SW2); }))) {
            mixin(enumMixinStr__CTYPE_SW2);
        }
    }
    
    #ifdef _CTYPE_SW1
    
    #endif
    static if(!is(typeof(_CTYPE_SW1))) {
        private enum enumMixinStr__CTYPE_SW1 = `enum _CTYPE_SW1 = 0x40000000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_SW1); }))) {
            mixin(enumMixinStr__CTYPE_SW1);
        }
    }
    
    #define PyObject_INIT_VAR( op , typeobj , size ) _PyObject_INIT_VAR ( _PyVarObject_CAST ( op ) , ( typeobj ) , ( size ) )

    

    


    static if(!is(typeof(_CTYPE_SW0))) {
        private enum enumMixinStr__CTYPE_SW0 = `enum _CTYPE_SW0 = 0x20000000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_SW0); }))) {
            mixin(enumMixinStr__CTYPE_SW0);
        }
    }
    
    #ifdef _CTYPE_Q
    
    #endif
    static if(!is(typeof(_CTYPE_Q))) {
        private enum enumMixinStr__CTYPE_Q = `enum _CTYPE_Q = 0x00200000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_Q); }))) {
            mixin(enumMixinStr__CTYPE_Q);
        }
    }
    
    #define _PyObject_VAR_SIZE( typeobj , nitems ) _Py_SIZE_ROUND_UP ( ( typeobj ) . tp_basicsize + ( nitems ) * ( typeobj ) . tp_itemsize , SIZEOF_VOID_P )

    


    


    


    static if(!is(typeof(_CTYPE_T))) {
        private enum enumMixinStr__CTYPE_T = `enum _CTYPE_T = 0x00100000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_T); }))) {
            mixin(enumMixinStr__CTYPE_T);
        }
    }
    
    #ifdef _CTYPE_I
    
    #endif
    static if(!is(typeof(_CTYPE_I))) {
        private enum enumMixinStr__CTYPE_I = `enum _CTYPE_I = 0x00080000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_I); }))) {
            mixin(enumMixinStr__CTYPE_I);
        }
    }
    
    #define PyType_IS_GC( t ) PyType_HasFeature ( ( t ) , ( 1UL << 14 ) )

    


    static if(!is(typeof(_CTYPE_R))) {
        private enum enumMixinStr__CTYPE_R = `enum _CTYPE_R = 0x00040000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_R); }))) {
            mixin(enumMixinStr__CTYPE_R);
        }
    }
    
    #ifdef _CTYPE_B
    
    #endif
    static if(!is(typeof(_CTYPE_B))) {
        private enum enumMixinStr__CTYPE_B = `enum _CTYPE_B = 0x00020000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_B); }))) {
            mixin(enumMixinStr__CTYPE_B);
        }
    }
    
    #define PyObject_GC_Resize( type , op , n ) ( ( type * ) _PyObject_GC_Resize ( _PyVarObject_CAST ( op ) , ( n ) ) )

    


    static if(!is(typeof(_CTYPE_X))) {
        private enum enumMixinStr__CTYPE_X = `enum _CTYPE_X = 0x00010000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_X); }))) {
            mixin(enumMixinStr__CTYPE_X);
        }
    }
    
    #ifdef _CTYPE_U
    
    #endif
    static if(!is(typeof(_CTYPE_U))) {
        private enum enumMixinStr__CTYPE_U = `enum _CTYPE_U = 0x00008000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_U); }))) {
            mixin(enumMixinStr__CTYPE_U);
        }
    }
    
    #ifdef _CTYPE_S
    
    #endif
    static if(!is(typeof(_CTYPE_S))) {
        private enum enumMixinStr__CTYPE_S = `enum _CTYPE_S = 0x00004000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_S); }))) {
            mixin(enumMixinStr__CTYPE_S);
        }
    }
    
    #ifdef _CTYPE_P
    
    #endif
    static if(!is(typeof(_CTYPE_P))) {
        private enum enumMixinStr__CTYPE_P = `enum _CTYPE_P = 0x00002000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_P); }))) {
            mixin(enumMixinStr__CTYPE_P);
        }
    }
    
    #ifdef _CTYPE_L
    
    #endif
    static if(!is(typeof(_CTYPE_L))) {
        private enum enumMixinStr__CTYPE_L = `enum _CTYPE_L = 0x00001000L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_L); }))) {
            mixin(enumMixinStr__CTYPE_L);
        }
    }
    
    #ifdef _CTYPE_G
    
    #endif
    static if(!is(typeof(_CTYPE_G))) {
        private enum enumMixinStr__CTYPE_G = `enum _CTYPE_G = 0x00000800L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_G); }))) {
            mixin(enumMixinStr__CTYPE_G);
        }
    }
    
    #ifdef _CTYPE_D
    
    #endif
    static if(!is(typeof(_CTYPE_D))) {
        private enum enumMixinStr__CTYPE_D = `enum _CTYPE_D = 0x00000400L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_D); }))) {
            mixin(enumMixinStr__CTYPE_D);
        }
    }
    
    #ifdef _CTYPE_C
    
    #endif
    static if(!is(typeof(_CTYPE_C))) {
        private enum enumMixinStr__CTYPE_C = `enum _CTYPE_C = 0x00000200L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_C); }))) {
            mixin(enumMixinStr__CTYPE_C);
        }
    }
    
    #ifdef _CTYPE_A
    
    #endif
    static if(!is(typeof(_CTYPE_A))) {
        private enum enumMixinStr__CTYPE_A = `enum _CTYPE_A = 0x00000100L;`;
        static if(is(typeof({ mixin(enumMixinStr__CTYPE_A); }))) {
            mixin(enumMixinStr__CTYPE_A);
        }
    }
    
    #define __CTYPE_H_ 

    

    

    

    

    

    

    


    static if(!is(typeof(WEOF))) {
        private enum enumMixinStr_WEOF = `enum WEOF = ( cast( __darwin_wint_t ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_WEOF); }))) {
            mixin(enumMixinStr_WEOF);
        }
    }
    
    #define ___WCTYPE_H_ 

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(PY_RELEASE_LEVEL_ALPHA))) {
        private enum enumMixinStr_PY_RELEASE_LEVEL_ALPHA = `enum PY_RELEASE_LEVEL_ALPHA = 0xA;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_RELEASE_LEVEL_ALPHA); }))) {
            mixin(enumMixinStr_PY_RELEASE_LEVEL_ALPHA);
        }
    }
    
    #ifdef PY_RELEASE_LEVEL_BETA
    
    #endif
    static if(!is(typeof(PY_RELEASE_LEVEL_BETA))) {
        private enum enumMixinStr_PY_RELEASE_LEVEL_BETA = `enum PY_RELEASE_LEVEL_BETA = 0xB;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_RELEASE_LEVEL_BETA); }))) {
            mixin(enumMixinStr_PY_RELEASE_LEVEL_BETA);
        }
    }
    
    #ifdef PY_RELEASE_LEVEL_GAMMA
    
    #endif
    static if(!is(typeof(PY_RELEASE_LEVEL_GAMMA))) {
        private enum enumMixinStr_PY_RELEASE_LEVEL_GAMMA = `enum PY_RELEASE_LEVEL_GAMMA = 0xC;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_RELEASE_LEVEL_GAMMA); }))) {
            mixin(enumMixinStr_PY_RELEASE_LEVEL_GAMMA);
        }
    }
    
    #ifdef PY_RELEASE_LEVEL_FINAL
    
    #endif
    static if(!is(typeof(PY_RELEASE_LEVEL_FINAL))) {
        private enum enumMixinStr_PY_RELEASE_LEVEL_FINAL = `enum PY_RELEASE_LEVEL_FINAL = 0xF;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_RELEASE_LEVEL_FINAL); }))) {
            mixin(enumMixinStr_PY_RELEASE_LEVEL_FINAL);
        }
    }
    
    #ifdef PY_MAJOR_VERSION
    
    #endif
    static if(!is(typeof(PY_MAJOR_VERSION))) {
        private enum enumMixinStr_PY_MAJOR_VERSION = `enum PY_MAJOR_VERSION = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_MAJOR_VERSION); }))) {
            mixin(enumMixinStr_PY_MAJOR_VERSION);
        }
    }
    
    #ifdef PY_MINOR_VERSION
    
    #endif
    static if(!is(typeof(PY_MINOR_VERSION))) {
        private enum enumMixinStr_PY_MINOR_VERSION = `enum PY_MINOR_VERSION = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_MINOR_VERSION); }))) {
            mixin(enumMixinStr_PY_MINOR_VERSION);
        }
    }
    
    #ifdef PY_MICRO_VERSION
    
    #endif
    static if(!is(typeof(PY_MICRO_VERSION))) {
        private enum enumMixinStr_PY_MICRO_VERSION = `enum PY_MICRO_VERSION = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_MICRO_VERSION); }))) {
            mixin(enumMixinStr_PY_MICRO_VERSION);
        }
    }
    
    #ifdef PY_RELEASE_LEVEL
    
    #endif
    static if(!is(typeof(PY_RELEASE_LEVEL))) {
        private enum enumMixinStr_PY_RELEASE_LEVEL = `enum PY_RELEASE_LEVEL = 0xF;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_RELEASE_LEVEL); }))) {
            mixin(enumMixinStr_PY_RELEASE_LEVEL);
        }
    }
    
    #ifdef PY_RELEASE_SERIAL
    
    #endif
    static if(!is(typeof(PY_RELEASE_SERIAL))) {
        private enum enumMixinStr_PY_RELEASE_SERIAL = `enum PY_RELEASE_SERIAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_RELEASE_SERIAL); }))) {
            mixin(enumMixinStr_PY_RELEASE_SERIAL);
        }
    }
    
    #ifdef PY_VERSION
    
    #endif
    static if(!is(typeof(PY_VERSION))) {
        private enum enumMixinStr_PY_VERSION = `enum PY_VERSION = "3.8.0";`;
        static if(is(typeof({ mixin(enumMixinStr_PY_VERSION); }))) {
            mixin(enumMixinStr_PY_VERSION);
        }
    }
    
    #ifdef PY_VERSION_HEX
    
    #endif
    static if(!is(typeof(PY_VERSION_HEX))) {
        private enum enumMixinStr_PY_VERSION_HEX = `enum PY_VERSION_HEX = ( ( 3 << 24 ) | ( 8 << 16 ) | ( 0 << 8 ) | ( 0xF << 4 ) | ( 0 << 0 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_VERSION_HEX); }))) {
            mixin(enumMixinStr_PY_VERSION_HEX);
        }
    }
    
    #define Py_PICKLEBUFOBJECT_H 

    

    

    

    


    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_driverkit))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_driverkit = `enum __API_UNAVAILABLE_PLATFORM_driverkit = driverkit , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_driverkit); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_driverkit);
        }
    }
    
    #define __API_UNAVAILABLE_PLATFORM_uikitformac( x ) uikitformac , unavailable

    


    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_macCatalyst))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_macCatalyst = `enum __API_UNAVAILABLE_PLATFORM_macCatalyst = macCatalyst , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_macCatalyst); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_macCatalyst);
        }
    }
    
    #ifdef __API_UNAVAILABLE_PLATFORM_tvos
    
    #endif
    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_tvos))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_tvos = `enum __API_UNAVAILABLE_PLATFORM_tvos = tvos , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_tvos); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_tvos);
        }
    }
    
    #ifdef __API_UNAVAILABLE_PLATFORM_watchos
    
    #endif
    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_watchos))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_watchos = `enum __API_UNAVAILABLE_PLATFORM_watchos = watchos , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_watchos); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_watchos);
        }
    }
    
    #define Py_PYARENA_H 

    


    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_ios))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_ios = `enum __API_UNAVAILABLE_PLATFORM_ios = ios , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_ios); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_ios);
        }
    }
    
    #ifdef __API_UNAVAILABLE_PLATFORM_macosx
    
    #endif
    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_macosx))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_macosx = `enum __API_UNAVAILABLE_PLATFORM_macosx = macosx , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_macosx); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_macosx);
        }
    }
    
    #ifdef __API_UNAVAILABLE_PLATFORM_macos
    
    #endif
    static if(!is(typeof(__API_UNAVAILABLE_PLATFORM_macos))) {
        private enum enumMixinStr___API_UNAVAILABLE_PLATFORM_macos = `enum __API_UNAVAILABLE_PLATFORM_macos = macos , unavailable;`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_macos); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_PLATFORM_macos);
        }
    }
    
    #define __API_DEPRECATED_BEGIN_REP_GET_MACRO( _1 , _2 , _3 , _4 , _5 , _6 , _7 , _8 , NAME , ... ) NAME

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(DOUBLE_IS_LITTLE_ENDIAN_IEEE754))) {
        private enum enumMixinStr_DOUBLE_IS_LITTLE_ENDIAN_IEEE754 = `enum DOUBLE_IS_LITTLE_ENDIAN_IEEE754 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DOUBLE_IS_LITTLE_ENDIAN_IEEE754); }))) {
            mixin(enumMixinStr_DOUBLE_IS_LITTLE_ENDIAN_IEEE754);
        }
    }
    
    #ifdef ENABLE_IPV6
    
    #endif
    static if(!is(typeof(ENABLE_IPV6))) {
        private enum enumMixinStr_ENABLE_IPV6 = `enum ENABLE_IPV6 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ENABLE_IPV6); }))) {
            mixin(enumMixinStr_ENABLE_IPV6);
        }
    }
    
    #ifdef HAVE_ACOSH
    
    #endif
    static if(!is(typeof(HAVE_ACOSH))) {
        private enum enumMixinStr_HAVE_ACOSH = `enum HAVE_ACOSH = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ACOSH); }))) {
            mixin(enumMixinStr_HAVE_ACOSH);
        }
    }
    
    #ifdef HAVE_ADDRINFO
    
    #endif
    static if(!is(typeof(HAVE_ADDRINFO))) {
        private enum enumMixinStr_HAVE_ADDRINFO = `enum HAVE_ADDRINFO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ADDRINFO); }))) {
            mixin(enumMixinStr_HAVE_ADDRINFO);
        }
    }
    
    #ifdef HAVE_ALARM
    
    #endif
    static if(!is(typeof(HAVE_ALARM))) {
        private enum enumMixinStr_HAVE_ALARM = `enum HAVE_ALARM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ALARM); }))) {
            mixin(enumMixinStr_HAVE_ALARM);
        }
    }
    
    #ifdef HAVE_ALLOCA_H
    
    #endif
    static if(!is(typeof(HAVE_ALLOCA_H))) {
        private enum enumMixinStr_HAVE_ALLOCA_H = `enum HAVE_ALLOCA_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ALLOCA_H); }))) {
            mixin(enumMixinStr_HAVE_ALLOCA_H);
        }
    }
    
    #ifdef HAVE_ASINH
    
    #endif
    static if(!is(typeof(HAVE_ASINH))) {
        private enum enumMixinStr_HAVE_ASINH = `enum HAVE_ASINH = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ASINH); }))) {
            mixin(enumMixinStr_HAVE_ASINH);
        }
    }
    
    #ifdef HAVE_ATANH
    
    #endif
    static if(!is(typeof(HAVE_ATANH))) {
        private enum enumMixinStr_HAVE_ATANH = `enum HAVE_ATANH = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ATANH); }))) {
            mixin(enumMixinStr_HAVE_ATANH);
        }
    }
    
    #ifdef HAVE_BROKEN_SEM_GETVALUE
    
    #endif
    static if(!is(typeof(HAVE_BROKEN_SEM_GETVALUE))) {
        private enum enumMixinStr_HAVE_BROKEN_SEM_GETVALUE = `enum HAVE_BROKEN_SEM_GETVALUE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_BROKEN_SEM_GETVALUE); }))) {
            mixin(enumMixinStr_HAVE_BROKEN_SEM_GETVALUE);
        }
    }
    
    #ifdef HAVE_BUILTIN_ATOMIC
    
    #endif
    static if(!is(typeof(HAVE_BUILTIN_ATOMIC))) {
        private enum enumMixinStr_HAVE_BUILTIN_ATOMIC = `enum HAVE_BUILTIN_ATOMIC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_BUILTIN_ATOMIC); }))) {
            mixin(enumMixinStr_HAVE_BUILTIN_ATOMIC);
        }
    }
    
    #ifdef HAVE_CHFLAGS
    
    #endif
    static if(!is(typeof(HAVE_CHFLAGS))) {
        private enum enumMixinStr_HAVE_CHFLAGS = `enum HAVE_CHFLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CHFLAGS); }))) {
            mixin(enumMixinStr_HAVE_CHFLAGS);
        }
    }
    
    #ifdef HAVE_CHOWN
    
    #endif
    static if(!is(typeof(HAVE_CHOWN))) {
        private enum enumMixinStr_HAVE_CHOWN = `enum HAVE_CHOWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CHOWN); }))) {
            mixin(enumMixinStr_HAVE_CHOWN);
        }
    }
    
    #ifdef HAVE_CHROOT
    
    #endif
    static if(!is(typeof(HAVE_CHROOT))) {
        private enum enumMixinStr_HAVE_CHROOT = `enum HAVE_CHROOT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CHROOT); }))) {
            mixin(enumMixinStr_HAVE_CHROOT);
        }
    }
    
    #ifdef HAVE_CLOCK
    
    #endif
    static if(!is(typeof(HAVE_CLOCK))) {
        private enum enumMixinStr_HAVE_CLOCK = `enum HAVE_CLOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CLOCK); }))) {
            mixin(enumMixinStr_HAVE_CLOCK);
        }
    }
    
    #ifdef HAVE_COMPUTED_GOTOS
    
    #endif
    static if(!is(typeof(HAVE_COMPUTED_GOTOS))) {
        private enum enumMixinStr_HAVE_COMPUTED_GOTOS = `enum HAVE_COMPUTED_GOTOS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_COMPUTED_GOTOS); }))) {
            mixin(enumMixinStr_HAVE_COMPUTED_GOTOS);
        }
    }
    
    #ifdef HAVE_CONFSTR
    
    #endif
    static if(!is(typeof(HAVE_CONFSTR))) {
        private enum enumMixinStr_HAVE_CONFSTR = `enum HAVE_CONFSTR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CONFSTR); }))) {
            mixin(enumMixinStr_HAVE_CONFSTR);
        }
    }
    
    #ifdef HAVE_COPYSIGN
    
    #endif
    static if(!is(typeof(HAVE_COPYSIGN))) {
        private enum enumMixinStr_HAVE_COPYSIGN = `enum HAVE_COPYSIGN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_COPYSIGN); }))) {
            mixin(enumMixinStr_HAVE_COPYSIGN);
        }
    }
    
    #ifdef HAVE_CTERMID
    
    #endif
    static if(!is(typeof(HAVE_CTERMID))) {
        private enum enumMixinStr_HAVE_CTERMID = `enum HAVE_CTERMID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CTERMID); }))) {
            mixin(enumMixinStr_HAVE_CTERMID);
        }
    }
    
    #ifdef HAVE_CTERMID_R
    
    #endif
    static if(!is(typeof(HAVE_CTERMID_R))) {
        private enum enumMixinStr_HAVE_CTERMID_R = `enum HAVE_CTERMID_R = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CTERMID_R); }))) {
            mixin(enumMixinStr_HAVE_CTERMID_R);
        }
    }
    
    #ifdef HAVE_CURSES_FILTER
    
    #endif
    static if(!is(typeof(HAVE_CURSES_FILTER))) {
        private enum enumMixinStr_HAVE_CURSES_FILTER = `enum HAVE_CURSES_FILTER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_FILTER); }))) {
            mixin(enumMixinStr_HAVE_CURSES_FILTER);
        }
    }
    
    #ifdef HAVE_CURSES_H
    
    #endif
    static if(!is(typeof(HAVE_CURSES_H))) {
        private enum enumMixinStr_HAVE_CURSES_H = `enum HAVE_CURSES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_H); }))) {
            mixin(enumMixinStr_HAVE_CURSES_H);
        }
    }
    
    #ifdef HAVE_CURSES_HAS_KEY
    
    #endif
    static if(!is(typeof(HAVE_CURSES_HAS_KEY))) {
        private enum enumMixinStr_HAVE_CURSES_HAS_KEY = `enum HAVE_CURSES_HAS_KEY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_HAS_KEY); }))) {
            mixin(enumMixinStr_HAVE_CURSES_HAS_KEY);
        }
    }
    
    #ifdef HAVE_CURSES_IMMEDOK
    
    #endif
    static if(!is(typeof(HAVE_CURSES_IMMEDOK))) {
        private enum enumMixinStr_HAVE_CURSES_IMMEDOK = `enum HAVE_CURSES_IMMEDOK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_IMMEDOK); }))) {
            mixin(enumMixinStr_HAVE_CURSES_IMMEDOK);
        }
    }
    
    #ifdef HAVE_CURSES_IS_TERM_RESIZED
    
    #endif
    static if(!is(typeof(HAVE_CURSES_IS_TERM_RESIZED))) {
        private enum enumMixinStr_HAVE_CURSES_IS_TERM_RESIZED = `enum HAVE_CURSES_IS_TERM_RESIZED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_IS_TERM_RESIZED); }))) {
            mixin(enumMixinStr_HAVE_CURSES_IS_TERM_RESIZED);
        }
    }
    
    #ifdef HAVE_CURSES_RESIZETERM
    
    #endif
    static if(!is(typeof(HAVE_CURSES_RESIZETERM))) {
        private enum enumMixinStr_HAVE_CURSES_RESIZETERM = `enum HAVE_CURSES_RESIZETERM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_RESIZETERM); }))) {
            mixin(enumMixinStr_HAVE_CURSES_RESIZETERM);
        }
    }
    
    #ifdef HAVE_CURSES_RESIZE_TERM
    
    #endif
    static if(!is(typeof(HAVE_CURSES_RESIZE_TERM))) {
        private enum enumMixinStr_HAVE_CURSES_RESIZE_TERM = `enum HAVE_CURSES_RESIZE_TERM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_RESIZE_TERM); }))) {
            mixin(enumMixinStr_HAVE_CURSES_RESIZE_TERM);
        }
    }
    
    #ifdef HAVE_CURSES_SYNCOK
    
    #endif
    static if(!is(typeof(HAVE_CURSES_SYNCOK))) {
        private enum enumMixinStr_HAVE_CURSES_SYNCOK = `enum HAVE_CURSES_SYNCOK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_SYNCOK); }))) {
            mixin(enumMixinStr_HAVE_CURSES_SYNCOK);
        }
    }
    
    #ifdef HAVE_CURSES_TYPEAHEAD
    
    #endif
    static if(!is(typeof(HAVE_CURSES_TYPEAHEAD))) {
        private enum enumMixinStr_HAVE_CURSES_TYPEAHEAD = `enum HAVE_CURSES_TYPEAHEAD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_TYPEAHEAD); }))) {
            mixin(enumMixinStr_HAVE_CURSES_TYPEAHEAD);
        }
    }
    
    #ifdef HAVE_CURSES_USE_ENV
    
    #endif
    static if(!is(typeof(HAVE_CURSES_USE_ENV))) {
        private enum enumMixinStr_HAVE_CURSES_USE_ENV = `enum HAVE_CURSES_USE_ENV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_USE_ENV); }))) {
            mixin(enumMixinStr_HAVE_CURSES_USE_ENV);
        }
    }
    
    #ifdef HAVE_CURSES_WCHGAT
    
    #endif
    static if(!is(typeof(HAVE_CURSES_WCHGAT))) {
        private enum enumMixinStr_HAVE_CURSES_WCHGAT = `enum HAVE_CURSES_WCHGAT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_CURSES_WCHGAT); }))) {
            mixin(enumMixinStr_HAVE_CURSES_WCHGAT);
        }
    }
    
    #ifdef HAVE_DECL_ISFINITE
    
    #endif
    static if(!is(typeof(HAVE_DECL_ISFINITE))) {
        private enum enumMixinStr_HAVE_DECL_ISFINITE = `enum HAVE_DECL_ISFINITE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_ISFINITE); }))) {
            mixin(enumMixinStr_HAVE_DECL_ISFINITE);
        }
    }
    
    #ifdef HAVE_DECL_ISINF
    
    #endif
    static if(!is(typeof(HAVE_DECL_ISINF))) {
        private enum enumMixinStr_HAVE_DECL_ISINF = `enum HAVE_DECL_ISINF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_ISINF); }))) {
            mixin(enumMixinStr_HAVE_DECL_ISINF);
        }
    }
    
    #ifdef HAVE_DECL_ISNAN
    
    #endif
    static if(!is(typeof(HAVE_DECL_ISNAN))) {
        private enum enumMixinStr_HAVE_DECL_ISNAN = `enum HAVE_DECL_ISNAN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_ISNAN); }))) {
            mixin(enumMixinStr_HAVE_DECL_ISNAN);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_DEEPBIND
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_DEEPBIND))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_DEEPBIND = `enum HAVE_DECL_RTLD_DEEPBIND = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_DEEPBIND); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_DEEPBIND);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_GLOBAL
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_GLOBAL))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_GLOBAL = `enum HAVE_DECL_RTLD_GLOBAL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_GLOBAL); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_GLOBAL);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_LAZY
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_LAZY))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_LAZY = `enum HAVE_DECL_RTLD_LAZY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_LAZY); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_LAZY);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_LOCAL
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_LOCAL))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_LOCAL = `enum HAVE_DECL_RTLD_LOCAL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_LOCAL); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_LOCAL);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_MEMBER
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_MEMBER))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_MEMBER = `enum HAVE_DECL_RTLD_MEMBER = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_MEMBER); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_MEMBER);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_NODELETE
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_NODELETE))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_NODELETE = `enum HAVE_DECL_RTLD_NODELETE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_NODELETE); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_NODELETE);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_NOLOAD
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_NOLOAD))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_NOLOAD = `enum HAVE_DECL_RTLD_NOLOAD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_NOLOAD); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_NOLOAD);
        }
    }
    
    #ifdef HAVE_DECL_RTLD_NOW
    
    #endif
    static if(!is(typeof(HAVE_DECL_RTLD_NOW))) {
        private enum enumMixinStr_HAVE_DECL_RTLD_NOW = `enum HAVE_DECL_RTLD_NOW = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DECL_RTLD_NOW); }))) {
            mixin(enumMixinStr_HAVE_DECL_RTLD_NOW);
        }
    }
    
    #ifdef HAVE_DEVICE_MACROS
    
    #endif
    static if(!is(typeof(HAVE_DEVICE_MACROS))) {
        private enum enumMixinStr_HAVE_DEVICE_MACROS = `enum HAVE_DEVICE_MACROS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DEVICE_MACROS); }))) {
            mixin(enumMixinStr_HAVE_DEVICE_MACROS);
        }
    }
    
    #ifdef HAVE_DEV_PTMX
    
    #endif
    static if(!is(typeof(HAVE_DEV_PTMX))) {
        private enum enumMixinStr_HAVE_DEV_PTMX = `enum HAVE_DEV_PTMX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DEV_PTMX); }))) {
            mixin(enumMixinStr_HAVE_DEV_PTMX);
        }
    }
    
    #ifdef HAVE_DIRENT_D_TYPE
    
    #endif
    static if(!is(typeof(HAVE_DIRENT_D_TYPE))) {
        private enum enumMixinStr_HAVE_DIRENT_D_TYPE = `enum HAVE_DIRENT_D_TYPE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DIRENT_D_TYPE); }))) {
            mixin(enumMixinStr_HAVE_DIRENT_D_TYPE);
        }
    }
    
    #ifdef HAVE_DIRENT_H
    
    #endif
    static if(!is(typeof(HAVE_DIRENT_H))) {
        private enum enumMixinStr_HAVE_DIRENT_H = `enum HAVE_DIRENT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DIRENT_H); }))) {
            mixin(enumMixinStr_HAVE_DIRENT_H);
        }
    }
    
    #ifdef HAVE_DIRFD
    
    #endif
    static if(!is(typeof(HAVE_DIRFD))) {
        private enum enumMixinStr_HAVE_DIRFD = `enum HAVE_DIRFD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DIRFD); }))) {
            mixin(enumMixinStr_HAVE_DIRFD);
        }
    }
    
    #ifdef HAVE_DLFCN_H
    
    #endif
    static if(!is(typeof(HAVE_DLFCN_H))) {
        private enum enumMixinStr_HAVE_DLFCN_H = `enum HAVE_DLFCN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DLFCN_H); }))) {
            mixin(enumMixinStr_HAVE_DLFCN_H);
        }
    }
    
    #ifdef HAVE_DLOPEN
    
    #endif
    static if(!is(typeof(HAVE_DLOPEN))) {
        private enum enumMixinStr_HAVE_DLOPEN = `enum HAVE_DLOPEN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DLOPEN); }))) {
            mixin(enumMixinStr_HAVE_DLOPEN);
        }
    }
    
    #ifdef HAVE_DUP2
    
    #endif
    static if(!is(typeof(HAVE_DUP2))) {
        private enum enumMixinStr_HAVE_DUP2 = `enum HAVE_DUP2 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DUP2); }))) {
            mixin(enumMixinStr_HAVE_DUP2);
        }
    }
    
    #ifdef HAVE_DYNAMIC_LOADING
    
    #endif
    static if(!is(typeof(HAVE_DYNAMIC_LOADING))) {
        private enum enumMixinStr_HAVE_DYNAMIC_LOADING = `enum HAVE_DYNAMIC_LOADING = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_DYNAMIC_LOADING); }))) {
            mixin(enumMixinStr_HAVE_DYNAMIC_LOADING);
        }
    }
    
    #ifdef HAVE_ERF
    
    #endif
    static if(!is(typeof(HAVE_ERF))) {
        private enum enumMixinStr_HAVE_ERF = `enum HAVE_ERF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ERF); }))) {
            mixin(enumMixinStr_HAVE_ERF);
        }
    }
    
    #ifdef HAVE_ERFC
    
    #endif
    static if(!is(typeof(HAVE_ERFC))) {
        private enum enumMixinStr_HAVE_ERFC = `enum HAVE_ERFC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ERFC); }))) {
            mixin(enumMixinStr_HAVE_ERFC);
        }
    }
    
    #ifdef HAVE_ERRNO_H
    
    #endif
    static if(!is(typeof(HAVE_ERRNO_H))) {
        private enum enumMixinStr_HAVE_ERRNO_H = `enum HAVE_ERRNO_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ERRNO_H); }))) {
            mixin(enumMixinStr_HAVE_ERRNO_H);
        }
    }
    
    #ifdef HAVE_EXECV
    
    #endif
    static if(!is(typeof(HAVE_EXECV))) {
        private enum enumMixinStr_HAVE_EXECV = `enum HAVE_EXECV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_EXECV); }))) {
            mixin(enumMixinStr_HAVE_EXECV);
        }
    }
    
    #ifdef HAVE_EXPM1
    
    #endif
    static if(!is(typeof(HAVE_EXPM1))) {
        private enum enumMixinStr_HAVE_EXPM1 = `enum HAVE_EXPM1 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_EXPM1); }))) {
            mixin(enumMixinStr_HAVE_EXPM1);
        }
    }
    
    #ifdef HAVE_FCHDIR
    
    #endif
    static if(!is(typeof(HAVE_FCHDIR))) {
        private enum enumMixinStr_HAVE_FCHDIR = `enum HAVE_FCHDIR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FCHDIR); }))) {
            mixin(enumMixinStr_HAVE_FCHDIR);
        }
    }
    
    #ifdef HAVE_FCHMOD
    
    #endif
    static if(!is(typeof(HAVE_FCHMOD))) {
        private enum enumMixinStr_HAVE_FCHMOD = `enum HAVE_FCHMOD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FCHMOD); }))) {
            mixin(enumMixinStr_HAVE_FCHMOD);
        }
    }
    
    #ifdef HAVE_FCHOWN
    
    #endif
    static if(!is(typeof(HAVE_FCHOWN))) {
        private enum enumMixinStr_HAVE_FCHOWN = `enum HAVE_FCHOWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FCHOWN); }))) {
            mixin(enumMixinStr_HAVE_FCHOWN);
        }
    }
    
    #ifdef HAVE_FCNTL_H
    
    #endif
    static if(!is(typeof(HAVE_FCNTL_H))) {
        private enum enumMixinStr_HAVE_FCNTL_H = `enum HAVE_FCNTL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FCNTL_H); }))) {
            mixin(enumMixinStr_HAVE_FCNTL_H);
        }
    }
    
    #ifdef HAVE_FINITE
    
    #endif
    static if(!is(typeof(HAVE_FINITE))) {
        private enum enumMixinStr_HAVE_FINITE = `enum HAVE_FINITE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FINITE); }))) {
            mixin(enumMixinStr_HAVE_FINITE);
        }
    }
    
    #ifdef HAVE_FLOCK
    
    #endif
    static if(!is(typeof(HAVE_FLOCK))) {
        private enum enumMixinStr_HAVE_FLOCK = `enum HAVE_FLOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FLOCK); }))) {
            mixin(enumMixinStr_HAVE_FLOCK);
        }
    }
    
    #ifdef HAVE_FORK
    
    #endif
    static if(!is(typeof(HAVE_FORK))) {
        private enum enumMixinStr_HAVE_FORK = `enum HAVE_FORK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FORK); }))) {
            mixin(enumMixinStr_HAVE_FORK);
        }
    }
    
    #ifdef HAVE_FORKPTY
    
    #endif
    static if(!is(typeof(HAVE_FORKPTY))) {
        private enum enumMixinStr_HAVE_FORKPTY = `enum HAVE_FORKPTY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FORKPTY); }))) {
            mixin(enumMixinStr_HAVE_FORKPTY);
        }
    }
    
    #ifdef HAVE_FPATHCONF
    
    #endif
    static if(!is(typeof(HAVE_FPATHCONF))) {
        private enum enumMixinStr_HAVE_FPATHCONF = `enum HAVE_FPATHCONF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FPATHCONF); }))) {
            mixin(enumMixinStr_HAVE_FPATHCONF);
        }
    }
    
    #ifdef HAVE_FSEEKO
    
    #endif
    static if(!is(typeof(HAVE_FSEEKO))) {
        private enum enumMixinStr_HAVE_FSEEKO = `enum HAVE_FSEEKO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FSEEKO); }))) {
            mixin(enumMixinStr_HAVE_FSEEKO);
        }
    }
    
    #ifdef HAVE_FSTATVFS
    
    #endif
    static if(!is(typeof(HAVE_FSTATVFS))) {
        private enum enumMixinStr_HAVE_FSTATVFS = `enum HAVE_FSTATVFS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FSTATVFS); }))) {
            mixin(enumMixinStr_HAVE_FSTATVFS);
        }
    }
    
    #ifdef HAVE_FSYNC
    
    #endif
    static if(!is(typeof(HAVE_FSYNC))) {
        private enum enumMixinStr_HAVE_FSYNC = `enum HAVE_FSYNC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FSYNC); }))) {
            mixin(enumMixinStr_HAVE_FSYNC);
        }
    }
    
    #ifdef HAVE_FTELLO
    
    #endif
    static if(!is(typeof(HAVE_FTELLO))) {
        private enum enumMixinStr_HAVE_FTELLO = `enum HAVE_FTELLO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FTELLO); }))) {
            mixin(enumMixinStr_HAVE_FTELLO);
        }
    }
    
    #ifdef HAVE_FTIME
    
    #endif
    static if(!is(typeof(HAVE_FTIME))) {
        private enum enumMixinStr_HAVE_FTIME = `enum HAVE_FTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FTIME); }))) {
            mixin(enumMixinStr_HAVE_FTIME);
        }
    }
    
    #ifdef HAVE_FTRUNCATE
    
    #endif
    static if(!is(typeof(HAVE_FTRUNCATE))) {
        private enum enumMixinStr_HAVE_FTRUNCATE = `enum HAVE_FTRUNCATE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FTRUNCATE); }))) {
            mixin(enumMixinStr_HAVE_FTRUNCATE);
        }
    }
    
    #ifdef HAVE_FUTIMES
    
    #endif
    static if(!is(typeof(HAVE_FUTIMES))) {
        private enum enumMixinStr_HAVE_FUTIMES = `enum HAVE_FUTIMES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_FUTIMES); }))) {
            mixin(enumMixinStr_HAVE_FUTIMES);
        }
    }
    
    #ifdef HAVE_GAI_STRERROR
    
    #endif
    static if(!is(typeof(HAVE_GAI_STRERROR))) {
        private enum enumMixinStr_HAVE_GAI_STRERROR = `enum HAVE_GAI_STRERROR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GAI_STRERROR); }))) {
            mixin(enumMixinStr_HAVE_GAI_STRERROR);
        }
    }
    
    #ifdef HAVE_GAMMA
    
    #endif
    static if(!is(typeof(HAVE_GAMMA))) {
        private enum enumMixinStr_HAVE_GAMMA = `enum HAVE_GAMMA = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GAMMA); }))) {
            mixin(enumMixinStr_HAVE_GAMMA);
        }
    }
    
    #ifdef HAVE_GCC_ASM_FOR_X64
    
    #endif
    static if(!is(typeof(HAVE_GCC_ASM_FOR_X64))) {
        private enum enumMixinStr_HAVE_GCC_ASM_FOR_X64 = `enum HAVE_GCC_ASM_FOR_X64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GCC_ASM_FOR_X64); }))) {
            mixin(enumMixinStr_HAVE_GCC_ASM_FOR_X64);
        }
    }
    
    #ifdef HAVE_GCC_ASM_FOR_X87
    
    #endif
    static if(!is(typeof(HAVE_GCC_ASM_FOR_X87))) {
        private enum enumMixinStr_HAVE_GCC_ASM_FOR_X87 = `enum HAVE_GCC_ASM_FOR_X87 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GCC_ASM_FOR_X87); }))) {
            mixin(enumMixinStr_HAVE_GCC_ASM_FOR_X87);
        }
    }
    
    #ifdef HAVE_GCC_UINT128_T
    
    #endif
    static if(!is(typeof(HAVE_GCC_UINT128_T))) {
        private enum enumMixinStr_HAVE_GCC_UINT128_T = `enum HAVE_GCC_UINT128_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GCC_UINT128_T); }))) {
            mixin(enumMixinStr_HAVE_GCC_UINT128_T);
        }
    }
    
    #ifdef HAVE_GETADDRINFO
    
    #endif
    static if(!is(typeof(HAVE_GETADDRINFO))) {
        private enum enumMixinStr_HAVE_GETADDRINFO = `enum HAVE_GETADDRINFO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETADDRINFO); }))) {
            mixin(enumMixinStr_HAVE_GETADDRINFO);
        }
    }
    
    #ifdef HAVE_GETC_UNLOCKED
    
    #endif
    static if(!is(typeof(HAVE_GETC_UNLOCKED))) {
        private enum enumMixinStr_HAVE_GETC_UNLOCKED = `enum HAVE_GETC_UNLOCKED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETC_UNLOCKED); }))) {
            mixin(enumMixinStr_HAVE_GETC_UNLOCKED);
        }
    }
    
    #ifdef HAVE_GETGRGID_R
    
    #endif
    static if(!is(typeof(HAVE_GETGRGID_R))) {
        private enum enumMixinStr_HAVE_GETGRGID_R = `enum HAVE_GETGRGID_R = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETGRGID_R); }))) {
            mixin(enumMixinStr_HAVE_GETGRGID_R);
        }
    }
    
    #ifdef HAVE_GETGRNAM_R
    
    #endif
    static if(!is(typeof(HAVE_GETGRNAM_R))) {
        private enum enumMixinStr_HAVE_GETGRNAM_R = `enum HAVE_GETGRNAM_R = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETGRNAM_R); }))) {
            mixin(enumMixinStr_HAVE_GETGRNAM_R);
        }
    }
    
    #ifdef HAVE_GETGROUPLIST
    
    #endif
    static if(!is(typeof(HAVE_GETGROUPLIST))) {
        private enum enumMixinStr_HAVE_GETGROUPLIST = `enum HAVE_GETGROUPLIST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETGROUPLIST); }))) {
            mixin(enumMixinStr_HAVE_GETGROUPLIST);
        }
    }
    
    #ifdef HAVE_GETGROUPS
    
    #endif
    static if(!is(typeof(HAVE_GETGROUPS))) {
        private enum enumMixinStr_HAVE_GETGROUPS = `enum HAVE_GETGROUPS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETGROUPS); }))) {
            mixin(enumMixinStr_HAVE_GETGROUPS);
        }
    }
    
    #ifdef HAVE_GETHOSTBYNAME
    
    #endif
    static if(!is(typeof(HAVE_GETHOSTBYNAME))) {
        private enum enumMixinStr_HAVE_GETHOSTBYNAME = `enum HAVE_GETHOSTBYNAME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETHOSTBYNAME); }))) {
            mixin(enumMixinStr_HAVE_GETHOSTBYNAME);
        }
    }
    
    #ifdef HAVE_GETITIMER
    
    #endif
    static if(!is(typeof(HAVE_GETITIMER))) {
        private enum enumMixinStr_HAVE_GETITIMER = `enum HAVE_GETITIMER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETITIMER); }))) {
            mixin(enumMixinStr_HAVE_GETITIMER);
        }
    }
    
    #ifdef HAVE_GETLOADAVG
    
    #endif
    static if(!is(typeof(HAVE_GETLOADAVG))) {
        private enum enumMixinStr_HAVE_GETLOADAVG = `enum HAVE_GETLOADAVG = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETLOADAVG); }))) {
            mixin(enumMixinStr_HAVE_GETLOADAVG);
        }
    }
    
    #ifdef HAVE_GETLOGIN
    
    #endif
    static if(!is(typeof(HAVE_GETLOGIN))) {
        private enum enumMixinStr_HAVE_GETLOGIN = `enum HAVE_GETLOGIN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETLOGIN); }))) {
            mixin(enumMixinStr_HAVE_GETLOGIN);
        }
    }
    
    #ifdef HAVE_GETNAMEINFO
    
    #endif
    static if(!is(typeof(HAVE_GETNAMEINFO))) {
        private enum enumMixinStr_HAVE_GETNAMEINFO = `enum HAVE_GETNAMEINFO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETNAMEINFO); }))) {
            mixin(enumMixinStr_HAVE_GETNAMEINFO);
        }
    }
    
    #ifdef HAVE_GETPAGESIZE
    
    #endif
    static if(!is(typeof(HAVE_GETPAGESIZE))) {
        private enum enumMixinStr_HAVE_GETPAGESIZE = `enum HAVE_GETPAGESIZE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPAGESIZE); }))) {
            mixin(enumMixinStr_HAVE_GETPAGESIZE);
        }
    }
    
    #ifdef HAVE_GETPEERNAME
    
    #endif
    static if(!is(typeof(HAVE_GETPEERNAME))) {
        private enum enumMixinStr_HAVE_GETPEERNAME = `enum HAVE_GETPEERNAME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPEERNAME); }))) {
            mixin(enumMixinStr_HAVE_GETPEERNAME);
        }
    }
    
    #ifdef HAVE_GETPGID
    
    #endif
    static if(!is(typeof(HAVE_GETPGID))) {
        private enum enumMixinStr_HAVE_GETPGID = `enum HAVE_GETPGID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPGID); }))) {
            mixin(enumMixinStr_HAVE_GETPGID);
        }
    }
    
    #ifdef HAVE_GETPGRP
    
    #endif
    static if(!is(typeof(HAVE_GETPGRP))) {
        private enum enumMixinStr_HAVE_GETPGRP = `enum HAVE_GETPGRP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPGRP); }))) {
            mixin(enumMixinStr_HAVE_GETPGRP);
        }
    }
    
    #ifdef HAVE_GETPID
    
    #endif
    static if(!is(typeof(HAVE_GETPID))) {
        private enum enumMixinStr_HAVE_GETPID = `enum HAVE_GETPID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPID); }))) {
            mixin(enumMixinStr_HAVE_GETPID);
        }
    }
    
    #ifdef HAVE_GETPRIORITY
    
    #endif
    static if(!is(typeof(HAVE_GETPRIORITY))) {
        private enum enumMixinStr_HAVE_GETPRIORITY = `enum HAVE_GETPRIORITY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPRIORITY); }))) {
            mixin(enumMixinStr_HAVE_GETPRIORITY);
        }
    }
    
    #ifdef HAVE_GETPWENT
    
    #endif
    static if(!is(typeof(HAVE_GETPWENT))) {
        private enum enumMixinStr_HAVE_GETPWENT = `enum HAVE_GETPWENT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPWENT); }))) {
            mixin(enumMixinStr_HAVE_GETPWENT);
        }
    }
    
    #ifdef HAVE_GETPWNAM_R
    
    #endif
    static if(!is(typeof(HAVE_GETPWNAM_R))) {
        private enum enumMixinStr_HAVE_GETPWNAM_R = `enum HAVE_GETPWNAM_R = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPWNAM_R); }))) {
            mixin(enumMixinStr_HAVE_GETPWNAM_R);
        }
    }
    
    #ifdef HAVE_GETPWUID_R
    
    #endif
    static if(!is(typeof(HAVE_GETPWUID_R))) {
        private enum enumMixinStr_HAVE_GETPWUID_R = `enum HAVE_GETPWUID_R = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETPWUID_R); }))) {
            mixin(enumMixinStr_HAVE_GETPWUID_R);
        }
    }
    
    #ifdef HAVE_GETSID
    
    #endif
    static if(!is(typeof(HAVE_GETSID))) {
        private enum enumMixinStr_HAVE_GETSID = `enum HAVE_GETSID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETSID); }))) {
            mixin(enumMixinStr_HAVE_GETSID);
        }
    }
    
    #ifdef HAVE_GETTIMEOFDAY
    
    #endif
    static if(!is(typeof(HAVE_GETTIMEOFDAY))) {
        private enum enumMixinStr_HAVE_GETTIMEOFDAY = `enum HAVE_GETTIMEOFDAY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETTIMEOFDAY); }))) {
            mixin(enumMixinStr_HAVE_GETTIMEOFDAY);
        }
    }
    
    #ifdef HAVE_GETWD
    
    #endif
    static if(!is(typeof(HAVE_GETWD))) {
        private enum enumMixinStr_HAVE_GETWD = `enum HAVE_GETWD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GETWD); }))) {
            mixin(enumMixinStr_HAVE_GETWD);
        }
    }
    
    #ifdef HAVE_GRP_H
    
    #endif
    static if(!is(typeof(HAVE_GRP_H))) {
        private enum enumMixinStr_HAVE_GRP_H = `enum HAVE_GRP_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_GRP_H); }))) {
            mixin(enumMixinStr_HAVE_GRP_H);
        }
    }
    
    #ifdef HAVE_HSTRERROR
    
    #endif
    static if(!is(typeof(HAVE_HSTRERROR))) {
        private enum enumMixinStr_HAVE_HSTRERROR = `enum HAVE_HSTRERROR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_HSTRERROR); }))) {
            mixin(enumMixinStr_HAVE_HSTRERROR);
        }
    }
    
    #ifdef HAVE_HYPOT
    
    #endif
    static if(!is(typeof(HAVE_HYPOT))) {
        private enum enumMixinStr_HAVE_HYPOT = `enum HAVE_HYPOT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_HYPOT); }))) {
            mixin(enumMixinStr_HAVE_HYPOT);
        }
    }
    
    #ifdef HAVE_IF_NAMEINDEX
    
    #endif
    static if(!is(typeof(HAVE_IF_NAMEINDEX))) {
        private enum enumMixinStr_HAVE_IF_NAMEINDEX = `enum HAVE_IF_NAMEINDEX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_IF_NAMEINDEX); }))) {
            mixin(enumMixinStr_HAVE_IF_NAMEINDEX);
        }
    }
    
    #ifdef HAVE_INET_ATON
    
    #endif
    static if(!is(typeof(HAVE_INET_ATON))) {
        private enum enumMixinStr_HAVE_INET_ATON = `enum HAVE_INET_ATON = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_INET_ATON); }))) {
            mixin(enumMixinStr_HAVE_INET_ATON);
        }
    }
    
    #ifdef HAVE_INET_PTON
    
    #endif
    static if(!is(typeof(HAVE_INET_PTON))) {
        private enum enumMixinStr_HAVE_INET_PTON = `enum HAVE_INET_PTON = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_INET_PTON); }))) {
            mixin(enumMixinStr_HAVE_INET_PTON);
        }
    }
    
    #ifdef HAVE_INITGROUPS
    
    #endif
    static if(!is(typeof(HAVE_INITGROUPS))) {
        private enum enumMixinStr_HAVE_INITGROUPS = `enum HAVE_INITGROUPS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_INITGROUPS); }))) {
            mixin(enumMixinStr_HAVE_INITGROUPS);
        }
    }
    
    #ifdef HAVE_INTTYPES_H
    
    #endif
    static if(!is(typeof(HAVE_INTTYPES_H))) {
        private enum enumMixinStr_HAVE_INTTYPES_H = `enum HAVE_INTTYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_INTTYPES_H); }))) {
            mixin(enumMixinStr_HAVE_INTTYPES_H);
        }
    }
    
    #ifdef HAVE_KILL
    
    #endif
    static if(!is(typeof(HAVE_KILL))) {
        private enum enumMixinStr_HAVE_KILL = `enum HAVE_KILL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_KILL); }))) {
            mixin(enumMixinStr_HAVE_KILL);
        }
    }
    
    #ifdef HAVE_KILLPG
    
    #endif
    static if(!is(typeof(HAVE_KILLPG))) {
        private enum enumMixinStr_HAVE_KILLPG = `enum HAVE_KILLPG = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_KILLPG); }))) {
            mixin(enumMixinStr_HAVE_KILLPG);
        }
    }
    
    #ifdef HAVE_KQUEUE
    
    #endif
    static if(!is(typeof(HAVE_KQUEUE))) {
        private enum enumMixinStr_HAVE_KQUEUE = `enum HAVE_KQUEUE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_KQUEUE); }))) {
            mixin(enumMixinStr_HAVE_KQUEUE);
        }
    }
    
    #ifdef HAVE_LANGINFO_H
    
    #endif
    static if(!is(typeof(HAVE_LANGINFO_H))) {
        private enum enumMixinStr_HAVE_LANGINFO_H = `enum HAVE_LANGINFO_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LANGINFO_H); }))) {
            mixin(enumMixinStr_HAVE_LANGINFO_H);
        }
    }
    
    #ifdef HAVE_LCHFLAGS
    
    #endif
    static if(!is(typeof(HAVE_LCHFLAGS))) {
        private enum enumMixinStr_HAVE_LCHFLAGS = `enum HAVE_LCHFLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LCHFLAGS); }))) {
            mixin(enumMixinStr_HAVE_LCHFLAGS);
        }
    }
    
    #ifdef HAVE_LCHMOD
    
    #endif
    static if(!is(typeof(HAVE_LCHMOD))) {
        private enum enumMixinStr_HAVE_LCHMOD = `enum HAVE_LCHMOD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LCHMOD); }))) {
            mixin(enumMixinStr_HAVE_LCHMOD);
        }
    }
    
    #ifdef HAVE_LCHOWN
    
    #endif
    static if(!is(typeof(HAVE_LCHOWN))) {
        private enum enumMixinStr_HAVE_LCHOWN = `enum HAVE_LCHOWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LCHOWN); }))) {
            mixin(enumMixinStr_HAVE_LCHOWN);
        }
    }
    
    #ifdef HAVE_LGAMMA
    
    #endif
    static if(!is(typeof(HAVE_LGAMMA))) {
        private enum enumMixinStr_HAVE_LGAMMA = `enum HAVE_LGAMMA = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LGAMMA); }))) {
            mixin(enumMixinStr_HAVE_LGAMMA);
        }
    }
    
    #ifdef HAVE_LIBDL
    
    #endif
    static if(!is(typeof(HAVE_LIBDL))) {
        private enum enumMixinStr_HAVE_LIBDL = `enum HAVE_LIBDL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LIBDL); }))) {
            mixin(enumMixinStr_HAVE_LIBDL);
        }
    }
    
    #ifdef HAVE_LIBREADLINE
    
    #endif
    static if(!is(typeof(HAVE_LIBREADLINE))) {
        private enum enumMixinStr_HAVE_LIBREADLINE = `enum HAVE_LIBREADLINE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LIBREADLINE); }))) {
            mixin(enumMixinStr_HAVE_LIBREADLINE);
        }
    }
    
    #ifdef HAVE_LINK
    
    #endif
    static if(!is(typeof(HAVE_LINK))) {
        private enum enumMixinStr_HAVE_LINK = `enum HAVE_LINK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LINK); }))) {
            mixin(enumMixinStr_HAVE_LINK);
        }
    }
    
    #ifdef HAVE_LOCKF
    
    #endif
    static if(!is(typeof(HAVE_LOCKF))) {
        private enum enumMixinStr_HAVE_LOCKF = `enum HAVE_LOCKF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LOCKF); }))) {
            mixin(enumMixinStr_HAVE_LOCKF);
        }
    }
    
    #ifdef HAVE_LOG1P
    
    #endif
    static if(!is(typeof(HAVE_LOG1P))) {
        private enum enumMixinStr_HAVE_LOG1P = `enum HAVE_LOG1P = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LOG1P); }))) {
            mixin(enumMixinStr_HAVE_LOG1P);
        }
    }
    
    #ifdef HAVE_LOG2
    
    #endif
    static if(!is(typeof(HAVE_LOG2))) {
        private enum enumMixinStr_HAVE_LOG2 = `enum HAVE_LOG2 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LOG2); }))) {
            mixin(enumMixinStr_HAVE_LOG2);
        }
    }
    
    #ifdef HAVE_LONG_DOUBLE
    
    #endif
    static if(!is(typeof(HAVE_LONG_DOUBLE))) {
        private enum enumMixinStr_HAVE_LONG_DOUBLE = `enum HAVE_LONG_DOUBLE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LONG_DOUBLE); }))) {
            mixin(enumMixinStr_HAVE_LONG_DOUBLE);
        }
    }
    
    #ifdef HAVE_LSTAT
    
    #endif
    static if(!is(typeof(HAVE_LSTAT))) {
        private enum enumMixinStr_HAVE_LSTAT = `enum HAVE_LSTAT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LSTAT); }))) {
            mixin(enumMixinStr_HAVE_LSTAT);
        }
    }
    
    #ifdef HAVE_LUTIMES
    
    #endif
    static if(!is(typeof(HAVE_LUTIMES))) {
        private enum enumMixinStr_HAVE_LUTIMES = `enum HAVE_LUTIMES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LUTIMES); }))) {
            mixin(enumMixinStr_HAVE_LUTIMES);
        }
    }
    
    #ifdef HAVE_MADVISE
    
    #endif
    static if(!is(typeof(HAVE_MADVISE))) {
        private enum enumMixinStr_HAVE_MADVISE = `enum HAVE_MADVISE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MADVISE); }))) {
            mixin(enumMixinStr_HAVE_MADVISE);
        }
    }
    
    #ifdef HAVE_MAKEDEV
    
    #endif
    static if(!is(typeof(HAVE_MAKEDEV))) {
        private enum enumMixinStr_HAVE_MAKEDEV = `enum HAVE_MAKEDEV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MAKEDEV); }))) {
            mixin(enumMixinStr_HAVE_MAKEDEV);
        }
    }
    
    #ifdef HAVE_MBRTOWC
    
    #endif
    static if(!is(typeof(HAVE_MBRTOWC))) {
        private enum enumMixinStr_HAVE_MBRTOWC = `enum HAVE_MBRTOWC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MBRTOWC); }))) {
            mixin(enumMixinStr_HAVE_MBRTOWC);
        }
    }
    
    #ifdef HAVE_MEMORY_H
    
    #endif
    static if(!is(typeof(HAVE_MEMORY_H))) {
        private enum enumMixinStr_HAVE_MEMORY_H = `enum HAVE_MEMORY_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MEMORY_H); }))) {
            mixin(enumMixinStr_HAVE_MEMORY_H);
        }
    }
    
    #ifdef HAVE_MKFIFO
    
    #endif
    static if(!is(typeof(HAVE_MKFIFO))) {
        private enum enumMixinStr_HAVE_MKFIFO = `enum HAVE_MKFIFO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MKFIFO); }))) {
            mixin(enumMixinStr_HAVE_MKFIFO);
        }
    }
    
    #ifdef HAVE_MKNOD
    
    #endif
    static if(!is(typeof(HAVE_MKNOD))) {
        private enum enumMixinStr_HAVE_MKNOD = `enum HAVE_MKNOD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MKNOD); }))) {
            mixin(enumMixinStr_HAVE_MKNOD);
        }
    }
    
    #ifdef HAVE_MKTIME
    
    #endif
    static if(!is(typeof(HAVE_MKTIME))) {
        private enum enumMixinStr_HAVE_MKTIME = `enum HAVE_MKTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MKTIME); }))) {
            mixin(enumMixinStr_HAVE_MKTIME);
        }
    }
    
    #ifdef HAVE_MMAP
    
    #endif
    static if(!is(typeof(HAVE_MMAP))) {
        private enum enumMixinStr_HAVE_MMAP = `enum HAVE_MMAP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_MMAP); }))) {
            mixin(enumMixinStr_HAVE_MMAP);
        }
    }
    
    #ifdef HAVE_NCURSES_H
    
    #endif
    static if(!is(typeof(HAVE_NCURSES_H))) {
        private enum enumMixinStr_HAVE_NCURSES_H = `enum HAVE_NCURSES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_NCURSES_H); }))) {
            mixin(enumMixinStr_HAVE_NCURSES_H);
        }
    }
    
    #ifdef HAVE_NET_IF_H
    
    #endif
    static if(!is(typeof(HAVE_NET_IF_H))) {
        private enum enumMixinStr_HAVE_NET_IF_H = `enum HAVE_NET_IF_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_NET_IF_H); }))) {
            mixin(enumMixinStr_HAVE_NET_IF_H);
        }
    }
    
    #ifdef HAVE_NICE
    
    #endif
    static if(!is(typeof(HAVE_NICE))) {
        private enum enumMixinStr_HAVE_NICE = `enum HAVE_NICE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_NICE); }))) {
            mixin(enumMixinStr_HAVE_NICE);
        }
    }
    
    #ifdef HAVE_OPENPTY
    
    #endif
    static if(!is(typeof(HAVE_OPENPTY))) {
        private enum enumMixinStr_HAVE_OPENPTY = `enum HAVE_OPENPTY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_OPENPTY); }))) {
            mixin(enumMixinStr_HAVE_OPENPTY);
        }
    }
    
    #ifdef HAVE_PATHCONF
    
    #endif
    static if(!is(typeof(HAVE_PATHCONF))) {
        private enum enumMixinStr_HAVE_PATHCONF = `enum HAVE_PATHCONF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PATHCONF); }))) {
            mixin(enumMixinStr_HAVE_PATHCONF);
        }
    }
    
    #ifdef HAVE_PAUSE
    
    #endif
    static if(!is(typeof(HAVE_PAUSE))) {
        private enum enumMixinStr_HAVE_PAUSE = `enum HAVE_PAUSE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PAUSE); }))) {
            mixin(enumMixinStr_HAVE_PAUSE);
        }
    }
    
    #ifdef HAVE_POLL
    
    #endif
    static if(!is(typeof(HAVE_POLL))) {
        private enum enumMixinStr_HAVE_POLL = `enum HAVE_POLL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_POLL); }))) {
            mixin(enumMixinStr_HAVE_POLL);
        }
    }
    
    #ifdef HAVE_POLL_H
    
    #endif
    static if(!is(typeof(HAVE_POLL_H))) {
        private enum enumMixinStr_HAVE_POLL_H = `enum HAVE_POLL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_POLL_H); }))) {
            mixin(enumMixinStr_HAVE_POLL_H);
        }
    }
    
    #ifdef HAVE_POSIX_SPAWN
    
    #endif
    static if(!is(typeof(HAVE_POSIX_SPAWN))) {
        private enum enumMixinStr_HAVE_POSIX_SPAWN = `enum HAVE_POSIX_SPAWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_POSIX_SPAWN); }))) {
            mixin(enumMixinStr_HAVE_POSIX_SPAWN);
        }
    }
    
    #ifdef HAVE_POSIX_SPAWNP
    
    #endif
    static if(!is(typeof(HAVE_POSIX_SPAWNP))) {
        private enum enumMixinStr_HAVE_POSIX_SPAWNP = `enum HAVE_POSIX_SPAWNP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_POSIX_SPAWNP); }))) {
            mixin(enumMixinStr_HAVE_POSIX_SPAWNP);
        }
    }
    
    #ifdef HAVE_PREAD
    
    #endif
    static if(!is(typeof(HAVE_PREAD))) {
        private enum enumMixinStr_HAVE_PREAD = `enum HAVE_PREAD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PREAD); }))) {
            mixin(enumMixinStr_HAVE_PREAD);
        }
    }
    
    #ifdef HAVE_PROTOTYPES
    
    #endif
    static if(!is(typeof(HAVE_PROTOTYPES))) {
        private enum enumMixinStr_HAVE_PROTOTYPES = `enum HAVE_PROTOTYPES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PROTOTYPES); }))) {
            mixin(enumMixinStr_HAVE_PROTOTYPES);
        }
    }
    
    #ifdef HAVE_PTHREAD_H
    
    #endif
    static if(!is(typeof(HAVE_PTHREAD_H))) {
        private enum enumMixinStr_HAVE_PTHREAD_H = `enum HAVE_PTHREAD_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PTHREAD_H); }))) {
            mixin(enumMixinStr_HAVE_PTHREAD_H);
        }
    }
    
    #ifdef HAVE_PTHREAD_KILL
    
    #endif
    static if(!is(typeof(HAVE_PTHREAD_KILL))) {
        private enum enumMixinStr_HAVE_PTHREAD_KILL = `enum HAVE_PTHREAD_KILL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PTHREAD_KILL); }))) {
            mixin(enumMixinStr_HAVE_PTHREAD_KILL);
        }
    }
    
    #ifdef HAVE_PTHREAD_SIGMASK
    
    #endif
    static if(!is(typeof(HAVE_PTHREAD_SIGMASK))) {
        private enum enumMixinStr_HAVE_PTHREAD_SIGMASK = `enum HAVE_PTHREAD_SIGMASK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PTHREAD_SIGMASK); }))) {
            mixin(enumMixinStr_HAVE_PTHREAD_SIGMASK);
        }
    }
    
    #ifdef HAVE_PUTENV
    
    #endif
    static if(!is(typeof(HAVE_PUTENV))) {
        private enum enumMixinStr_HAVE_PUTENV = `enum HAVE_PUTENV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PUTENV); }))) {
            mixin(enumMixinStr_HAVE_PUTENV);
        }
    }
    
    #ifdef HAVE_PWRITE
    
    #endif
    static if(!is(typeof(HAVE_PWRITE))) {
        private enum enumMixinStr_HAVE_PWRITE = `enum HAVE_PWRITE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_PWRITE); }))) {
            mixin(enumMixinStr_HAVE_PWRITE);
        }
    }
    
    #ifdef HAVE_READLINK
    
    #endif
    static if(!is(typeof(HAVE_READLINK))) {
        private enum enumMixinStr_HAVE_READLINK = `enum HAVE_READLINK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_READLINK); }))) {
            mixin(enumMixinStr_HAVE_READLINK);
        }
    }
    
    #ifdef HAVE_READV
    
    #endif
    static if(!is(typeof(HAVE_READV))) {
        private enum enumMixinStr_HAVE_READV = `enum HAVE_READV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_READV); }))) {
            mixin(enumMixinStr_HAVE_READV);
        }
    }
    
    #ifdef HAVE_REALPATH
    
    #endif
    static if(!is(typeof(HAVE_REALPATH))) {
        private enum enumMixinStr_HAVE_REALPATH = `enum HAVE_REALPATH = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_REALPATH); }))) {
            mixin(enumMixinStr_HAVE_REALPATH);
        }
    }
    
    #ifdef HAVE_RL_COMPLETION_APPEND_CHARACTER
    
    #endif
    static if(!is(typeof(HAVE_RL_COMPLETION_APPEND_CHARACTER))) {
        private enum enumMixinStr_HAVE_RL_COMPLETION_APPEND_CHARACTER = `enum HAVE_RL_COMPLETION_APPEND_CHARACTER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_RL_COMPLETION_APPEND_CHARACTER); }))) {
            mixin(enumMixinStr_HAVE_RL_COMPLETION_APPEND_CHARACTER);
        }
    }
    
    #ifdef HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK
    
    #endif
    static if(!is(typeof(HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK))) {
        private enum enumMixinStr_HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK = `enum HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK); }))) {
            mixin(enumMixinStr_HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK);
        }
    }
    
    #ifdef HAVE_RL_COMPLETION_MATCHES
    
    #endif
    static if(!is(typeof(HAVE_RL_COMPLETION_MATCHES))) {
        private enum enumMixinStr_HAVE_RL_COMPLETION_MATCHES = `enum HAVE_RL_COMPLETION_MATCHES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_RL_COMPLETION_MATCHES); }))) {
            mixin(enumMixinStr_HAVE_RL_COMPLETION_MATCHES);
        }
    }
    
    #ifdef HAVE_RL_PRE_INPUT_HOOK
    
    #endif
    static if(!is(typeof(HAVE_RL_PRE_INPUT_HOOK))) {
        private enum enumMixinStr_HAVE_RL_PRE_INPUT_HOOK = `enum HAVE_RL_PRE_INPUT_HOOK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_RL_PRE_INPUT_HOOK); }))) {
            mixin(enumMixinStr_HAVE_RL_PRE_INPUT_HOOK);
        }
    }
    
    #ifdef HAVE_ROUND
    
    #endif
    static if(!is(typeof(HAVE_ROUND))) {
        private enum enumMixinStr_HAVE_ROUND = `enum HAVE_ROUND = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ROUND); }))) {
            mixin(enumMixinStr_HAVE_ROUND);
        }
    }
    
    #ifdef HAVE_SCHED_GET_PRIORITY_MAX
    
    #endif
    static if(!is(typeof(HAVE_SCHED_GET_PRIORITY_MAX))) {
        private enum enumMixinStr_HAVE_SCHED_GET_PRIORITY_MAX = `enum HAVE_SCHED_GET_PRIORITY_MAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SCHED_GET_PRIORITY_MAX); }))) {
            mixin(enumMixinStr_HAVE_SCHED_GET_PRIORITY_MAX);
        }
    }
    
    #ifdef HAVE_SCHED_H
    
    #endif
    static if(!is(typeof(HAVE_SCHED_H))) {
        private enum enumMixinStr_HAVE_SCHED_H = `enum HAVE_SCHED_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SCHED_H); }))) {
            mixin(enumMixinStr_HAVE_SCHED_H);
        }
    }
    
    #ifdef HAVE_SEM_GETVALUE
    
    #endif
    static if(!is(typeof(HAVE_SEM_GETVALUE))) {
        private enum enumMixinStr_HAVE_SEM_GETVALUE = `enum HAVE_SEM_GETVALUE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SEM_GETVALUE); }))) {
            mixin(enumMixinStr_HAVE_SEM_GETVALUE);
        }
    }
    
    #ifdef HAVE_SEM_OPEN
    
    #endif
    static if(!is(typeof(HAVE_SEM_OPEN))) {
        private enum enumMixinStr_HAVE_SEM_OPEN = `enum HAVE_SEM_OPEN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SEM_OPEN); }))) {
            mixin(enumMixinStr_HAVE_SEM_OPEN);
        }
    }
    
    #ifdef HAVE_SEM_UNLINK
    
    #endif
    static if(!is(typeof(HAVE_SEM_UNLINK))) {
        private enum enumMixinStr_HAVE_SEM_UNLINK = `enum HAVE_SEM_UNLINK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SEM_UNLINK); }))) {
            mixin(enumMixinStr_HAVE_SEM_UNLINK);
        }
    }
    
    #ifdef HAVE_SENDFILE
    
    #endif
    static if(!is(typeof(HAVE_SENDFILE))) {
        private enum enumMixinStr_HAVE_SENDFILE = `enum HAVE_SENDFILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SENDFILE); }))) {
            mixin(enumMixinStr_HAVE_SENDFILE);
        }
    }
    
    #ifdef HAVE_SETEGID
    
    #endif
    static if(!is(typeof(HAVE_SETEGID))) {
        private enum enumMixinStr_HAVE_SETEGID = `enum HAVE_SETEGID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETEGID); }))) {
            mixin(enumMixinStr_HAVE_SETEGID);
        }
    }
    
    #ifdef HAVE_SETEUID
    
    #endif
    static if(!is(typeof(HAVE_SETEUID))) {
        private enum enumMixinStr_HAVE_SETEUID = `enum HAVE_SETEUID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETEUID); }))) {
            mixin(enumMixinStr_HAVE_SETEUID);
        }
    }
    
    #ifdef HAVE_SETGID
    
    #endif
    static if(!is(typeof(HAVE_SETGID))) {
        private enum enumMixinStr_HAVE_SETGID = `enum HAVE_SETGID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETGID); }))) {
            mixin(enumMixinStr_HAVE_SETGID);
        }
    }
    
    #ifdef HAVE_SETGROUPS
    
    #endif
    static if(!is(typeof(HAVE_SETGROUPS))) {
        private enum enumMixinStr_HAVE_SETGROUPS = `enum HAVE_SETGROUPS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETGROUPS); }))) {
            mixin(enumMixinStr_HAVE_SETGROUPS);
        }
    }
    
    #ifdef HAVE_SETHOSTNAME
    
    #endif
    static if(!is(typeof(HAVE_SETHOSTNAME))) {
        private enum enumMixinStr_HAVE_SETHOSTNAME = `enum HAVE_SETHOSTNAME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETHOSTNAME); }))) {
            mixin(enumMixinStr_HAVE_SETHOSTNAME);
        }
    }
    
    #ifdef HAVE_SETITIMER
    
    #endif
    static if(!is(typeof(HAVE_SETITIMER))) {
        private enum enumMixinStr_HAVE_SETITIMER = `enum HAVE_SETITIMER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETITIMER); }))) {
            mixin(enumMixinStr_HAVE_SETITIMER);
        }
    }
    
    #ifdef HAVE_SETLOCALE
    
    #endif
    static if(!is(typeof(HAVE_SETLOCALE))) {
        private enum enumMixinStr_HAVE_SETLOCALE = `enum HAVE_SETLOCALE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETLOCALE); }))) {
            mixin(enumMixinStr_HAVE_SETLOCALE);
        }
    }
    
    #ifdef HAVE_SETPGID
    
    #endif
    static if(!is(typeof(HAVE_SETPGID))) {
        private enum enumMixinStr_HAVE_SETPGID = `enum HAVE_SETPGID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETPGID); }))) {
            mixin(enumMixinStr_HAVE_SETPGID);
        }
    }
    
    #ifdef HAVE_SETPGRP
    
    #endif
    static if(!is(typeof(HAVE_SETPGRP))) {
        private enum enumMixinStr_HAVE_SETPGRP = `enum HAVE_SETPGRP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETPGRP); }))) {
            mixin(enumMixinStr_HAVE_SETPGRP);
        }
    }
    
    #ifdef HAVE_SETPRIORITY
    
    #endif
    static if(!is(typeof(HAVE_SETPRIORITY))) {
        private enum enumMixinStr_HAVE_SETPRIORITY = `enum HAVE_SETPRIORITY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETPRIORITY); }))) {
            mixin(enumMixinStr_HAVE_SETPRIORITY);
        }
    }
    
    #ifdef HAVE_SETREGID
    
    #endif
    static if(!is(typeof(HAVE_SETREGID))) {
        private enum enumMixinStr_HAVE_SETREGID = `enum HAVE_SETREGID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETREGID); }))) {
            mixin(enumMixinStr_HAVE_SETREGID);
        }
    }
    
    #ifdef HAVE_SETREUID
    
    #endif
    static if(!is(typeof(HAVE_SETREUID))) {
        private enum enumMixinStr_HAVE_SETREUID = `enum HAVE_SETREUID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETREUID); }))) {
            mixin(enumMixinStr_HAVE_SETREUID);
        }
    }
    
    #ifdef HAVE_SETSID
    
    #endif
    static if(!is(typeof(HAVE_SETSID))) {
        private enum enumMixinStr_HAVE_SETSID = `enum HAVE_SETSID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETSID); }))) {
            mixin(enumMixinStr_HAVE_SETSID);
        }
    }
    
    #ifdef HAVE_SETUID
    
    #endif
    static if(!is(typeof(HAVE_SETUID))) {
        private enum enumMixinStr_HAVE_SETUID = `enum HAVE_SETUID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETUID); }))) {
            mixin(enumMixinStr_HAVE_SETUID);
        }
    }
    
    #ifdef HAVE_SETVBUF
    
    #endif
    static if(!is(typeof(HAVE_SETVBUF))) {
        private enum enumMixinStr_HAVE_SETVBUF = `enum HAVE_SETVBUF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SETVBUF); }))) {
            mixin(enumMixinStr_HAVE_SETVBUF);
        }
    }
    
    #ifdef HAVE_SHM_OPEN
    
    #endif
    static if(!is(typeof(HAVE_SHM_OPEN))) {
        private enum enumMixinStr_HAVE_SHM_OPEN = `enum HAVE_SHM_OPEN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SHM_OPEN); }))) {
            mixin(enumMixinStr_HAVE_SHM_OPEN);
        }
    }
    
    #ifdef HAVE_SHM_UNLINK
    
    #endif
    static if(!is(typeof(HAVE_SHM_UNLINK))) {
        private enum enumMixinStr_HAVE_SHM_UNLINK = `enum HAVE_SHM_UNLINK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SHM_UNLINK); }))) {
            mixin(enumMixinStr_HAVE_SHM_UNLINK);
        }
    }
    
    #ifdef HAVE_SIGACTION
    
    #endif
    static if(!is(typeof(HAVE_SIGACTION))) {
        private enum enumMixinStr_HAVE_SIGACTION = `enum HAVE_SIGACTION = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGACTION); }))) {
            mixin(enumMixinStr_HAVE_SIGACTION);
        }
    }
    
    #ifdef HAVE_SIGALTSTACK
    
    #endif
    static if(!is(typeof(HAVE_SIGALTSTACK))) {
        private enum enumMixinStr_HAVE_SIGALTSTACK = `enum HAVE_SIGALTSTACK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGALTSTACK); }))) {
            mixin(enumMixinStr_HAVE_SIGALTSTACK);
        }
    }
    
    #ifdef HAVE_SIGFILLSET
    
    #endif
    static if(!is(typeof(HAVE_SIGFILLSET))) {
        private enum enumMixinStr_HAVE_SIGFILLSET = `enum HAVE_SIGFILLSET = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGFILLSET); }))) {
            mixin(enumMixinStr_HAVE_SIGFILLSET);
        }
    }
    
    #ifdef HAVE_SIGINFO_T_SI_BAND
    
    #endif
    static if(!is(typeof(HAVE_SIGINFO_T_SI_BAND))) {
        private enum enumMixinStr_HAVE_SIGINFO_T_SI_BAND = `enum HAVE_SIGINFO_T_SI_BAND = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGINFO_T_SI_BAND); }))) {
            mixin(enumMixinStr_HAVE_SIGINFO_T_SI_BAND);
        }
    }
    
    #ifdef HAVE_SIGINTERRUPT
    
    #endif
    static if(!is(typeof(HAVE_SIGINTERRUPT))) {
        private enum enumMixinStr_HAVE_SIGINTERRUPT = `enum HAVE_SIGINTERRUPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGINTERRUPT); }))) {
            mixin(enumMixinStr_HAVE_SIGINTERRUPT);
        }
    }
    
    #ifdef HAVE_SIGNAL_H
    
    #endif
    static if(!is(typeof(HAVE_SIGNAL_H))) {
        private enum enumMixinStr_HAVE_SIGNAL_H = `enum HAVE_SIGNAL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGNAL_H); }))) {
            mixin(enumMixinStr_HAVE_SIGNAL_H);
        }
    }
    
    #ifdef HAVE_SIGPENDING
    
    #endif
    static if(!is(typeof(HAVE_SIGPENDING))) {
        private enum enumMixinStr_HAVE_SIGPENDING = `enum HAVE_SIGPENDING = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGPENDING); }))) {
            mixin(enumMixinStr_HAVE_SIGPENDING);
        }
    }
    
    #ifdef HAVE_SIGRELSE
    
    #endif
    static if(!is(typeof(HAVE_SIGRELSE))) {
        private enum enumMixinStr_HAVE_SIGRELSE = `enum HAVE_SIGRELSE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGRELSE); }))) {
            mixin(enumMixinStr_HAVE_SIGRELSE);
        }
    }
    
    #ifdef HAVE_SIGWAIT
    
    #endif
    static if(!is(typeof(HAVE_SIGWAIT))) {
        private enum enumMixinStr_HAVE_SIGWAIT = `enum HAVE_SIGWAIT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SIGWAIT); }))) {
            mixin(enumMixinStr_HAVE_SIGWAIT);
        }
    }
    
    #ifdef HAVE_SNPRINTF
    
    #endif
    static if(!is(typeof(HAVE_SNPRINTF))) {
        private enum enumMixinStr_HAVE_SNPRINTF = `enum HAVE_SNPRINTF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SNPRINTF); }))) {
            mixin(enumMixinStr_HAVE_SNPRINTF);
        }
    }
    
    #ifdef HAVE_SOCKADDR_SA_LEN
    
    #endif
    static if(!is(typeof(HAVE_SOCKADDR_SA_LEN))) {
        private enum enumMixinStr_HAVE_SOCKADDR_SA_LEN = `enum HAVE_SOCKADDR_SA_LEN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SOCKADDR_SA_LEN); }))) {
            mixin(enumMixinStr_HAVE_SOCKADDR_SA_LEN);
        }
    }
    
    #ifdef HAVE_SOCKADDR_STORAGE
    
    #endif
    static if(!is(typeof(HAVE_SOCKADDR_STORAGE))) {
        private enum enumMixinStr_HAVE_SOCKADDR_STORAGE = `enum HAVE_SOCKADDR_STORAGE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SOCKADDR_STORAGE); }))) {
            mixin(enumMixinStr_HAVE_SOCKADDR_STORAGE);
        }
    }
    
    #ifdef HAVE_SOCKETPAIR
    
    #endif
    static if(!is(typeof(HAVE_SOCKETPAIR))) {
        private enum enumMixinStr_HAVE_SOCKETPAIR = `enum HAVE_SOCKETPAIR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SOCKETPAIR); }))) {
            mixin(enumMixinStr_HAVE_SOCKETPAIR);
        }
    }
    
    #ifdef HAVE_SPAWN_H
    
    #endif
    static if(!is(typeof(HAVE_SPAWN_H))) {
        private enum enumMixinStr_HAVE_SPAWN_H = `enum HAVE_SPAWN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SPAWN_H); }))) {
            mixin(enumMixinStr_HAVE_SPAWN_H);
        }
    }
    
    #ifdef HAVE_SSIZE_T
    
    #endif
    static if(!is(typeof(HAVE_SSIZE_T))) {
        private enum enumMixinStr_HAVE_SSIZE_T = `enum HAVE_SSIZE_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SSIZE_T); }))) {
            mixin(enumMixinStr_HAVE_SSIZE_T);
        }
    }
    
    #ifdef HAVE_STATVFS
    
    #endif
    static if(!is(typeof(HAVE_STATVFS))) {
        private enum enumMixinStr_HAVE_STATVFS = `enum HAVE_STATVFS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STATVFS); }))) {
            mixin(enumMixinStr_HAVE_STATVFS);
        }
    }
    
    #ifdef HAVE_STAT_TV_NSEC2
    
    #endif
    static if(!is(typeof(HAVE_STAT_TV_NSEC2))) {
        private enum enumMixinStr_HAVE_STAT_TV_NSEC2 = `enum HAVE_STAT_TV_NSEC2 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STAT_TV_NSEC2); }))) {
            mixin(enumMixinStr_HAVE_STAT_TV_NSEC2);
        }
    }
    
    #ifdef HAVE_STDARG_PROTOTYPES
    
    #endif
    static if(!is(typeof(HAVE_STDARG_PROTOTYPES))) {
        private enum enumMixinStr_HAVE_STDARG_PROTOTYPES = `enum HAVE_STDARG_PROTOTYPES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STDARG_PROTOTYPES); }))) {
            mixin(enumMixinStr_HAVE_STDARG_PROTOTYPES);
        }
    }
    
    #ifdef HAVE_STDINT_H
    
    #endif
    static if(!is(typeof(HAVE_STDINT_H))) {
        private enum enumMixinStr_HAVE_STDINT_H = `enum HAVE_STDINT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STDINT_H); }))) {
            mixin(enumMixinStr_HAVE_STDINT_H);
        }
    }
    
    #ifdef HAVE_STDLIB_H
    
    #endif
    static if(!is(typeof(HAVE_STDLIB_H))) {
        private enum enumMixinStr_HAVE_STDLIB_H = `enum HAVE_STDLIB_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STDLIB_H); }))) {
            mixin(enumMixinStr_HAVE_STDLIB_H);
        }
    }
    
    #ifdef HAVE_STRDUP
    
    #endif
    static if(!is(typeof(HAVE_STRDUP))) {
        private enum enumMixinStr_HAVE_STRDUP = `enum HAVE_STRDUP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRDUP); }))) {
            mixin(enumMixinStr_HAVE_STRDUP);
        }
    }
    
    #ifdef HAVE_STRFTIME
    
    #endif
    static if(!is(typeof(HAVE_STRFTIME))) {
        private enum enumMixinStr_HAVE_STRFTIME = `enum HAVE_STRFTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRFTIME); }))) {
            mixin(enumMixinStr_HAVE_STRFTIME);
        }
    }
    
    #ifdef HAVE_STRINGS_H
    
    #endif
    static if(!is(typeof(HAVE_STRINGS_H))) {
        private enum enumMixinStr_HAVE_STRINGS_H = `enum HAVE_STRINGS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRINGS_H); }))) {
            mixin(enumMixinStr_HAVE_STRINGS_H);
        }
    }
    
    #ifdef HAVE_STRING_H
    
    #endif
    static if(!is(typeof(HAVE_STRING_H))) {
        private enum enumMixinStr_HAVE_STRING_H = `enum HAVE_STRING_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRING_H); }))) {
            mixin(enumMixinStr_HAVE_STRING_H);
        }
    }
    
    #ifdef HAVE_STRLCPY
    
    #endif
    static if(!is(typeof(HAVE_STRLCPY))) {
        private enum enumMixinStr_HAVE_STRLCPY = `enum HAVE_STRLCPY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRLCPY); }))) {
            mixin(enumMixinStr_HAVE_STRLCPY);
        }
    }
    
    #ifdef HAVE_STRSIGNAL
    
    #endif
    static if(!is(typeof(HAVE_STRSIGNAL))) {
        private enum enumMixinStr_HAVE_STRSIGNAL = `enum HAVE_STRSIGNAL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRSIGNAL); }))) {
            mixin(enumMixinStr_HAVE_STRSIGNAL);
        }
    }
    
    #ifdef HAVE_STRUCT_PASSWD_PW_GECOS
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_PASSWD_PW_GECOS))) {
        private enum enumMixinStr_HAVE_STRUCT_PASSWD_PW_GECOS = `enum HAVE_STRUCT_PASSWD_PW_GECOS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_PASSWD_PW_GECOS); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_PASSWD_PW_GECOS);
        }
    }
    
    #ifdef HAVE_STRUCT_PASSWD_PW_PASSWD
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_PASSWD_PW_PASSWD))) {
        private enum enumMixinStr_HAVE_STRUCT_PASSWD_PW_PASSWD = `enum HAVE_STRUCT_PASSWD_PW_PASSWD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_PASSWD_PW_PASSWD); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_PASSWD_PW_PASSWD);
        }
    }
    
    #ifdef HAVE_STRUCT_STAT_ST_BIRTHTIME
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_STAT_ST_BIRTHTIME))) {
        private enum enumMixinStr_HAVE_STRUCT_STAT_ST_BIRTHTIME = `enum HAVE_STRUCT_STAT_ST_BIRTHTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_BIRTHTIME); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_BIRTHTIME);
        }
    }
    
    #ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_STAT_ST_BLKSIZE))) {
        private enum enumMixinStr_HAVE_STRUCT_STAT_ST_BLKSIZE = `enum HAVE_STRUCT_STAT_ST_BLKSIZE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_BLKSIZE); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_BLKSIZE);
        }
    }
    
    #ifdef HAVE_STRUCT_STAT_ST_BLOCKS
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_STAT_ST_BLOCKS))) {
        private enum enumMixinStr_HAVE_STRUCT_STAT_ST_BLOCKS = `enum HAVE_STRUCT_STAT_ST_BLOCKS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_BLOCKS); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_BLOCKS);
        }
    }
    
    #ifdef HAVE_STRUCT_STAT_ST_FLAGS
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_STAT_ST_FLAGS))) {
        private enum enumMixinStr_HAVE_STRUCT_STAT_ST_FLAGS = `enum HAVE_STRUCT_STAT_ST_FLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_FLAGS); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_FLAGS);
        }
    }
    
    #ifdef HAVE_STRUCT_STAT_ST_GEN
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_STAT_ST_GEN))) {
        private enum enumMixinStr_HAVE_STRUCT_STAT_ST_GEN = `enum HAVE_STRUCT_STAT_ST_GEN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_GEN); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_GEN);
        }
    }
    
    #ifdef HAVE_STRUCT_STAT_ST_RDEV
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_STAT_ST_RDEV))) {
        private enum enumMixinStr_HAVE_STRUCT_STAT_ST_RDEV = `enum HAVE_STRUCT_STAT_ST_RDEV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_RDEV); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_STAT_ST_RDEV);
        }
    }
    
    #ifdef HAVE_STRUCT_TM_TM_ZONE
    
    #endif
    static if(!is(typeof(HAVE_STRUCT_TM_TM_ZONE))) {
        private enum enumMixinStr_HAVE_STRUCT_TM_TM_ZONE = `enum HAVE_STRUCT_TM_TM_ZONE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_STRUCT_TM_TM_ZONE); }))) {
            mixin(enumMixinStr_HAVE_STRUCT_TM_TM_ZONE);
        }
    }
    
    #ifdef HAVE_SYMLINK
    
    #endif
    static if(!is(typeof(HAVE_SYMLINK))) {
        private enum enumMixinStr_HAVE_SYMLINK = `enum HAVE_SYMLINK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYMLINK); }))) {
            mixin(enumMixinStr_HAVE_SYMLINK);
        }
    }
    
    #ifdef HAVE_SYNC
    
    #endif
    static if(!is(typeof(HAVE_SYNC))) {
        private enum enumMixinStr_HAVE_SYNC = `enum HAVE_SYNC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYNC); }))) {
            mixin(enumMixinStr_HAVE_SYNC);
        }
    }
    
    #ifdef HAVE_SYSCONF
    
    #endif
    static if(!is(typeof(HAVE_SYSCONF))) {
        private enum enumMixinStr_HAVE_SYSCONF = `enum HAVE_SYSCONF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYSCONF); }))) {
            mixin(enumMixinStr_HAVE_SYSCONF);
        }
    }
    
    #ifdef HAVE_SYSEXITS_H
    
    #endif
    static if(!is(typeof(HAVE_SYSEXITS_H))) {
        private enum enumMixinStr_HAVE_SYSEXITS_H = `enum HAVE_SYSEXITS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYSEXITS_H); }))) {
            mixin(enumMixinStr_HAVE_SYSEXITS_H);
        }
    }
    
    #ifdef HAVE_SYS_EVENT_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_EVENT_H))) {
        private enum enumMixinStr_HAVE_SYS_EVENT_H = `enum HAVE_SYS_EVENT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_EVENT_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_EVENT_H);
        }
    }
    
    #ifdef HAVE_SYS_FILE_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_FILE_H))) {
        private enum enumMixinStr_HAVE_SYS_FILE_H = `enum HAVE_SYS_FILE_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_FILE_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_FILE_H);
        }
    }
    
    #ifdef HAVE_SYS_IOCTL_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_IOCTL_H))) {
        private enum enumMixinStr_HAVE_SYS_IOCTL_H = `enum HAVE_SYS_IOCTL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_IOCTL_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_IOCTL_H);
        }
    }
    
    #ifdef HAVE_SYS_KERN_CONTROL_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_KERN_CONTROL_H))) {
        private enum enumMixinStr_HAVE_SYS_KERN_CONTROL_H = `enum HAVE_SYS_KERN_CONTROL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_KERN_CONTROL_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_KERN_CONTROL_H);
        }
    }
    
    #ifdef HAVE_SYS_LOCK_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_LOCK_H))) {
        private enum enumMixinStr_HAVE_SYS_LOCK_H = `enum HAVE_SYS_LOCK_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_LOCK_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_LOCK_H);
        }
    }
    
    #ifdef HAVE_SYS_MMAN_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_MMAN_H))) {
        private enum enumMixinStr_HAVE_SYS_MMAN_H = `enum HAVE_SYS_MMAN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_MMAN_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_MMAN_H);
        }
    }
    
    #ifdef HAVE_SYS_PARAM_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_PARAM_H))) {
        private enum enumMixinStr_HAVE_SYS_PARAM_H = `enum HAVE_SYS_PARAM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_PARAM_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_PARAM_H);
        }
    }
    
    #ifdef HAVE_SYS_POLL_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_POLL_H))) {
        private enum enumMixinStr_HAVE_SYS_POLL_H = `enum HAVE_SYS_POLL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_POLL_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_POLL_H);
        }
    }
    
    #ifdef HAVE_SYS_RANDOM_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_RANDOM_H))) {
        private enum enumMixinStr_HAVE_SYS_RANDOM_H = `enum HAVE_SYS_RANDOM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_RANDOM_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_RANDOM_H);
        }
    }
    
    #ifdef HAVE_SYS_RESOURCE_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_RESOURCE_H))) {
        private enum enumMixinStr_HAVE_SYS_RESOURCE_H = `enum HAVE_SYS_RESOURCE_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_RESOURCE_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_RESOURCE_H);
        }
    }
    
    #ifdef HAVE_SYS_SELECT_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_SELECT_H))) {
        private enum enumMixinStr_HAVE_SYS_SELECT_H = `enum HAVE_SYS_SELECT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_SELECT_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_SELECT_H);
        }
    }
    
    #ifdef HAVE_SYS_SOCKET_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_SOCKET_H))) {
        private enum enumMixinStr_HAVE_SYS_SOCKET_H = `enum HAVE_SYS_SOCKET_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_SOCKET_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_SOCKET_H);
        }
    }
    
    #ifdef HAVE_SYS_STATVFS_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_STATVFS_H))) {
        private enum enumMixinStr_HAVE_SYS_STATVFS_H = `enum HAVE_SYS_STATVFS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_STATVFS_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_STATVFS_H);
        }
    }
    
    #ifdef HAVE_SYS_STAT_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_STAT_H))) {
        private enum enumMixinStr_HAVE_SYS_STAT_H = `enum HAVE_SYS_STAT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_STAT_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_STAT_H);
        }
    }
    
    #ifdef HAVE_SYS_SYSCALL_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_SYSCALL_H))) {
        private enum enumMixinStr_HAVE_SYS_SYSCALL_H = `enum HAVE_SYS_SYSCALL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_SYSCALL_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_SYSCALL_H);
        }
    }
    
    #ifdef HAVE_SYS_SYS_DOMAIN_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_SYS_DOMAIN_H))) {
        private enum enumMixinStr_HAVE_SYS_SYS_DOMAIN_H = `enum HAVE_SYS_SYS_DOMAIN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_SYS_DOMAIN_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_SYS_DOMAIN_H);
        }
    }
    
    #ifdef HAVE_SYS_TIMES_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_TIMES_H))) {
        private enum enumMixinStr_HAVE_SYS_TIMES_H = `enum HAVE_SYS_TIMES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_TIMES_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_TIMES_H);
        }
    }
    
    #ifdef HAVE_SYS_TIME_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_TIME_H))) {
        private enum enumMixinStr_HAVE_SYS_TIME_H = `enum HAVE_SYS_TIME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_TIME_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_TIME_H);
        }
    }
    
    #ifdef HAVE_SYS_TYPES_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_TYPES_H))) {
        private enum enumMixinStr_HAVE_SYS_TYPES_H = `enum HAVE_SYS_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_TYPES_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_TYPES_H);
        }
    }
    
    #ifdef HAVE_SYS_UIO_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_UIO_H))) {
        private enum enumMixinStr_HAVE_SYS_UIO_H = `enum HAVE_SYS_UIO_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_UIO_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_UIO_H);
        }
    }
    
    #ifdef HAVE_SYS_UN_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_UN_H))) {
        private enum enumMixinStr_HAVE_SYS_UN_H = `enum HAVE_SYS_UN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_UN_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_UN_H);
        }
    }
    
    #ifdef HAVE_SYS_UTSNAME_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_UTSNAME_H))) {
        private enum enumMixinStr_HAVE_SYS_UTSNAME_H = `enum HAVE_SYS_UTSNAME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_UTSNAME_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_UTSNAME_H);
        }
    }
    
    #ifdef HAVE_SYS_WAIT_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_WAIT_H))) {
        private enum enumMixinStr_HAVE_SYS_WAIT_H = `enum HAVE_SYS_WAIT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_WAIT_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_WAIT_H);
        }
    }
    
    #ifdef HAVE_SYS_XATTR_H
    
    #endif
    static if(!is(typeof(HAVE_SYS_XATTR_H))) {
        private enum enumMixinStr_HAVE_SYS_XATTR_H = `enum HAVE_SYS_XATTR_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_SYS_XATTR_H); }))) {
            mixin(enumMixinStr_HAVE_SYS_XATTR_H);
        }
    }
    
    #ifdef HAVE_TCGETPGRP
    
    #endif
    static if(!is(typeof(HAVE_TCGETPGRP))) {
        private enum enumMixinStr_HAVE_TCGETPGRP = `enum HAVE_TCGETPGRP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TCGETPGRP); }))) {
            mixin(enumMixinStr_HAVE_TCGETPGRP);
        }
    }
    
    #ifdef HAVE_TCSETPGRP
    
    #endif
    static if(!is(typeof(HAVE_TCSETPGRP))) {
        private enum enumMixinStr_HAVE_TCSETPGRP = `enum HAVE_TCSETPGRP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TCSETPGRP); }))) {
            mixin(enumMixinStr_HAVE_TCSETPGRP);
        }
    }
    
    #ifdef HAVE_TEMPNAM
    
    #endif
    static if(!is(typeof(HAVE_TEMPNAM))) {
        private enum enumMixinStr_HAVE_TEMPNAM = `enum HAVE_TEMPNAM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TEMPNAM); }))) {
            mixin(enumMixinStr_HAVE_TEMPNAM);
        }
    }
    
    #ifdef HAVE_TERMIOS_H
    
    #endif
    static if(!is(typeof(HAVE_TERMIOS_H))) {
        private enum enumMixinStr_HAVE_TERMIOS_H = `enum HAVE_TERMIOS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TERMIOS_H); }))) {
            mixin(enumMixinStr_HAVE_TERMIOS_H);
        }
    }
    
    #ifdef HAVE_TERM_H
    
    #endif
    static if(!is(typeof(HAVE_TERM_H))) {
        private enum enumMixinStr_HAVE_TERM_H = `enum HAVE_TERM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TERM_H); }))) {
            mixin(enumMixinStr_HAVE_TERM_H);
        }
    }
    
    #ifdef HAVE_TGAMMA
    
    #endif
    static if(!is(typeof(HAVE_TGAMMA))) {
        private enum enumMixinStr_HAVE_TGAMMA = `enum HAVE_TGAMMA = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TGAMMA); }))) {
            mixin(enumMixinStr_HAVE_TGAMMA);
        }
    }
    
    #ifdef HAVE_TIMEGM
    
    #endif
    static if(!is(typeof(HAVE_TIMEGM))) {
        private enum enumMixinStr_HAVE_TIMEGM = `enum HAVE_TIMEGM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TIMEGM); }))) {
            mixin(enumMixinStr_HAVE_TIMEGM);
        }
    }
    
    #ifdef HAVE_TIMES
    
    #endif
    static if(!is(typeof(HAVE_TIMES))) {
        private enum enumMixinStr_HAVE_TIMES = `enum HAVE_TIMES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TIMES); }))) {
            mixin(enumMixinStr_HAVE_TIMES);
        }
    }
    
    #ifdef HAVE_TMPFILE
    
    #endif
    static if(!is(typeof(HAVE_TMPFILE))) {
        private enum enumMixinStr_HAVE_TMPFILE = `enum HAVE_TMPFILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TMPFILE); }))) {
            mixin(enumMixinStr_HAVE_TMPFILE);
        }
    }
    
    #ifdef HAVE_TMPNAM
    
    #endif
    static if(!is(typeof(HAVE_TMPNAM))) {
        private enum enumMixinStr_HAVE_TMPNAM = `enum HAVE_TMPNAM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TMPNAM); }))) {
            mixin(enumMixinStr_HAVE_TMPNAM);
        }
    }
    
    #ifdef HAVE_TM_ZONE
    
    #endif
    static if(!is(typeof(HAVE_TM_ZONE))) {
        private enum enumMixinStr_HAVE_TM_ZONE = `enum HAVE_TM_ZONE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TM_ZONE); }))) {
            mixin(enumMixinStr_HAVE_TM_ZONE);
        }
    }
    
    #ifdef HAVE_TRUNCATE
    
    #endif
    static if(!is(typeof(HAVE_TRUNCATE))) {
        private enum enumMixinStr_HAVE_TRUNCATE = `enum HAVE_TRUNCATE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_TRUNCATE); }))) {
            mixin(enumMixinStr_HAVE_TRUNCATE);
        }
    }
    
    #ifdef HAVE_UNAME
    
    #endif
    static if(!is(typeof(HAVE_UNAME))) {
        private enum enumMixinStr_HAVE_UNAME = `enum HAVE_UNAME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UNAME); }))) {
            mixin(enumMixinStr_HAVE_UNAME);
        }
    }
    
    #ifdef HAVE_UNISTD_H
    
    #endif
    static if(!is(typeof(HAVE_UNISTD_H))) {
        private enum enumMixinStr_HAVE_UNISTD_H = `enum HAVE_UNISTD_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UNISTD_H); }))) {
            mixin(enumMixinStr_HAVE_UNISTD_H);
        }
    }
    
    #ifdef HAVE_UNSETENV
    
    #endif
    static if(!is(typeof(HAVE_UNSETENV))) {
        private enum enumMixinStr_HAVE_UNSETENV = `enum HAVE_UNSETENV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UNSETENV); }))) {
            mixin(enumMixinStr_HAVE_UNSETENV);
        }
    }
    
    #ifdef HAVE_UTIL_H
    
    #endif
    static if(!is(typeof(HAVE_UTIL_H))) {
        private enum enumMixinStr_HAVE_UTIL_H = `enum HAVE_UTIL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UTIL_H); }))) {
            mixin(enumMixinStr_HAVE_UTIL_H);
        }
    }
    
    #ifdef HAVE_UTIMES
    
    #endif
    static if(!is(typeof(HAVE_UTIMES))) {
        private enum enumMixinStr_HAVE_UTIMES = `enum HAVE_UTIMES = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UTIMES); }))) {
            mixin(enumMixinStr_HAVE_UTIMES);
        }
    }
    
    #ifdef HAVE_UTIME_H
    
    #endif
    static if(!is(typeof(HAVE_UTIME_H))) {
        private enum enumMixinStr_HAVE_UTIME_H = `enum HAVE_UTIME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UTIME_H); }))) {
            mixin(enumMixinStr_HAVE_UTIME_H);
        }
    }
    
    #ifdef HAVE_UUID_UUID_H
    
    #endif
    static if(!is(typeof(HAVE_UUID_UUID_H))) {
        private enum enumMixinStr_HAVE_UUID_UUID_H = `enum HAVE_UUID_UUID_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_UUID_UUID_H); }))) {
            mixin(enumMixinStr_HAVE_UUID_UUID_H);
        }
    }
    
    #ifdef HAVE_WAIT3
    
    #endif
    static if(!is(typeof(HAVE_WAIT3))) {
        private enum enumMixinStr_HAVE_WAIT3 = `enum HAVE_WAIT3 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WAIT3); }))) {
            mixin(enumMixinStr_HAVE_WAIT3);
        }
    }
    
    #ifdef HAVE_WAIT4
    
    #endif
    static if(!is(typeof(HAVE_WAIT4))) {
        private enum enumMixinStr_HAVE_WAIT4 = `enum HAVE_WAIT4 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WAIT4); }))) {
            mixin(enumMixinStr_HAVE_WAIT4);
        }
    }
    
    #ifdef HAVE_WAITID
    
    #endif
    static if(!is(typeof(HAVE_WAITID))) {
        private enum enumMixinStr_HAVE_WAITID = `enum HAVE_WAITID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WAITID); }))) {
            mixin(enumMixinStr_HAVE_WAITID);
        }
    }
    
    #ifdef HAVE_WAITPID
    
    #endif
    static if(!is(typeof(HAVE_WAITPID))) {
        private enum enumMixinStr_HAVE_WAITPID = `enum HAVE_WAITPID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WAITPID); }))) {
            mixin(enumMixinStr_HAVE_WAITPID);
        }
    }
    
    #ifdef HAVE_WCHAR_H
    
    #endif
    static if(!is(typeof(HAVE_WCHAR_H))) {
        private enum enumMixinStr_HAVE_WCHAR_H = `enum HAVE_WCHAR_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WCHAR_H); }))) {
            mixin(enumMixinStr_HAVE_WCHAR_H);
        }
    }
    
    #ifdef HAVE_WCSCOLL
    
    #endif
    static if(!is(typeof(HAVE_WCSCOLL))) {
        private enum enumMixinStr_HAVE_WCSCOLL = `enum HAVE_WCSCOLL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WCSCOLL); }))) {
            mixin(enumMixinStr_HAVE_WCSCOLL);
        }
    }
    
    #ifdef HAVE_WCSFTIME
    
    #endif
    static if(!is(typeof(HAVE_WCSFTIME))) {
        private enum enumMixinStr_HAVE_WCSFTIME = `enum HAVE_WCSFTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WCSFTIME); }))) {
            mixin(enumMixinStr_HAVE_WCSFTIME);
        }
    }
    
    #ifdef HAVE_WCSXFRM
    
    #endif
    static if(!is(typeof(HAVE_WCSXFRM))) {
        private enum enumMixinStr_HAVE_WCSXFRM = `enum HAVE_WCSXFRM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WCSXFRM); }))) {
            mixin(enumMixinStr_HAVE_WCSXFRM);
        }
    }
    
    #ifdef HAVE_WMEMCMP
    
    #endif
    static if(!is(typeof(HAVE_WMEMCMP))) {
        private enum enumMixinStr_HAVE_WMEMCMP = `enum HAVE_WMEMCMP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WMEMCMP); }))) {
            mixin(enumMixinStr_HAVE_WMEMCMP);
        }
    }
    
    #ifdef HAVE_WORKING_TZSET
    
    #endif
    static if(!is(typeof(HAVE_WORKING_TZSET))) {
        private enum enumMixinStr_HAVE_WORKING_TZSET = `enum HAVE_WORKING_TZSET = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WORKING_TZSET); }))) {
            mixin(enumMixinStr_HAVE_WORKING_TZSET);
        }
    }
    
    #ifdef HAVE_WRITEV
    
    #endif
    static if(!is(typeof(HAVE_WRITEV))) {
        private enum enumMixinStr_HAVE_WRITEV = `enum HAVE_WRITEV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_WRITEV); }))) {
            mixin(enumMixinStr_HAVE_WRITEV);
        }
    }
    
    #ifdef HAVE_X509_VERIFY_PARAM_SET1_HOST
    
    #endif
    static if(!is(typeof(HAVE_X509_VERIFY_PARAM_SET1_HOST))) {
        private enum enumMixinStr_HAVE_X509_VERIFY_PARAM_SET1_HOST = `enum HAVE_X509_VERIFY_PARAM_SET1_HOST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_X509_VERIFY_PARAM_SET1_HOST); }))) {
            mixin(enumMixinStr_HAVE_X509_VERIFY_PARAM_SET1_HOST);
        }
    }
    
    #ifdef HAVE_ZLIB_COPY
    
    #endif
    static if(!is(typeof(HAVE_ZLIB_COPY))) {
        private enum enumMixinStr_HAVE_ZLIB_COPY = `enum HAVE_ZLIB_COPY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_ZLIB_COPY); }))) {
            mixin(enumMixinStr_HAVE_ZLIB_COPY);
        }
    }
    
    #ifdef MVWDELCH_IS_EXPRESSION
    
    #endif
    static if(!is(typeof(MVWDELCH_IS_EXPRESSION))) {
        private enum enumMixinStr_MVWDELCH_IS_EXPRESSION = `enum MVWDELCH_IS_EXPRESSION = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_MVWDELCH_IS_EXPRESSION); }))) {
            mixin(enumMixinStr_MVWDELCH_IS_EXPRESSION);
        }
    }
    
    #ifdef PTHREAD_SYSTEM_SCHED_SUPPORTED
    
    #endif
    static if(!is(typeof(PTHREAD_SYSTEM_SCHED_SUPPORTED))) {
        private enum enumMixinStr_PTHREAD_SYSTEM_SCHED_SUPPORTED = `enum PTHREAD_SYSTEM_SCHED_SUPPORTED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SYSTEM_SCHED_SUPPORTED); }))) {
            mixin(enumMixinStr_PTHREAD_SYSTEM_SCHED_SUPPORTED);
        }
    }
    
    #ifdef PY_COERCE_C_LOCALE
    
    #endif
    static if(!is(typeof(PY_COERCE_C_LOCALE))) {
        private enum enumMixinStr_PY_COERCE_C_LOCALE = `enum PY_COERCE_C_LOCALE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_COERCE_C_LOCALE); }))) {
            mixin(enumMixinStr_PY_COERCE_C_LOCALE);
        }
    }
    
    #ifdef PY_FORMAT_SIZE_T
    
    #endif
    static if(!is(typeof(PY_FORMAT_SIZE_T))) {
        private enum enumMixinStr_PY_FORMAT_SIZE_T = `enum PY_FORMAT_SIZE_T = "z";`;
        static if(is(typeof({ mixin(enumMixinStr_PY_FORMAT_SIZE_T); }))) {
            mixin(enumMixinStr_PY_FORMAT_SIZE_T);
        }
    }
    
    #ifdef PY_SSL_DEFAULT_CIPHERS
    
    #endif
    static if(!is(typeof(PY_SSL_DEFAULT_CIPHERS))) {
        private enum enumMixinStr_PY_SSL_DEFAULT_CIPHERS = `enum PY_SSL_DEFAULT_CIPHERS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_SSL_DEFAULT_CIPHERS); }))) {
            mixin(enumMixinStr_PY_SSL_DEFAULT_CIPHERS);
        }
    }
    
    #ifdef RETSIGTYPE
    
    #endif
    static if(!is(typeof(RETSIGTYPE))) {
        private enum enumMixinStr_RETSIGTYPE = `enum RETSIGTYPE = void;`;
        static if(is(typeof({ mixin(enumMixinStr_RETSIGTYPE); }))) {
            mixin(enumMixinStr_RETSIGTYPE);
        }
    }
    
    #ifdef SIZEOF_DOUBLE
    
    #endif
    static if(!is(typeof(SIZEOF_DOUBLE))) {
        private enum enumMixinStr_SIZEOF_DOUBLE = `enum SIZEOF_DOUBLE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_DOUBLE); }))) {
            mixin(enumMixinStr_SIZEOF_DOUBLE);
        }
    }
    
    #ifdef SIZEOF_FLOAT
    
    #endif
    static if(!is(typeof(SIZEOF_FLOAT))) {
        private enum enumMixinStr_SIZEOF_FLOAT = `enum SIZEOF_FLOAT = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_FLOAT); }))) {
            mixin(enumMixinStr_SIZEOF_FLOAT);
        }
    }
    
    #ifdef SIZEOF_FPOS_T
    
    #endif
    static if(!is(typeof(SIZEOF_FPOS_T))) {
        private enum enumMixinStr_SIZEOF_FPOS_T = `enum SIZEOF_FPOS_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_FPOS_T); }))) {
            mixin(enumMixinStr_SIZEOF_FPOS_T);
        }
    }
    
    #ifdef SIZEOF_INT
    
    #endif
    static if(!is(typeof(SIZEOF_INT))) {
        private enum enumMixinStr_SIZEOF_INT = `enum SIZEOF_INT = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_INT); }))) {
            mixin(enumMixinStr_SIZEOF_INT);
        }
    }
    
    #ifdef SIZEOF_LONG
    
    #endif
    static if(!is(typeof(SIZEOF_LONG))) {
        private enum enumMixinStr_SIZEOF_LONG = `enum SIZEOF_LONG = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_LONG); }))) {
            mixin(enumMixinStr_SIZEOF_LONG);
        }
    }
    
    #ifdef SIZEOF_LONG_DOUBLE
    
    #endif
    static if(!is(typeof(SIZEOF_LONG_DOUBLE))) {
        private enum enumMixinStr_SIZEOF_LONG_DOUBLE = `enum SIZEOF_LONG_DOUBLE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_LONG_DOUBLE); }))) {
            mixin(enumMixinStr_SIZEOF_LONG_DOUBLE);
        }
    }
    
    #ifdef SIZEOF_LONG_LONG
    
    #endif
    static if(!is(typeof(SIZEOF_LONG_LONG))) {
        private enum enumMixinStr_SIZEOF_LONG_LONG = `enum SIZEOF_LONG_LONG = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_LONG_LONG); }))) {
            mixin(enumMixinStr_SIZEOF_LONG_LONG);
        }
    }
    
    #ifdef SIZEOF_OFF_T
    
    #endif
    static if(!is(typeof(SIZEOF_OFF_T))) {
        private enum enumMixinStr_SIZEOF_OFF_T = `enum SIZEOF_OFF_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_OFF_T); }))) {
            mixin(enumMixinStr_SIZEOF_OFF_T);
        }
    }
    
    #ifdef SIZEOF_PID_T
    
    #endif
    static if(!is(typeof(SIZEOF_PID_T))) {
        private enum enumMixinStr_SIZEOF_PID_T = `enum SIZEOF_PID_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_PID_T); }))) {
            mixin(enumMixinStr_SIZEOF_PID_T);
        }
    }
    
    #ifdef SIZEOF_PTHREAD_KEY_T
    
    #endif
    static if(!is(typeof(SIZEOF_PTHREAD_KEY_T))) {
        private enum enumMixinStr_SIZEOF_PTHREAD_KEY_T = `enum SIZEOF_PTHREAD_KEY_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_PTHREAD_KEY_T); }))) {
            mixin(enumMixinStr_SIZEOF_PTHREAD_KEY_T);
        }
    }
    
    #ifdef SIZEOF_PTHREAD_T
    
    #endif
    static if(!is(typeof(SIZEOF_PTHREAD_T))) {
        private enum enumMixinStr_SIZEOF_PTHREAD_T = `enum SIZEOF_PTHREAD_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_PTHREAD_T); }))) {
            mixin(enumMixinStr_SIZEOF_PTHREAD_T);
        }
    }
    
    #ifdef SIZEOF_SHORT
    
    #endif
    static if(!is(typeof(SIZEOF_SHORT))) {
        private enum enumMixinStr_SIZEOF_SHORT = `enum SIZEOF_SHORT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_SHORT); }))) {
            mixin(enumMixinStr_SIZEOF_SHORT);
        }
    }
    
    #ifdef SIZEOF_SIZE_T
    
    #endif
    static if(!is(typeof(SIZEOF_SIZE_T))) {
        private enum enumMixinStr_SIZEOF_SIZE_T = `enum SIZEOF_SIZE_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_SIZE_T); }))) {
            mixin(enumMixinStr_SIZEOF_SIZE_T);
        }
    }
    
    #ifdef SIZEOF_TIME_T
    
    #endif
    static if(!is(typeof(SIZEOF_TIME_T))) {
        private enum enumMixinStr_SIZEOF_TIME_T = `enum SIZEOF_TIME_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_TIME_T); }))) {
            mixin(enumMixinStr_SIZEOF_TIME_T);
        }
    }
    
    #ifdef SIZEOF_UINTPTR_T
    
    #endif
    static if(!is(typeof(SIZEOF_UINTPTR_T))) {
        private enum enumMixinStr_SIZEOF_UINTPTR_T = `enum SIZEOF_UINTPTR_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_UINTPTR_T); }))) {
            mixin(enumMixinStr_SIZEOF_UINTPTR_T);
        }
    }
    
    #ifdef SIZEOF_VOID_P
    
    #endif
    static if(!is(typeof(SIZEOF_VOID_P))) {
        private enum enumMixinStr_SIZEOF_VOID_P = `enum SIZEOF_VOID_P = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_VOID_P); }))) {
            mixin(enumMixinStr_SIZEOF_VOID_P);
        }
    }
    
    #ifdef SIZEOF_WCHAR_T
    
    #endif
    static if(!is(typeof(SIZEOF_WCHAR_T))) {
        private enum enumMixinStr_SIZEOF_WCHAR_T = `enum SIZEOF_WCHAR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_WCHAR_T); }))) {
            mixin(enumMixinStr_SIZEOF_WCHAR_T);
        }
    }
    
    #ifdef SIZEOF__BOOL
    
    #endif
    static if(!is(typeof(SIZEOF__BOOL))) {
        private enum enumMixinStr_SIZEOF__BOOL = `enum SIZEOF__BOOL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF__BOOL); }))) {
            mixin(enumMixinStr_SIZEOF__BOOL);
        }
    }
    
    #ifdef STDC_HEADERS
    
    #endif
    static if(!is(typeof(STDC_HEADERS))) {
        private enum enumMixinStr_STDC_HEADERS = `enum STDC_HEADERS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_STDC_HEADERS); }))) {
            mixin(enumMixinStr_STDC_HEADERS);
        }
    }
    
    #ifdef SYS_SELECT_WITH_SYS_TIME
    
    #endif
    static if(!is(typeof(SYS_SELECT_WITH_SYS_TIME))) {
        private enum enumMixinStr_SYS_SELECT_WITH_SYS_TIME = `enum SYS_SELECT_WITH_SYS_TIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_SELECT_WITH_SYS_TIME); }))) {
            mixin(enumMixinStr_SYS_SELECT_WITH_SYS_TIME);
        }
    }
    
    #ifdef TIME_WITH_SYS_TIME
    
    #endif
    static if(!is(typeof(TIME_WITH_SYS_TIME))) {
        private enum enumMixinStr_TIME_WITH_SYS_TIME = `enum TIME_WITH_SYS_TIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TIME_WITH_SYS_TIME); }))) {
            mixin(enumMixinStr_TIME_WITH_SYS_TIME);
        }
    }
    
    #ifdef USE_COMPUTED_GOTOS
    
    #endif
    static if(!is(typeof(USE_COMPUTED_GOTOS))) {
        private enum enumMixinStr_USE_COMPUTED_GOTOS = `enum USE_COMPUTED_GOTOS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_USE_COMPUTED_GOTOS); }))) {
            mixin(enumMixinStr_USE_COMPUTED_GOTOS);
        }
    }
    
    #ifdef _ALL_SOURCE
    
    #endif
    static if(!is(typeof(_ALL_SOURCE))) {
        private enum enumMixinStr__ALL_SOURCE = `enum _ALL_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ALL_SOURCE); }))) {
            mixin(enumMixinStr__ALL_SOURCE);
        }
    }
    
    #ifdef _GNU_SOURCE
    
    #endif
    static if(!is(typeof(_GNU_SOURCE))) {
        private enum enumMixinStr__GNU_SOURCE = `enum _GNU_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__GNU_SOURCE); }))) {
            mixin(enumMixinStr__GNU_SOURCE);
        }
    }
    
    #ifdef _POSIX_PTHREAD_SEMANTICS
    
    #endif
    static if(!is(typeof(_POSIX_PTHREAD_SEMANTICS))) {
        private enum enumMixinStr__POSIX_PTHREAD_SEMANTICS = `enum _POSIX_PTHREAD_SEMANTICS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PTHREAD_SEMANTICS); }))) {
            mixin(enumMixinStr__POSIX_PTHREAD_SEMANTICS);
        }
    }
    
    #ifdef _TANDEM_SOURCE
    
    #endif
    static if(!is(typeof(_TANDEM_SOURCE))) {
        private enum enumMixinStr__TANDEM_SOURCE = `enum _TANDEM_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__TANDEM_SOURCE); }))) {
            mixin(enumMixinStr__TANDEM_SOURCE);
        }
    }
    
    #ifdef __EXTENSIONS__
    
    #endif
    static if(!is(typeof(__EXTENSIONS__))) {
        private enum enumMixinStr___EXTENSIONS__ = `enum __EXTENSIONS__ = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___EXTENSIONS__); }))) {
            mixin(enumMixinStr___EXTENSIONS__);
        }
    }
    
    #ifdef WINDOW_HAS_FLAGS
    
    #endif
    static if(!is(typeof(WINDOW_HAS_FLAGS))) {
        private enum enumMixinStr_WINDOW_HAS_FLAGS = `enum WINDOW_HAS_FLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WINDOW_HAS_FLAGS); }))) {
            mixin(enumMixinStr_WINDOW_HAS_FLAGS);
        }
    }
    
    #ifdef WITH_DOC_STRINGS
    
    #endif
    static if(!is(typeof(WITH_DOC_STRINGS))) {
        private enum enumMixinStr_WITH_DOC_STRINGS = `enum WITH_DOC_STRINGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WITH_DOC_STRINGS); }))) {
            mixin(enumMixinStr_WITH_DOC_STRINGS);
        }
    }
    
    #ifdef WITH_DYLD
    
    #endif
    static if(!is(typeof(WITH_DYLD))) {
        private enum enumMixinStr_WITH_DYLD = `enum WITH_DYLD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WITH_DYLD); }))) {
            mixin(enumMixinStr_WITH_DYLD);
        }
    }
    
    #ifdef WITH_NEXT_FRAMEWORK
    
    #endif
    static if(!is(typeof(WITH_NEXT_FRAMEWORK))) {
        private enum enumMixinStr_WITH_NEXT_FRAMEWORK = `enum WITH_NEXT_FRAMEWORK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WITH_NEXT_FRAMEWORK); }))) {
            mixin(enumMixinStr_WITH_NEXT_FRAMEWORK);
        }
    }
    
    #ifdef WITH_PYMALLOC
    
    #endif
    static if(!is(typeof(WITH_PYMALLOC))) {
        private enum enumMixinStr_WITH_PYMALLOC = `enum WITH_PYMALLOC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WITH_PYMALLOC); }))) {
            mixin(enumMixinStr_WITH_PYMALLOC);
        }
    }
    
    #ifdef _DARWIN_C_SOURCE
    
    #endif
    static if(!is(typeof(_DARWIN_C_SOURCE))) {
        private enum enumMixinStr__DARWIN_C_SOURCE = `enum _DARWIN_C_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DARWIN_C_SOURCE); }))) {
            mixin(enumMixinStr__DARWIN_C_SOURCE);
        }
    }
    
    #ifdef _FILE_OFFSET_BITS
    
    #endif
    static if(!is(typeof(_FILE_OFFSET_BITS))) {
        private enum enumMixinStr__FILE_OFFSET_BITS = `enum _FILE_OFFSET_BITS = 64;`;
        static if(is(typeof({ mixin(enumMixinStr__FILE_OFFSET_BITS); }))) {
            mixin(enumMixinStr__FILE_OFFSET_BITS);
        }
    }
    
    #ifdef _LARGEFILE_SOURCE
    
    #endif
    static if(!is(typeof(_LARGEFILE_SOURCE))) {
        private enum enumMixinStr__LARGEFILE_SOURCE = `enum _LARGEFILE_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LARGEFILE_SOURCE); }))) {
            mixin(enumMixinStr__LARGEFILE_SOURCE);
        }
    }
    
    #ifdef _NETBSD_SOURCE
    
    #endif
    static if(!is(typeof(_NETBSD_SOURCE))) {
        private enum enumMixinStr__NETBSD_SOURCE = `enum _NETBSD_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__NETBSD_SOURCE); }))) {
            mixin(enumMixinStr__NETBSD_SOURCE);
        }
    }
    
    #ifdef _PYTHONFRAMEWORK
    
    #endif
    static if(!is(typeof(_PYTHONFRAMEWORK))) {
        private enum enumMixinStr__PYTHONFRAMEWORK = `enum _PYTHONFRAMEWORK = "Python";`;
        static if(is(typeof({ mixin(enumMixinStr__PYTHONFRAMEWORK); }))) {
            mixin(enumMixinStr__PYTHONFRAMEWORK);
        }
    }
    
    #ifdef _REENTRANT
    
    #endif
    static if(!is(typeof(_REENTRANT))) {
        private enum enumMixinStr__REENTRANT = `enum _REENTRANT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__REENTRANT); }))) {
            mixin(enumMixinStr__REENTRANT);
        }
    }
    
    #ifdef __BSD_VISIBLE
    
    #endif
    static if(!is(typeof(__BSD_VISIBLE))) {
        private enum enumMixinStr___BSD_VISIBLE = `enum __BSD_VISIBLE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___BSD_VISIBLE); }))) {
            mixin(enumMixinStr___BSD_VISIBLE);
        }
    }
    
    #define PYCTYPE_H 

    


    static if(!is(typeof(PY_CTF_LOWER))) {
        private enum enumMixinStr_PY_CTF_LOWER = `enum PY_CTF_LOWER = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_LOWER); }))) {
            mixin(enumMixinStr_PY_CTF_LOWER);
        }
    }
    
    #ifdef PY_CTF_UPPER
    
    #endif
    static if(!is(typeof(PY_CTF_UPPER))) {
        private enum enumMixinStr_PY_CTF_UPPER = `enum PY_CTF_UPPER = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_UPPER); }))) {
            mixin(enumMixinStr_PY_CTF_UPPER);
        }
    }
    
    #ifdef PY_CTF_ALPHA
    
    #endif
    static if(!is(typeof(PY_CTF_ALPHA))) {
        private enum enumMixinStr_PY_CTF_ALPHA = `enum PY_CTF_ALPHA = ( 0x01 | 0x02 );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_ALPHA); }))) {
            mixin(enumMixinStr_PY_CTF_ALPHA);
        }
    }
    
    #ifdef PY_CTF_DIGIT
    
    #endif
    static if(!is(typeof(PY_CTF_DIGIT))) {
        private enum enumMixinStr_PY_CTF_DIGIT = `enum PY_CTF_DIGIT = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_DIGIT); }))) {
            mixin(enumMixinStr_PY_CTF_DIGIT);
        }
    }
    
    #ifdef PY_CTF_ALNUM
    
    #endif
    static if(!is(typeof(PY_CTF_ALNUM))) {
        private enum enumMixinStr_PY_CTF_ALNUM = `enum PY_CTF_ALNUM = ( ( 0x01 | 0x02 ) | 0x04 );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_ALNUM); }))) {
            mixin(enumMixinStr_PY_CTF_ALNUM);
        }
    }
    
    #ifdef PY_CTF_SPACE
    
    #endif
    static if(!is(typeof(PY_CTF_SPACE))) {
        private enum enumMixinStr_PY_CTF_SPACE = `enum PY_CTF_SPACE = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_SPACE); }))) {
            mixin(enumMixinStr_PY_CTF_SPACE);
        }
    }
    
    #ifdef PY_CTF_XDIGIT
    
    #endif
    static if(!is(typeof(PY_CTF_XDIGIT))) {
        private enum enumMixinStr_PY_CTF_XDIGIT = `enum PY_CTF_XDIGIT = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_CTF_XDIGIT); }))) {
            mixin(enumMixinStr_PY_CTF_XDIGIT);
        }
    }
    
    #define __API_DEPRECATED_MSG4( msg , x , y , z ) __API_DEPRECATED_MSG3 ( msg , x , y ) __API_D ( msg , z )

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__API_APPLY_TO))) {
        private enum enumMixinStr___API_APPLY_TO = `enum __API_APPLY_TO = any ( record , , enum_constant , function , objc_method , objc_category , objc_protocol , objc_interface , objc_property , type_alias , variable , field );`;
        static if(is(typeof({ mixin(enumMixinStr___API_APPLY_TO); }))) {
            mixin(enumMixinStr___API_APPLY_TO);
        }
    }
    
    #define __API_AVAILABLE_GET_MACRO( _1 , _2 , _3 , _4 , _5 , _6 , _7 , NAME , ... ) NAME

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = `enum __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = __attribute__ ( ( availability ( ios , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = `enum __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = __attribute__ ( ( availability ( ios , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA_MSG( _msg ) __attribute__ ( ( availability ( ios , unavailable ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = `enum __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = __attribute__ ( ( availability ( ios , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = `enum __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = __attribute__ ( ( availability ( ios , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__IPHONE_NA
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__IPHONE_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA = `enum __AVAILABILITY_INTERNAL__IPHONE_NA = __attribute__ ( ( availability ( ios , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__IPHONE_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , unavailable ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_NA
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_NA = __attribute__ ( ( availability ( macosx , unavailable ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_NA);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_15
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_15))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_15 = `enum __AVAILABILITY_INTERNAL__MAC_10_15 = __attribute__ ( ( availability ( macosx , introduced = 10.15 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_15); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_15);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = `enum __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = __attribute__ ( ( availability ( macosx , introduced = 10.14 , deprecated = 10.14 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_14
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_14))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_14 = `enum __AVAILABILITY_INTERNAL__MAC_10_14 = __attribute__ ( ( availability ( macosx , introduced = 10.14 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_14); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_14);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_13_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_13_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_13_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_13_4 = __attribute__ ( ( availability ( macosx , introduced = 10.13.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_13_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_13_4);
        }
    }
    
    #define _PyErr_OCCURRED( ) ( PyThreadState_GET ( ) . curexc_type )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.14 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.13.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.13 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.12 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.4 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.4 , deprecated = 10.12.4 , message = _msg ) ) )

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.12.4 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_4);
        }
    }
    
    #define PyExceptionInstance_Class( x ) ( cast( PyObject * ) ( ( x ) . ob_type ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.2 , deprecated = 10.12.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.12.2 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.2 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.12.2 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12_2
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.1 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.1 , deprecated = 10.12.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.12.1 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.1 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.12.1 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.12.1 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.12.1 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.11 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.4 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.11.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.3 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.11.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_3
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.11.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11_2
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.13.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.13 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.10 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.10.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_3
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.10.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10_2
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1);
        }
    }
    
    #define PyErr_BadInternalCall( ) _PyErr_BadInternalCall ( "source/python/raw.d.tmp" , 26626 )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.0 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.13 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.8 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.6 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.5 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.0 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = `enum __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = __attribute__ ( ( availability ( macosx , introduced = 10.0 , deprecated = 10.0 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_0
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_0))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0 = `enum __AVAILABILITY_INTERNAL__MAC_10_0 = __attribute__ ( ( availability ( macosx , introduced = 10.0 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_0);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.14 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3);
        }
    }
    
    #define Py_CPYTHON_ERRORS_H 

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.9 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_9
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA);
        }
    }
    
    #ifdef _PyHASH_MULTIPLIER
    
    #endif
    static if(!is(typeof(_PyHASH_MULTIPLIER))) {
        private enum enumMixinStr__PyHASH_MULTIPLIER = `enum _PyHASH_MULTIPLIER = 1000003UL;`;
        static if(is(typeof({ mixin(enumMixinStr__PyHASH_MULTIPLIER); }))) {
            mixin(enumMixinStr__PyHASH_MULTIPLIER);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(_PyHASH_BITS))) {
        private enum enumMixinStr__PyHASH_BITS = `enum _PyHASH_BITS = 61;`;
        static if(is(typeof({ mixin(enumMixinStr__PyHASH_BITS); }))) {
            mixin(enumMixinStr__PyHASH_BITS);
        }
    }
    
    #ifdef _PyHASH_MODULUS
    
    #endif
    static if(!is(typeof(_PyHASH_MODULUS))) {
        private enum enumMixinStr__PyHASH_MODULUS = `enum _PyHASH_MODULUS = ( ( cast( size_t ) 1 << 61 ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__PyHASH_MODULUS); }))) {
            mixin(enumMixinStr__PyHASH_MODULUS);
        }
    }
    
    #ifdef _PyHASH_INF
    
    #endif
    static if(!is(typeof(_PyHASH_INF))) {
        private enum enumMixinStr__PyHASH_INF = `enum _PyHASH_INF = 314159;`;
        static if(is(typeof({ mixin(enumMixinStr__PyHASH_INF); }))) {
            mixin(enumMixinStr__PyHASH_INF);
        }
    }
    
    #ifdef _PyHASH_NAN
    
    #endif
    static if(!is(typeof(_PyHASH_NAN))) {
        private enum enumMixinStr__PyHASH_NAN = `enum _PyHASH_NAN = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__PyHASH_NAN); }))) {
            mixin(enumMixinStr__PyHASH_NAN);
        }
    }
    
    #ifdef _PyHASH_IMAG
    
    #endif
    static if(!is(typeof(_PyHASH_IMAG))) {
        private enum enumMixinStr__PyHASH_IMAG = `enum _PyHASH_IMAG = 1000003UL;`;
        static if(is(typeof({ mixin(enumMixinStr__PyHASH_IMAG); }))) {
            mixin(enumMixinStr__PyHASH_IMAG);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.8 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(Py_HASH_CUTOFF))) {
        private enum enumMixinStr_Py_HASH_CUTOFF = `enum Py_HASH_CUTOFF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_HASH_CUTOFF); }))) {
            mixin(enumMixinStr_Py_HASH_CUTOFF);
        }
    }
    
    #ifdef Py_HASH_EXTERNAL
    
    #endif
    static if(!is(typeof(Py_HASH_EXTERNAL))) {
        private enum enumMixinStr_Py_HASH_EXTERNAL = `enum Py_HASH_EXTERNAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_HASH_EXTERNAL); }))) {
            mixin(enumMixinStr_Py_HASH_EXTERNAL);
        }
    }
    
    #ifdef Py_HASH_SIPHASH24
    
    #endif
    static if(!is(typeof(Py_HASH_SIPHASH24))) {
        private enum enumMixinStr_Py_HASH_SIPHASH24 = `enum Py_HASH_SIPHASH24 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_HASH_SIPHASH24); }))) {
            mixin(enumMixinStr_Py_HASH_SIPHASH24);
        }
    }
    
    #ifdef Py_HASH_FNV
    
    #endif
    static if(!is(typeof(Py_HASH_FNV))) {
        private enum enumMixinStr_Py_HASH_FNV = `enum Py_HASH_FNV = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_HASH_FNV); }))) {
            mixin(enumMixinStr_Py_HASH_FNV);
        }
    }
    
    #ifdef Py_HASH_ALGORITHM
    
    #endif
    static if(!is(typeof(Py_HASH_ALGORITHM))) {
        private enum enumMixinStr_Py_HASH_ALGORITHM = `enum Py_HASH_ALGORITHM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_HASH_ALGORITHM); }))) {
            mixin(enumMixinStr_Py_HASH_ALGORITHM);
        }
    }
    
    #define Py_PYLIFECYCLE_H 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.8 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_8
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.8 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.13.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.7 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_7
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.9 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9);
        }
    }
    
    #define PYMACCONFIG_H 

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(VA_LIST_IS_ARRAY))) {
        private enum enumMixinStr_VA_LIST_IS_ARRAY = `enum VA_LIST_IS_ARRAY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_VA_LIST_IS_ARRAY); }))) {
            mixin(enumMixinStr_VA_LIST_IS_ARRAY);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.6 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6);
        }
    }
    
    #define Py_PYMACRO_H 

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4);
        }
    }
    
    #define Py_ARRAY_LENGTH( array ) ( ( array ) .sizeof / ( ( array ) [ 0 ] ) .sizeof + Py_BUILD_ASSERT_EXPR ( ! __builtin_types_compatible_p ( typeof ( array ) , typeof ( & ( array ) [ 0 ] ) ) ) )

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.12.1 , message = _msg ) ) )

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4);
        }
    }
    
    #ifdef Py_MATH_PIl
    
    #endif
    static if(!is(typeof(Py_MATH_PIl))) {
        private enum enumMixinStr_Py_MATH_PIl = `enum Py_MATH_PIl = 3.1415926535897932384626433832795029L;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_MATH_PIl); }))) {
            mixin(enumMixinStr_Py_MATH_PIl);
        }
    }
    
    #ifdef Py_MATH_PI
    
    #endif
    static if(!is(typeof(Py_MATH_PI))) {
        private enum enumMixinStr_Py_MATH_PI = `enum Py_MATH_PI = 3.14159265358979323846;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_MATH_PI); }))) {
            mixin(enumMixinStr_Py_MATH_PI);
        }
    }
    
    #ifdef Py_MATH_El
    
    #endif
    static if(!is(typeof(Py_MATH_El))) {
        private enum enumMixinStr_Py_MATH_El = `enum Py_MATH_El = 2.7182818284590452353602874713526625L;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_MATH_El); }))) {
            mixin(enumMixinStr_Py_MATH_El);
        }
    }
    
    #ifdef Py_MATH_E
    
    #endif
    static if(!is(typeof(Py_MATH_E))) {
        private enum enumMixinStr_Py_MATH_E = `enum Py_MATH_E = 2.7182818284590452354;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_MATH_E); }))) {
            mixin(enumMixinStr_Py_MATH_E);
        }
    }
    
    #ifdef Py_MATH_TAU
    
    #endif
    static if(!is(typeof(Py_MATH_TAU))) {
        private enum enumMixinStr_Py_MATH_TAU = `enum Py_MATH_TAU = 6.2831853071795864769252867665590057683943L;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_MATH_TAU); }))) {
            mixin(enumMixinStr_Py_MATH_TAU);
        }
    }
    
    #define Py_FORCE_DOUBLE( X ) ( X )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3);
        }
    }
    
    #define Py_IS_NAN( X ) isnan ( X )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2);
        }
    }
    
    #define Py_IS_INFINITY( X ) isinf ( X )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(Py_HUGE_VAL))) {
        private enum enumMixinStr_Py_HUGE_VAL = `enum Py_HUGE_VAL = __builtin_huge_val ( );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_HUGE_VAL); }))) {
            mixin(enumMixinStr_Py_HUGE_VAL);
        }
    }
    
    #ifdef Py_NAN
    
    #endif
    static if(!is(typeof(Py_NAN))) {
        private enum enumMixinStr_Py_NAN = `enum Py_NAN = ( __builtin_huge_val ( ) * 0. );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_NAN); }))) {
            mixin(enumMixinStr_Py_NAN);
        }
    }
    
    #define Py_OVERFLOWED( X ) ( ( X ) != 0.0 && ( ( * __error ( ) ) == 34 || ( X ) == __builtin_huge_val ( ) || ( X ) == - __builtin_huge_val ( ) ) )

    

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.6 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_6
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_6);
        }
    }
    
    #define PyMem_MALLOC( n ) PyMem_Malloc ( n )

    

    

    

    

    

    

    


    static if(!is(typeof(PyMem_Del))) {
        private enum enumMixinStr_PyMem_Del = `enum PyMem_Del = PyMem_Free;`;
        static if(is(typeof({ mixin(enumMixinStr_PyMem_Del); }))) {
            mixin(enumMixinStr_PyMem_Del);
        }
    }
    
    #ifdef PyMem_DEL
    
    #endif
    static if(!is(typeof(PyMem_DEL))) {
        private enum enumMixinStr_PyMem_DEL = `enum PyMem_DEL = PyMem_FREE;`;
        static if(is(typeof({ mixin(enumMixinStr_PyMem_DEL); }))) {
            mixin(enumMixinStr_PyMem_DEL);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(_PyTraceMalloc_Config_INIT))) {
        private enum enumMixinStr__PyTraceMalloc_Config_INIT = `enum _PyTraceMalloc_Config_INIT = { . initialized = TRACEMALLOC_NOT_INITIALIZED , . tracing = 0 , . max_nframe = 1 , . use_domain = 0 };`;
        static if(is(typeof({ mixin(enumMixinStr__PyTraceMalloc_Config_INIT); }))) {
            mixin(enumMixinStr__PyTraceMalloc_Config_INIT);
        }
    }
    
    #define Py_CPYTHON_PYMEM_H 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9);
        }
    }
    
    #define Py_PYPORT_H 

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8);
        }
    }
    
    #ifdef HAVE_LONG_LONG
    
    #endif
    static if(!is(typeof(HAVE_LONG_LONG))) {
        private enum enumMixinStr_HAVE_LONG_LONG = `enum HAVE_LONG_LONG = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_HAVE_LONG_LONG); }))) {
            mixin(enumMixinStr_HAVE_LONG_LONG);
        }
    }
    
    #ifdef PY_LONG_LONG
    
    #endif
    static if(!is(typeof(PY_LONG_LONG))) {
        private enum enumMixinStr_PY_LONG_LONG = `enum PY_LONG_LONG = long long;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_LONG_LONG); }))) {
            mixin(enumMixinStr_PY_LONG_LONG);
        }
    }
    
    #ifdef PY_LLONG_MIN
    
    #endif
    static if(!is(typeof(PY_LLONG_MIN))) {
        private enum enumMixinStr_PY_LLONG_MIN = `enum PY_LLONG_MIN = ( - 9223372036854775807LL - 1LL );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_LLONG_MIN); }))) {
            mixin(enumMixinStr_PY_LLONG_MIN);
        }
    }
    
    #ifdef PY_LLONG_MAX
    
    #endif
    static if(!is(typeof(PY_LLONG_MAX))) {
        private enum enumMixinStr_PY_LLONG_MAX = `enum PY_LLONG_MAX = 9223372036854775807LL;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_LLONG_MAX); }))) {
            mixin(enumMixinStr_PY_LLONG_MAX);
        }
    }
    
    #ifdef PY_ULLONG_MAX
    
    #endif
    static if(!is(typeof(PY_ULLONG_MAX))) {
        private enum enumMixinStr_PY_ULLONG_MAX = `enum PY_ULLONG_MAX = ( 9223372036854775807LL * 2ULL + 1ULL );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_ULLONG_MAX); }))) {
            mixin(enumMixinStr_PY_ULLONG_MAX);
        }
    }
    
    #ifdef PY_UINT32_T
    
    #endif
    static if(!is(typeof(PY_UINT32_T))) {
        private enum enumMixinStr_PY_UINT32_T = `enum PY_UINT32_T = uint32_t;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_UINT32_T); }))) {
            mixin(enumMixinStr_PY_UINT32_T);
        }
    }
    
    #ifdef PY_UINT64_T
    
    #endif
    static if(!is(typeof(PY_UINT64_T))) {
        private enum enumMixinStr_PY_UINT64_T = `enum PY_UINT64_T = uint64_t;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_UINT64_T); }))) {
            mixin(enumMixinStr_PY_UINT64_T);
        }
    }
    
    #ifdef PY_INT32_T
    
    #endif
    static if(!is(typeof(PY_INT32_T))) {
        private enum enumMixinStr_PY_INT32_T = `enum PY_INT32_T = int32_t;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_INT32_T); }))) {
            mixin(enumMixinStr_PY_INT32_T);
        }
    }
    
    #ifdef PY_INT64_T
    
    #endif
    static if(!is(typeof(PY_INT64_T))) {
        private enum enumMixinStr_PY_INT64_T = `enum PY_INT64_T = int64_t;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_INT64_T); }))) {
            mixin(enumMixinStr_PY_INT64_T);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(PYLONG_BITS_IN_DIGIT))) {
        private enum enumMixinStr_PYLONG_BITS_IN_DIGIT = `enum PYLONG_BITS_IN_DIGIT = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_PYLONG_BITS_IN_DIGIT); }))) {
            mixin(enumMixinStr_PYLONG_BITS_IN_DIGIT);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.6 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.5 , message = _msg ) ) )

    


    static if(!is(typeof(SIZEOF_PY_HASH_T))) {
        private enum enumMixinStr_SIZEOF_PY_HASH_T = `enum SIZEOF_PY_HASH_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_PY_HASH_T); }))) {
            mixin(enumMixinStr_SIZEOF_PY_HASH_T);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5);
        }
    }
    
    #ifdef SIZEOF_PY_UHASH_T
    
    #endif
    static if(!is(typeof(SIZEOF_PY_UHASH_T))) {
        private enum enumMixinStr_SIZEOF_PY_UHASH_T = `enum SIZEOF_PY_UHASH_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIZEOF_PY_UHASH_T); }))) {
            mixin(enumMixinStr_SIZEOF_PY_UHASH_T);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(PY_SIZE_MAX))) {
        private enum enumMixinStr_PY_SIZE_MAX = `enum PY_SIZE_MAX = 18446744073709551615UL;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_SIZE_MAX); }))) {
            mixin(enumMixinStr_PY_SIZE_MAX);
        }
    }
    
    #ifdef PY_SSIZE_T_MAX
    
    #endif
    static if(!is(typeof(PY_SSIZE_T_MAX))) {
        private enum enumMixinStr_PY_SSIZE_T_MAX = `enum PY_SSIZE_T_MAX = ( cast( Py_ssize_t ) ( ( cast( size_t ) - 1 ) >> 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_SSIZE_T_MAX); }))) {
            mixin(enumMixinStr_PY_SSIZE_T_MAX);
        }
    }
    
    #ifdef PY_SSIZE_T_MIN
    
    #endif
    static if(!is(typeof(PY_SSIZE_T_MIN))) {
        private enum enumMixinStr_PY_SSIZE_T_MIN = `enum PY_SSIZE_T_MIN = ( - ( cast( Py_ssize_t ) ( ( cast( size_t ) - 1 ) >> 1 ) ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_SSIZE_T_MIN); }))) {
            mixin(enumMixinStr_PY_SSIZE_T_MIN);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1);
        }
    }
    
    #define Py_LOCAL( type ) static type

    

    


    static if(!is(typeof(Py_MEMCPY))) {
        private enum enumMixinStr_Py_MEMCPY = `enum Py_MEMCPY = memcpy;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_MEMCPY); }))) {
            mixin(enumMixinStr_Py_MEMCPY);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2);
        }
    }
    
    #define Py_ARITHMETIC_RIGHT_SHIFT( TYPE , I , J ) ( ( I ) >> ( J ) )

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.5 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.5.DEPRECATED..MAC.10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_5
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_5);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.8 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(_Py_NO_INLINE))) {
        private enum enumMixinStr__Py_NO_INLINE = `enum _Py_NO_INLINE = __attribute__ ( ( noinline ) );`;
        static if(is(typeof({ mixin(enumMixinStr__Py_NO_INLINE); }))) {
            mixin(enumMixinStr__Py_NO_INLINE);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7);
        }
    }
    
    #define _PY_PORT_CTYPE_UTF8_ISSUE 

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.5 , message = _msg ) ) )

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(PyMODINIT_FUNC))) {
        private enum enumMixinStr_PyMODINIT_FUNC = `enum PyMODINIT_FUNC = PyObject *;`;
        static if(is(typeof({ mixin(enumMixinStr_PyMODINIT_FUNC); }))) {
            mixin(enumMixinStr_PyMODINIT_FUNC);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12.1 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12);
        }
    }
    
    #define Py_ALIGNED( x ) __attribute__ ( ( aligned ( x ) ) )

    

    

    


    static if(!is(typeof(Py_VA_COPY))) {
        private enum enumMixinStr_Py_VA_COPY = `enum Py_VA_COPY = va_copy;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_VA_COPY); }))) {
            mixin(enumMixinStr_Py_VA_COPY);
        }
    }
    
    #ifdef PY_BIG_ENDIAN
    
    #endif
    static if(!is(typeof(PY_BIG_ENDIAN))) {
        private enum enumMixinStr_PY_BIG_ENDIAN = `enum PY_BIG_ENDIAN = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_BIG_ENDIAN); }))) {
            mixin(enumMixinStr_PY_BIG_ENDIAN);
        }
    }
    
    #ifdef PY_LITTLE_ENDIAN
    
    #endif
    static if(!is(typeof(PY_LITTLE_ENDIAN))) {
        private enum enumMixinStr_PY_LITTLE_ENDIAN = `enum PY_LITTLE_ENDIAN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr_PY_LITTLE_ENDIAN);
        }
    }
    
    #ifdef PY_DWORD_MAX
    
    #endif
    static if(!is(typeof(PY_DWORD_MAX))) {
        private enum enumMixinStr_PY_DWORD_MAX = `enum PY_DWORD_MAX = 4294967295U;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_DWORD_MAX); }))) {
            mixin(enumMixinStr_PY_DWORD_MAX);
        }
    }
    
    #define WITH_THREAD 

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(_Py_NO_RETURN))) {
        private enum enumMixinStr__Py_NO_RETURN = `enum _Py_NO_RETURN = __attribute__ ( ( __noreturn__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr__Py_NO_RETURN); }))) {
            mixin(enumMixinStr__Py_NO_RETURN);
        }
    }
    
    #define Py_PYSTATE_H 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef MAX_CO_EXTRA_USERS
    
    #endif
    static if(!is(typeof(MAX_CO_EXTRA_USERS))) {
        private enum enumMixinStr_MAX_CO_EXTRA_USERS = `enum MAX_CO_EXTRA_USERS = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_CO_EXTRA_USERS); }))) {
            mixin(enumMixinStr_MAX_CO_EXTRA_USERS);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.10 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.4 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_4
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_4 = __attribute__ ( ( availability ( macosx , introduced = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.8 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.6 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.5 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12.2 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.10 , message = _msg ) ) )

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3);
        }
    }
    
    #define Py_STRCMP_H 

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.3 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1);
        }
    }
    
    #ifdef PyOS_strnicmp
    
    #endif
    static if(!is(typeof(PyOS_strnicmp))) {
        private enum enumMixinStr_PyOS_strnicmp = `enum PyOS_strnicmp = PyOS_mystrnicmp;`;
        static if(is(typeof({ mixin(enumMixinStr_PyOS_strnicmp); }))) {
            mixin(enumMixinStr_PyOS_strnicmp);
        }
    }
    
    #ifdef PyOS_stricmp
    
    #endif
    static if(!is(typeof(PyOS_stricmp))) {
        private enum enumMixinStr_PyOS_stricmp = `enum PyOS_stricmp = PyOS_mystricmp;`;
        static if(is(typeof({ mixin(enumMixinStr_PyOS_stricmp); }))) {
            mixin(enumMixinStr_PyOS_stricmp);
        }
    }
    
    #define Py_STRTOD_H 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.8 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(Py_DTSF_SIGN))) {
        private enum enumMixinStr_Py_DTSF_SIGN = `enum Py_DTSF_SIGN = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_DTSF_SIGN); }))) {
            mixin(enumMixinStr_Py_DTSF_SIGN);
        }
    }
    
    #ifdef Py_DTSF_ADD_DOT_0
    
    #endif
    static if(!is(typeof(Py_DTSF_ADD_DOT_0))) {
        private enum enumMixinStr_Py_DTSF_ADD_DOT_0 = `enum Py_DTSF_ADD_DOT_0 = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_DTSF_ADD_DOT_0); }))) {
            mixin(enumMixinStr_Py_DTSF_ADD_DOT_0);
        }
    }
    
    #ifdef Py_DTSF_ALT
    
    #endif
    static if(!is(typeof(Py_DTSF_ALT))) {
        private enum enumMixinStr_Py_DTSF_ALT = `enum Py_DTSF_ALT = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_DTSF_ALT); }))) {
            mixin(enumMixinStr_Py_DTSF_ALT);
        }
    }
    
    #ifdef Py_DTST_FINITE
    
    #endif
    static if(!is(typeof(Py_DTST_FINITE))) {
        private enum enumMixinStr_Py_DTST_FINITE = `enum Py_DTST_FINITE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_DTST_FINITE); }))) {
            mixin(enumMixinStr_Py_DTST_FINITE);
        }
    }
    
    #ifdef Py_DTST_INFINITE
    
    #endif
    static if(!is(typeof(Py_DTST_INFINITE))) {
        private enum enumMixinStr_Py_DTST_INFINITE = `enum Py_DTST_INFINITE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_DTST_INFINITE); }))) {
            mixin(enumMixinStr_Py_DTST_INFINITE);
        }
    }
    
    #ifdef Py_DTST_NAN
    
    #endif
    static if(!is(typeof(Py_DTST_NAN))) {
        private enum enumMixinStr_Py_DTST_NAN = `enum Py_DTST_NAN = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_DTST_NAN); }))) {
            mixin(enumMixinStr_Py_DTST_NAN);
        }
    }
    
    #define Py_PYTHONRUN_H 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.6 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.5 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.13 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12);
        }
    }
    
    #define PyParser_SimpleParseString( S , B ) PyParser_SimpleParseStringFlags ( S , B , 0 )

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.10 , message = _msg ) ) )

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.2 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_2
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = __attribute__ ( ( availability ( macosx , introduced = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.9 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.9 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.8 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.8 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.7 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.7 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.6 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.6 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.5 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.5 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.4 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.1 , message = _msg ) ) )

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.12.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.12.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.12.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.12.1 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.12.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.12 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11 , message = _msg ) ) )

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11.4 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11.3 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.11 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.10 , message = _msg ) ) )

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.10.3 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2_MSG( _msg ) __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.10.2 , message = _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.10.2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.10 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10);
        }
    }
    
    #ifdef __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1
    
    #endif
    static if(!is(typeof(__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = `enum __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = __attribute__ ( ( availability ( macosx , introduced = 10.1 , deprecated = 10.1 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1);
        }
    }
    
    #ifdef __ENABLE_LEGACY_MAC_AVAILABILITY
    
    #endif
    static if(!is(typeof(__ENABLE_LEGACY_MAC_AVAILABILITY))) {
        private enum enumMixinStr___ENABLE_LEGACY_MAC_AVAILABILITY = `enum __ENABLE_LEGACY_MAC_AVAILABILITY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___ENABLE_LEGACY_MAC_AVAILABILITY); }))) {
            mixin(enumMixinStr___ENABLE_LEGACY_MAC_AVAILABILITY);
        }
    }
    
    #define __AVAILABILITY_INTERNAL_REGULAR 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL_WEAK_IMPORT))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL_WEAK_IMPORT = `enum __AVAILABILITY_INTERNAL_WEAK_IMPORT = __attribute__ ( ( weak_import ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL_WEAK_IMPORT); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL_WEAK_IMPORT);
        }
    }
    
    #ifdef PYOS_STACK_MARGIN
    
    #endif
    static if(!is(typeof(PYOS_STACK_MARGIN))) {
        private enum enumMixinStr_PYOS_STACK_MARGIN = `enum PYOS_STACK_MARGIN = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_PYOS_STACK_MARGIN); }))) {
            mixin(enumMixinStr_PYOS_STACK_MARGIN);
        }
    }
    
    #define Py_PYTHREAD_H 

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL_UNAVAILABLE))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL_UNAVAILABLE = `enum __AVAILABILITY_INTERNAL_UNAVAILABLE = __attribute__ ( ( unavailable ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL_UNAVAILABLE); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL_UNAVAILABLE);
        }
    }
    
    #define __AVAILABILITY_INTERNAL_DEPRECATED_MSG( _msg ) __attribute__ ( ( deprecated ( _msg ) ) )

    


    static if(!is(typeof(__AVAILABILITY_INTERNAL_DEPRECATED))) {
        private enum enumMixinStr___AVAILABILITY_INTERNAL_DEPRECATED = `enum __AVAILABILITY_INTERNAL_DEPRECATED = __attribute__ ( ( deprecated ) );`;
        static if(is(typeof({ mixin(enumMixinStr___AVAILABILITY_INTERNAL_DEPRECATED); }))) {
            mixin(enumMixinStr___AVAILABILITY_INTERNAL_DEPRECATED);
        }
    }
    
    #ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
    
    #endif
    static if(!is(typeof(__MAC_OS_X_VERSION_MAX_ALLOWED))) {
        private enum enumMixinStr___MAC_OS_X_VERSION_MAX_ALLOWED = `enum __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_10_15;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_OS_X_VERSION_MAX_ALLOWED); }))) {
            mixin(enumMixinStr___MAC_OS_X_VERSION_MAX_ALLOWED);
        }
    }
    
    #ifdef PYTHREAD_INVALID_THREAD_ID
    
    #endif
    static if(!is(typeof(PYTHREAD_INVALID_THREAD_ID))) {
        private enum enumMixinStr_PYTHREAD_INVALID_THREAD_ID = `enum PYTHREAD_INVALID_THREAD_ID = ( ( unsigned long ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_PYTHREAD_INVALID_THREAD_ID); }))) {
            mixin(enumMixinStr_PYTHREAD_INVALID_THREAD_ID);
        }
    }
    
    #ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
    
    #endif
    static if(!is(typeof(__MAC_OS_X_VERSION_MIN_REQUIRED))) {
        private enum enumMixinStr___MAC_OS_X_VERSION_MIN_REQUIRED = `enum __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_OS_X_VERSION_MIN_REQUIRED); }))) {
            mixin(enumMixinStr___MAC_OS_X_VERSION_MIN_REQUIRED);
        }
    }
    
    #define __AVAILABILITY_INTERNAL__ 

    

    

    


    static if(!is(typeof(__API_UNAVAILABLE_END))) {
        private enum enumMixinStr___API_UNAVAILABLE_END = `enum __API_UNAVAILABLE_END =  ( "clang attribute pop" );`;
        static if(is(typeof({ mixin(enumMixinStr___API_UNAVAILABLE_END); }))) {
            mixin(enumMixinStr___API_UNAVAILABLE_END);
        }
    }
    
    #define __API_UNAVAILABLE_BEGIN( ... )  ( "clang attribute push" ) __API_UNAVAILABLE_BEGIN_GET_MACRO ( __VA_ARGS__ , __API_UNAVAILABLE_BEGIN7 , __API_UNAVAILABLE_BEGIN6 , __API_UNAVAILABLE_BEGIN5 , __API_UNAVAILABLE_BEGIN4 , __API_UNAVAILABLE_BEGIN3 , __API_UNAVAILABLE_BEGIN2 , __API_UNAVAILABLE_BEGIN1 , 0 ) ( __VA_ARGS__ )

    

    


    static if(!is(typeof(__API_DEPRECATED_WITH_REPLACEMENT_END))) {
        private enum enumMixinStr___API_DEPRECATED_WITH_REPLACEMENT_END = `enum __API_DEPRECATED_WITH_REPLACEMENT_END =  ( "clang attribute pop" );`;
        static if(is(typeof({ mixin(enumMixinStr___API_DEPRECATED_WITH_REPLACEMENT_END); }))) {
            mixin(enumMixinStr___API_DEPRECATED_WITH_REPLACEMENT_END);
        }
    }
    
    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN( ... )  ( "clang attribute push" ) __API_DEPRECATED_BEGIN_REP_GET_MACRO ( __VA_ARGS__ , __API_DEPRECATED_BEGIN_REP8 , __API_DEPRECATED_BEGIN_REP7 , __API_DEPRECATED_BEGIN_REP6 , __API_DEPRECATED_BEGIN_REP5 , __API_DEPRECATED_BEGIN_REP4 , __API_DEPRECATED_BEGIN_REP3 , __API_DEPRECATED_BEGIN_REP2 , __API_DEPRECATED_BEGIN_REP1 , 0 ) ( __VA_ARGS__ )

    


    static if(!is(typeof(__API_DEPRECATED_END))) {
        private enum enumMixinStr___API_DEPRECATED_END = `enum __API_DEPRECATED_END =  ( "clang attribute pop" );`;
        static if(is(typeof({ mixin(enumMixinStr___API_DEPRECATED_END); }))) {
            mixin(enumMixinStr___API_DEPRECATED_END);
        }
    }
    
    #define PY_HAVE_THREAD_NATIVE_ID 

    

    

    

    


    static if(!is(typeof(__API_AVAILABLE_END))) {
        private enum enumMixinStr___API_AVAILABLE_END = `enum __API_AVAILABLE_END =  ( "clang attribute pop" );`;
        static if(is(typeof({ mixin(enumMixinStr___API_AVAILABLE_END); }))) {
            mixin(enumMixinStr___API_AVAILABLE_END);
        }
    }
    
    #define __API_AVAILABLE_BEGIN( ... )  ( "clang attribute push" ) __API_AVAILABLE_BEGIN_GET_MACRO ( __VA_ARGS__ , __API_AVAILABLE_BEGIN7 , __API_AVAILABLE_BEGIN6 , __API_AVAILABLE_BEGIN5 , __API_AVAILABLE_BEGIN4 , __API_AVAILABLE_BEGIN3 , __API_AVAILABLE_BEGIN2 , __API_AVAILABLE_BEGIN1 , 0 ) ( __VA_ARGS__ )

    

    

    


    static if(!is(typeof(__SWIFT_UNAVAILABLE))) {
        private enum enumMixinStr___SWIFT_UNAVAILABLE = `enum __SWIFT_UNAVAILABLE = __OS_AVAILABILITY ( swift , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___SWIFT_UNAVAILABLE); }))) {
            mixin(enumMixinStr___SWIFT_UNAVAILABLE);
        }
    }
    
    #ifdef WAIT_LOCK
    
    #endif
    static if(!is(typeof(WAIT_LOCK))) {
        private enum enumMixinStr_WAIT_LOCK = `enum WAIT_LOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WAIT_LOCK); }))) {
            mixin(enumMixinStr_WAIT_LOCK);
        }
    }
    
    #ifdef NOWAIT_LOCK
    
    #endif
    static if(!is(typeof(NOWAIT_LOCK))) {
        private enum enumMixinStr_NOWAIT_LOCK = `enum NOWAIT_LOCK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_NOWAIT_LOCK); }))) {
            mixin(enumMixinStr_NOWAIT_LOCK);
        }
    }
    
    #ifdef PY_TIMEOUT_T
    
    #endif
    static if(!is(typeof(PY_TIMEOUT_T))) {
        private enum enumMixinStr_PY_TIMEOUT_T = `enum PY_TIMEOUT_T = long long;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_TIMEOUT_T); }))) {
            mixin(enumMixinStr_PY_TIMEOUT_T);
        }
    }
    
    #define __WATCHOS_DEPRECATED( _start , _dep , _msg ) __WATCHOS_AVAILABLE ( _start ) __OS_AVAILABILITY_MSG ( watchos , deprecated = _dep , _msg )

    


    static if(!is(typeof(PY_TIMEOUT_MAX))) {
        private enum enumMixinStr_PY_TIMEOUT_MAX = `enum PY_TIMEOUT_MAX = ( 9223372036854775807LL / 1000 );`;
        static if(is(typeof({ mixin(enumMixinStr_PY_TIMEOUT_MAX); }))) {
            mixin(enumMixinStr_PY_TIMEOUT_MAX);
        }
    }
    
    #define __WATCHOS_AVAILABLE( _vers ) __OS_AVAILABILITY ( watchos , introduced = _vers )

    


    static if(!is(typeof(__WATCHOS_PROHIBITED))) {
        private enum enumMixinStr___WATCHOS_PROHIBITED = `enum __WATCHOS_PROHIBITED = __OS_AVAILABILITY ( watchos , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_PROHIBITED); }))) {
            mixin(enumMixinStr___WATCHOS_PROHIBITED);
        }
    }
    
    #ifdef __WATCHOS_UNAVAILABLE
    
    #endif
    static if(!is(typeof(__WATCHOS_UNAVAILABLE))) {
        private enum enumMixinStr___WATCHOS_UNAVAILABLE = `enum __WATCHOS_UNAVAILABLE = __OS_AVAILABILITY ( watchos , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_UNAVAILABLE); }))) {
            mixin(enumMixinStr___WATCHOS_UNAVAILABLE);
        }
    }
    
    #define __TVOS_DEPRECATED( _start , _dep , _msg ) __TVOS_AVAILABLE ( _start ) __OS_AVAILABILITY_MSG ( tvos , deprecated = _dep , _msg )

    

    


    static if(!is(typeof(__TVOS_PROHIBITED))) {
        private enum enumMixinStr___TVOS_PROHIBITED = `enum __TVOS_PROHIBITED = __OS_AVAILABILITY ( tvos , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_PROHIBITED); }))) {
            mixin(enumMixinStr___TVOS_PROHIBITED);
        }
    }
    
    #ifdef __TVOS_UNAVAILABLE
    
    #endif
    static if(!is(typeof(__TVOS_UNAVAILABLE))) {
        private enum enumMixinStr___TVOS_UNAVAILABLE = `enum __TVOS_UNAVAILABLE = __OS_AVAILABILITY ( tvos , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_UNAVAILABLE); }))) {
            mixin(enumMixinStr___TVOS_UNAVAILABLE);
        }
    }
    
    #define __IOS_DEPRECATED( _start , _dep , _msg ) __IOS_AVAILABLE ( _start ) __OS_AVAILABILITY_MSG ( ios , deprecated = _dep , _msg )

    

    


    static if(!is(typeof(__IOS_PROHIBITED))) {
        private enum enumMixinStr___IOS_PROHIBITED = `enum __IOS_PROHIBITED = __OS_AVAILABILITY ( ios , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___IOS_PROHIBITED); }))) {
            mixin(enumMixinStr___IOS_PROHIBITED);
        }
    }
    
    #ifdef __IOS_UNAVAILABLE
    
    #endif
    static if(!is(typeof(__IOS_UNAVAILABLE))) {
        private enum enumMixinStr___IOS_UNAVAILABLE = `enum __IOS_UNAVAILABLE = __OS_AVAILABILITY ( ios , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___IOS_UNAVAILABLE); }))) {
            mixin(enumMixinStr___IOS_UNAVAILABLE);
        }
    }
    
    #define __OSX_DEPRECATED( _start , _dep , _msg ) __OSX_AVAILABLE ( _start ) __OS_AVAILABILITY_MSG ( macosx , deprecated = _dep , _msg )

    

    


    static if(!is(typeof(__OSX_UNAVAILABLE))) {
        private enum enumMixinStr___OSX_UNAVAILABLE = `enum __OSX_UNAVAILABLE = __OS_AVAILABILITY ( macosx , unavailable );`;
        static if(is(typeof({ mixin(enumMixinStr___OSX_UNAVAILABLE); }))) {
            mixin(enumMixinStr___OSX_UNAVAILABLE);
        }
    }
    
    #define __OS_EXTENSION_UNAVAILABLE( _msg ) __OSX_EXTENSION_UNAVAILABLE ( _msg ) __IOS_EXTENSION_UNAVAILABLE ( _msg )

    

    

    

    

    

    

    

    


    static if(!is(typeof(__DRIVERKIT_19_0))) {
        private enum enumMixinStr___DRIVERKIT_19_0 = `enum __DRIVERKIT_19_0 = 190000;`;
        static if(is(typeof({ mixin(enumMixinStr___DRIVERKIT_19_0); }))) {
            mixin(enumMixinStr___DRIVERKIT_19_0);
        }
    }
    
    #ifdef __WATCHOS_6_2
    
    #endif
    static if(!is(typeof(__WATCHOS_6_2))) {
        private enum enumMixinStr___WATCHOS_6_2 = `enum __WATCHOS_6_2 = 60200;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_6_2); }))) {
            mixin(enumMixinStr___WATCHOS_6_2);
        }
    }
    
    #ifdef __WATCHOS_6_1
    
    #endif
    static if(!is(typeof(__WATCHOS_6_1))) {
        private enum enumMixinStr___WATCHOS_6_1 = `enum __WATCHOS_6_1 = 60100;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_6_1); }))) {
            mixin(enumMixinStr___WATCHOS_6_1);
        }
    }
    
    #ifdef __WATCHOS_6_0
    
    #endif
    static if(!is(typeof(__WATCHOS_6_0))) {
        private enum enumMixinStr___WATCHOS_6_0 = `enum __WATCHOS_6_0 = 60000;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_6_0); }))) {
            mixin(enumMixinStr___WATCHOS_6_0);
        }
    }
    
    #ifdef __WATCHOS_5_2
    
    #endif
    static if(!is(typeof(__WATCHOS_5_2))) {
        private enum enumMixinStr___WATCHOS_5_2 = `enum __WATCHOS_5_2 = 50200;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_5_2); }))) {
            mixin(enumMixinStr___WATCHOS_5_2);
        }
    }
    
    #ifdef __WATCHOS_5_1
    
    #endif
    static if(!is(typeof(__WATCHOS_5_1))) {
        private enum enumMixinStr___WATCHOS_5_1 = `enum __WATCHOS_5_1 = 50100;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_5_1); }))) {
            mixin(enumMixinStr___WATCHOS_5_1);
        }
    }
    
    #ifdef __WATCHOS_5_0
    
    #endif
    static if(!is(typeof(__WATCHOS_5_0))) {
        private enum enumMixinStr___WATCHOS_5_0 = `enum __WATCHOS_5_0 = 50000;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_5_0); }))) {
            mixin(enumMixinStr___WATCHOS_5_0);
        }
    }
    
    #ifdef __WATCHOS_4_3
    
    #endif
    static if(!is(typeof(__WATCHOS_4_3))) {
        private enum enumMixinStr___WATCHOS_4_3 = `enum __WATCHOS_4_3 = 40300;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_4_3); }))) {
            mixin(enumMixinStr___WATCHOS_4_3);
        }
    }
    
    #ifdef __WATCHOS_4_2
    
    #endif
    static if(!is(typeof(__WATCHOS_4_2))) {
        private enum enumMixinStr___WATCHOS_4_2 = `enum __WATCHOS_4_2 = 40200;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_4_2); }))) {
            mixin(enumMixinStr___WATCHOS_4_2);
        }
    }
    
    #ifdef __WATCHOS_4_1
    
    #endif
    static if(!is(typeof(__WATCHOS_4_1))) {
        private enum enumMixinStr___WATCHOS_4_1 = `enum __WATCHOS_4_1 = 40100;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_4_1); }))) {
            mixin(enumMixinStr___WATCHOS_4_1);
        }
    }
    
    #ifdef __WATCHOS_4_0
    
    #endif
    static if(!is(typeof(__WATCHOS_4_0))) {
        private enum enumMixinStr___WATCHOS_4_0 = `enum __WATCHOS_4_0 = 40000;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_4_0); }))) {
            mixin(enumMixinStr___WATCHOS_4_0);
        }
    }
    
    #ifdef NATIVE_TSS_KEY_T
    
    #endif
    static if(!is(typeof(NATIVE_TSS_KEY_T))) {
        private enum enumMixinStr_NATIVE_TSS_KEY_T = `enum NATIVE_TSS_KEY_T = pthread_key_t;`;
        static if(is(typeof({ mixin(enumMixinStr_NATIVE_TSS_KEY_T); }))) {
            mixin(enumMixinStr_NATIVE_TSS_KEY_T);
        }
    }
    
    #ifdef __WATCHOS_3_2
    
    #endif
    static if(!is(typeof(__WATCHOS_3_2))) {
        private enum enumMixinStr___WATCHOS_3_2 = `enum __WATCHOS_3_2 = 30200;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_3_2); }))) {
            mixin(enumMixinStr___WATCHOS_3_2);
        }
    }
    
    #ifdef Py_tss_NEEDS_INIT
    
    #endif
    static if(!is(typeof(Py_tss_NEEDS_INIT))) {
        private enum enumMixinStr_Py_tss_NEEDS_INIT = `enum Py_tss_NEEDS_INIT = { 0 };`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tss_NEEDS_INIT); }))) {
            mixin(enumMixinStr_Py_tss_NEEDS_INIT);
        }
    }
    
    #ifdef __WATCHOS_3_1_1
    
    #endif
    static if(!is(typeof(__WATCHOS_3_1_1))) {
        private enum enumMixinStr___WATCHOS_3_1_1 = `enum __WATCHOS_3_1_1 = 30101;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_3_1_1); }))) {
            mixin(enumMixinStr___WATCHOS_3_1_1);
        }
    }
    
    #ifdef __WATCHOS_3_1
    
    #endif
    static if(!is(typeof(__WATCHOS_3_1))) {
        private enum enumMixinStr___WATCHOS_3_1 = `enum __WATCHOS_3_1 = 30100;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_3_1); }))) {
            mixin(enumMixinStr___WATCHOS_3_1);
        }
    }
    
    #ifdef __WATCHOS_3_0
    
    #endif
    static if(!is(typeof(__WATCHOS_3_0))) {
        private enum enumMixinStr___WATCHOS_3_0 = `enum __WATCHOS_3_0 = 30000;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_3_0); }))) {
            mixin(enumMixinStr___WATCHOS_3_0);
        }
    }
    
    #ifdef __WATCHOS_2_2
    
    #endif
    static if(!is(typeof(__WATCHOS_2_2))) {
        private enum enumMixinStr___WATCHOS_2_2 = `enum __WATCHOS_2_2 = 20200;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_2_2); }))) {
            mixin(enumMixinStr___WATCHOS_2_2);
        }
    }
    
    #ifdef __WATCHOS_2_1
    
    #endif
    static if(!is(typeof(__WATCHOS_2_1))) {
        private enum enumMixinStr___WATCHOS_2_1 = `enum __WATCHOS_2_1 = 20100;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_2_1); }))) {
            mixin(enumMixinStr___WATCHOS_2_1);
        }
    }
    
    #ifdef __WATCHOS_2_0
    
    #endif
    static if(!is(typeof(__WATCHOS_2_0))) {
        private enum enumMixinStr___WATCHOS_2_0 = `enum __WATCHOS_2_0 = 20000;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_2_0); }))) {
            mixin(enumMixinStr___WATCHOS_2_0);
        }
    }
    
    #ifdef __WATCHOS_1_0
    
    #endif
    static if(!is(typeof(__WATCHOS_1_0))) {
        private enum enumMixinStr___WATCHOS_1_0 = `enum __WATCHOS_1_0 = 10000;`;
        static if(is(typeof({ mixin(enumMixinStr___WATCHOS_1_0); }))) {
            mixin(enumMixinStr___WATCHOS_1_0);
        }
    }
    
    #ifdef __TVOS_13_4
    
    #endif
    static if(!is(typeof(__TVOS_13_4))) {
        private enum enumMixinStr___TVOS_13_4 = `enum __TVOS_13_4 = 130400;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_13_4); }))) {
            mixin(enumMixinStr___TVOS_13_4);
        }
    }
    
    #ifdef __TVOS_13_3
    
    #endif
    static if(!is(typeof(__TVOS_13_3))) {
        private enum enumMixinStr___TVOS_13_3 = `enum __TVOS_13_3 = 130300;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_13_3); }))) {
            mixin(enumMixinStr___TVOS_13_3);
        }
    }
    
    #ifdef __TVOS_13_2
    
    #endif
    static if(!is(typeof(__TVOS_13_2))) {
        private enum enumMixinStr___TVOS_13_2 = `enum __TVOS_13_2 = 130200;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_13_2); }))) {
            mixin(enumMixinStr___TVOS_13_2);
        }
    }
    
    #ifdef __TVOS_13_0
    
    #endif
    static if(!is(typeof(__TVOS_13_0))) {
        private enum enumMixinStr___TVOS_13_0 = `enum __TVOS_13_0 = 130000;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_13_0); }))) {
            mixin(enumMixinStr___TVOS_13_0);
        }
    }
    
    #ifdef __TVOS_12_3
    
    #endif
    static if(!is(typeof(__TVOS_12_3))) {
        private enum enumMixinStr___TVOS_12_3 = `enum __TVOS_12_3 = 120300;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_12_3); }))) {
            mixin(enumMixinStr___TVOS_12_3);
        }
    }
    
    #ifdef __TVOS_12_2
    
    #endif
    static if(!is(typeof(__TVOS_12_2))) {
        private enum enumMixinStr___TVOS_12_2 = `enum __TVOS_12_2 = 120200;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_12_2); }))) {
            mixin(enumMixinStr___TVOS_12_2);
        }
    }
    
    #ifdef __TVOS_12_1
    
    #endif
    static if(!is(typeof(__TVOS_12_1))) {
        private enum enumMixinStr___TVOS_12_1 = `enum __TVOS_12_1 = 120100;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_12_1); }))) {
            mixin(enumMixinStr___TVOS_12_1);
        }
    }
    
    #define Py_PYTIME_H 

    


    static if(!is(typeof(__TVOS_12_0))) {
        private enum enumMixinStr___TVOS_12_0 = `enum __TVOS_12_0 = 120000;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_12_0); }))) {
            mixin(enumMixinStr___TVOS_12_0);
        }
    }
    
    #ifdef __TVOS_11_4
    
    #endif
    static if(!is(typeof(__TVOS_11_4))) {
        private enum enumMixinStr___TVOS_11_4 = `enum __TVOS_11_4 = 110400;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_11_4); }))) {
            mixin(enumMixinStr___TVOS_11_4);
        }
    }
    
    #ifdef __TVOS_11_3
    
    #endif
    static if(!is(typeof(__TVOS_11_3))) {
        private enum enumMixinStr___TVOS_11_3 = `enum __TVOS_11_3 = 110300;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_11_3); }))) {
            mixin(enumMixinStr___TVOS_11_3);
        }
    }
    
    #ifdef _PyTime_MIN
    
    #endif
    static if(!is(typeof(_PyTime_MIN))) {
        private enum enumMixinStr__PyTime_MIN = `enum _PyTime_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__PyTime_MIN); }))) {
            mixin(enumMixinStr__PyTime_MIN);
        }
    }
    
    #ifdef _PyTime_MAX
    
    #endif
    static if(!is(typeof(_PyTime_MAX))) {
        private enum enumMixinStr__PyTime_MAX = `enum _PyTime_MAX = 9223372036854775807L;`;
        static if(is(typeof({ mixin(enumMixinStr__PyTime_MAX); }))) {
            mixin(enumMixinStr__PyTime_MAX);
        }
    }
    
    #ifdef __TVOS_11_2
    
    #endif
    static if(!is(typeof(__TVOS_11_2))) {
        private enum enumMixinStr___TVOS_11_2 = `enum __TVOS_11_2 = 110200;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_11_2); }))) {
            mixin(enumMixinStr___TVOS_11_2);
        }
    }
    
    #ifdef __TVOS_11_1
    
    #endif
    static if(!is(typeof(__TVOS_11_1))) {
        private enum enumMixinStr___TVOS_11_1 = `enum __TVOS_11_1 = 110100;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_11_1); }))) {
            mixin(enumMixinStr___TVOS_11_1);
        }
    }
    
    #ifdef __TVOS_11_0
    
    #endif
    static if(!is(typeof(__TVOS_11_0))) {
        private enum enumMixinStr___TVOS_11_0 = `enum __TVOS_11_0 = 110000;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_11_0); }))) {
            mixin(enumMixinStr___TVOS_11_0);
        }
    }
    
    #ifdef __TVOS_10_2
    
    #endif
    static if(!is(typeof(__TVOS_10_2))) {
        private enum enumMixinStr___TVOS_10_2 = `enum __TVOS_10_2 = 100200;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_10_2); }))) {
            mixin(enumMixinStr___TVOS_10_2);
        }
    }
    
    #ifdef __TVOS_10_1
    
    #endif
    static if(!is(typeof(__TVOS_10_1))) {
        private enum enumMixinStr___TVOS_10_1 = `enum __TVOS_10_1 = 100100;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_10_1); }))) {
            mixin(enumMixinStr___TVOS_10_1);
        }
    }
    
    #ifdef __TVOS_10_0_1
    
    #endif
    static if(!is(typeof(__TVOS_10_0_1))) {
        private enum enumMixinStr___TVOS_10_0_1 = `enum __TVOS_10_0_1 = 100001;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_10_0_1); }))) {
            mixin(enumMixinStr___TVOS_10_0_1);
        }
    }
    
    #ifdef __TVOS_10_0
    
    #endif
    static if(!is(typeof(__TVOS_10_0))) {
        private enum enumMixinStr___TVOS_10_0 = `enum __TVOS_10_0 = 100000;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_10_0); }))) {
            mixin(enumMixinStr___TVOS_10_0);
        }
    }
    
    #ifdef __TVOS_9_2
    
    #endif
    static if(!is(typeof(__TVOS_9_2))) {
        private enum enumMixinStr___TVOS_9_2 = `enum __TVOS_9_2 = 90200;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_9_2); }))) {
            mixin(enumMixinStr___TVOS_9_2);
        }
    }
    
    #ifdef __TVOS_9_1
    
    #endif
    static if(!is(typeof(__TVOS_9_1))) {
        private enum enumMixinStr___TVOS_9_1 = `enum __TVOS_9_1 = 90100;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_9_1); }))) {
            mixin(enumMixinStr___TVOS_9_1);
        }
    }
    
    #ifdef __TVOS_9_0
    
    #endif
    static if(!is(typeof(__TVOS_9_0))) {
        private enum enumMixinStr___TVOS_9_0 = `enum __TVOS_9_0 = 90000;`;
        static if(is(typeof({ mixin(enumMixinStr___TVOS_9_0); }))) {
            mixin(enumMixinStr___TVOS_9_0);
        }
    }
    
    #ifdef __IPHONE_13_6
    
    #endif
    static if(!is(typeof(__IPHONE_13_6))) {
        private enum enumMixinStr___IPHONE_13_6 = `enum __IPHONE_13_6 = 130600;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_6); }))) {
            mixin(enumMixinStr___IPHONE_13_6);
        }
    }
    
    #ifdef __IPHONE_13_5
    
    #endif
    static if(!is(typeof(__IPHONE_13_5))) {
        private enum enumMixinStr___IPHONE_13_5 = `enum __IPHONE_13_5 = 130500;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_5); }))) {
            mixin(enumMixinStr___IPHONE_13_5);
        }
    }
    
    #ifdef __IPHONE_13_4
    
    #endif
    static if(!is(typeof(__IPHONE_13_4))) {
        private enum enumMixinStr___IPHONE_13_4 = `enum __IPHONE_13_4 = 130400;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_4); }))) {
            mixin(enumMixinStr___IPHONE_13_4);
        }
    }
    
    #ifdef __IPHONE_13_3
    
    #endif
    static if(!is(typeof(__IPHONE_13_3))) {
        private enum enumMixinStr___IPHONE_13_3 = `enum __IPHONE_13_3 = 130300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_3); }))) {
            mixin(enumMixinStr___IPHONE_13_3);
        }
    }
    
    #define _PYTIME_FROMSECONDS( seconds ) ( cast( _PyTime_t ) ( seconds ) * ( 1000 * 1000 * 1000 ) )

    


    static if(!is(typeof(__IPHONE_13_2))) {
        private enum enumMixinStr___IPHONE_13_2 = `enum __IPHONE_13_2 = 130200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_2); }))) {
            mixin(enumMixinStr___IPHONE_13_2);
        }
    }
    
    #ifdef __IPHONE_13_1
    
    #endif
    static if(!is(typeof(__IPHONE_13_1))) {
        private enum enumMixinStr___IPHONE_13_1 = `enum __IPHONE_13_1 = 130100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_1); }))) {
            mixin(enumMixinStr___IPHONE_13_1);
        }
    }
    
    #ifdef __IPHONE_13_0
    
    #endif
    static if(!is(typeof(__IPHONE_13_0))) {
        private enum enumMixinStr___IPHONE_13_0 = `enum __IPHONE_13_0 = 130000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_13_0); }))) {
            mixin(enumMixinStr___IPHONE_13_0);
        }
    }
    
    #ifdef __IPHONE_12_3
    
    #endif
    static if(!is(typeof(__IPHONE_12_3))) {
        private enum enumMixinStr___IPHONE_12_3 = `enum __IPHONE_12_3 = 120300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_12_3); }))) {
            mixin(enumMixinStr___IPHONE_12_3);
        }
    }
    
    #ifdef __IPHONE_12_2
    
    #endif
    static if(!is(typeof(__IPHONE_12_2))) {
        private enum enumMixinStr___IPHONE_12_2 = `enum __IPHONE_12_2 = 120200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_12_2); }))) {
            mixin(enumMixinStr___IPHONE_12_2);
        }
    }
    
    #ifdef __IPHONE_12_1
    
    #endif
    static if(!is(typeof(__IPHONE_12_1))) {
        private enum enumMixinStr___IPHONE_12_1 = `enum __IPHONE_12_1 = 120100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_12_1); }))) {
            mixin(enumMixinStr___IPHONE_12_1);
        }
    }
    
    #ifdef __IPHONE_12_0
    
    #endif
    static if(!is(typeof(__IPHONE_12_0))) {
        private enum enumMixinStr___IPHONE_12_0 = `enum __IPHONE_12_0 = 120000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_12_0); }))) {
            mixin(enumMixinStr___IPHONE_12_0);
        }
    }
    
    #ifdef __IPHONE_11_4
    
    #endif
    static if(!is(typeof(__IPHONE_11_4))) {
        private enum enumMixinStr___IPHONE_11_4 = `enum __IPHONE_11_4 = 110400;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_11_4); }))) {
            mixin(enumMixinStr___IPHONE_11_4);
        }
    }
    
    #ifdef __IPHONE_11_3
    
    #endif
    static if(!is(typeof(__IPHONE_11_3))) {
        private enum enumMixinStr___IPHONE_11_3 = `enum __IPHONE_11_3 = 110300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_11_3); }))) {
            mixin(enumMixinStr___IPHONE_11_3);
        }
    }
    
    #ifdef __IPHONE_11_2
    
    #endif
    static if(!is(typeof(__IPHONE_11_2))) {
        private enum enumMixinStr___IPHONE_11_2 = `enum __IPHONE_11_2 = 110200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_11_2); }))) {
            mixin(enumMixinStr___IPHONE_11_2);
        }
    }
    
    #ifdef __IPHONE_11_1
    
    #endif
    static if(!is(typeof(__IPHONE_11_1))) {
        private enum enumMixinStr___IPHONE_11_1 = `enum __IPHONE_11_1 = 110100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_11_1); }))) {
            mixin(enumMixinStr___IPHONE_11_1);
        }
    }
    
    #ifdef __IPHONE_11_0
    
    #endif
    static if(!is(typeof(__IPHONE_11_0))) {
        private enum enumMixinStr___IPHONE_11_0 = `enum __IPHONE_11_0 = 110000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_11_0); }))) {
            mixin(enumMixinStr___IPHONE_11_0);
        }
    }
    
    #ifdef __IPHONE_10_3
    
    #endif
    static if(!is(typeof(__IPHONE_10_3))) {
        private enum enumMixinStr___IPHONE_10_3 = `enum __IPHONE_10_3 = 100300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_10_3); }))) {
            mixin(enumMixinStr___IPHONE_10_3);
        }
    }
    
    #ifdef __IPHONE_10_2
    
    #endif
    static if(!is(typeof(__IPHONE_10_2))) {
        private enum enumMixinStr___IPHONE_10_2 = `enum __IPHONE_10_2 = 100200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_10_2); }))) {
            mixin(enumMixinStr___IPHONE_10_2);
        }
    }
    
    #ifdef __IPHONE_10_1
    
    #endif
    static if(!is(typeof(__IPHONE_10_1))) {
        private enum enumMixinStr___IPHONE_10_1 = `enum __IPHONE_10_1 = 100100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_10_1); }))) {
            mixin(enumMixinStr___IPHONE_10_1);
        }
    }
    
    #ifdef __IPHONE_10_0
    
    #endif
    static if(!is(typeof(__IPHONE_10_0))) {
        private enum enumMixinStr___IPHONE_10_0 = `enum __IPHONE_10_0 = 100000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_10_0); }))) {
            mixin(enumMixinStr___IPHONE_10_0);
        }
    }
    
    #ifdef __IPHONE_9_3
    
    #endif
    static if(!is(typeof(__IPHONE_9_3))) {
        private enum enumMixinStr___IPHONE_9_3 = `enum __IPHONE_9_3 = 90300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_9_3); }))) {
            mixin(enumMixinStr___IPHONE_9_3);
        }
    }
    
    #ifdef __IPHONE_9_2
    
    #endif
    static if(!is(typeof(__IPHONE_9_2))) {
        private enum enumMixinStr___IPHONE_9_2 = `enum __IPHONE_9_2 = 90200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_9_2); }))) {
            mixin(enumMixinStr___IPHONE_9_2);
        }
    }
    
    #ifdef __IPHONE_9_1
    
    #endif
    static if(!is(typeof(__IPHONE_9_1))) {
        private enum enumMixinStr___IPHONE_9_1 = `enum __IPHONE_9_1 = 90100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_9_1); }))) {
            mixin(enumMixinStr___IPHONE_9_1);
        }
    }
    
    #ifdef __IPHONE_9_0
    
    #endif
    static if(!is(typeof(__IPHONE_9_0))) {
        private enum enumMixinStr___IPHONE_9_0 = `enum __IPHONE_9_0 = 90000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_9_0); }))) {
            mixin(enumMixinStr___IPHONE_9_0);
        }
    }
    
    #ifdef __IPHONE_8_4
    
    #endif
    static if(!is(typeof(__IPHONE_8_4))) {
        private enum enumMixinStr___IPHONE_8_4 = `enum __IPHONE_8_4 = 80400;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_8_4); }))) {
            mixin(enumMixinStr___IPHONE_8_4);
        }
    }
    
    #ifdef __IPHONE_8_3
    
    #endif
    static if(!is(typeof(__IPHONE_8_3))) {
        private enum enumMixinStr___IPHONE_8_3 = `enum __IPHONE_8_3 = 80300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_8_3); }))) {
            mixin(enumMixinStr___IPHONE_8_3);
        }
    }
    
    #ifdef __IPHONE_8_2
    
    #endif
    static if(!is(typeof(__IPHONE_8_2))) {
        private enum enumMixinStr___IPHONE_8_2 = `enum __IPHONE_8_2 = 80200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_8_2); }))) {
            mixin(enumMixinStr___IPHONE_8_2);
        }
    }
    
    #ifdef __IPHONE_8_1
    
    #endif
    static if(!is(typeof(__IPHONE_8_1))) {
        private enum enumMixinStr___IPHONE_8_1 = `enum __IPHONE_8_1 = 80100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_8_1); }))) {
            mixin(enumMixinStr___IPHONE_8_1);
        }
    }
    
    #ifdef __IPHONE_8_0
    
    #endif
    static if(!is(typeof(__IPHONE_8_0))) {
        private enum enumMixinStr___IPHONE_8_0 = `enum __IPHONE_8_0 = 80000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_8_0); }))) {
            mixin(enumMixinStr___IPHONE_8_0);
        }
    }
    
    #ifdef __IPHONE_7_1
    
    #endif
    static if(!is(typeof(__IPHONE_7_1))) {
        private enum enumMixinStr___IPHONE_7_1 = `enum __IPHONE_7_1 = 70100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_7_1); }))) {
            mixin(enumMixinStr___IPHONE_7_1);
        }
    }
    
    #ifdef __IPHONE_7_0
    
    #endif
    static if(!is(typeof(__IPHONE_7_0))) {
        private enum enumMixinStr___IPHONE_7_0 = `enum __IPHONE_7_0 = 70000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_7_0); }))) {
            mixin(enumMixinStr___IPHONE_7_0);
        }
    }
    
    #ifdef __IPHONE_6_1
    
    #endif
    static if(!is(typeof(__IPHONE_6_1))) {
        private enum enumMixinStr___IPHONE_6_1 = `enum __IPHONE_6_1 = 60100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_6_1); }))) {
            mixin(enumMixinStr___IPHONE_6_1);
        }
    }
    
    #ifdef __IPHONE_6_0
    
    #endif
    static if(!is(typeof(__IPHONE_6_0))) {
        private enum enumMixinStr___IPHONE_6_0 = `enum __IPHONE_6_0 = 60000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_6_0); }))) {
            mixin(enumMixinStr___IPHONE_6_0);
        }
    }
    
    #ifdef __IPHONE_5_1
    
    #endif
    static if(!is(typeof(__IPHONE_5_1))) {
        private enum enumMixinStr___IPHONE_5_1 = `enum __IPHONE_5_1 = 50100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_5_1); }))) {
            mixin(enumMixinStr___IPHONE_5_1);
        }
    }
    
    #ifdef __IPHONE_5_0
    
    #endif
    static if(!is(typeof(__IPHONE_5_0))) {
        private enum enumMixinStr___IPHONE_5_0 = `enum __IPHONE_5_0 = 50000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_5_0); }))) {
            mixin(enumMixinStr___IPHONE_5_0);
        }
    }
    
    #ifdef __IPHONE_4_3
    
    #endif
    static if(!is(typeof(__IPHONE_4_3))) {
        private enum enumMixinStr___IPHONE_4_3 = `enum __IPHONE_4_3 = 40300;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_4_3); }))) {
            mixin(enumMixinStr___IPHONE_4_3);
        }
    }
    
    #ifdef __IPHONE_4_2
    
    #endif
    static if(!is(typeof(__IPHONE_4_2))) {
        private enum enumMixinStr___IPHONE_4_2 = `enum __IPHONE_4_2 = 40200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_4_2); }))) {
            mixin(enumMixinStr___IPHONE_4_2);
        }
    }
    
    #ifdef __IPHONE_4_1
    
    #endif
    static if(!is(typeof(__IPHONE_4_1))) {
        private enum enumMixinStr___IPHONE_4_1 = `enum __IPHONE_4_1 = 40100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_4_1); }))) {
            mixin(enumMixinStr___IPHONE_4_1);
        }
    }
    
    #ifdef __IPHONE_4_0
    
    #endif
    static if(!is(typeof(__IPHONE_4_0))) {
        private enum enumMixinStr___IPHONE_4_0 = `enum __IPHONE_4_0 = 40000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_4_0); }))) {
            mixin(enumMixinStr___IPHONE_4_0);
        }
    }
    
    #ifdef __IPHONE_3_2
    
    #endif
    static if(!is(typeof(__IPHONE_3_2))) {
        private enum enumMixinStr___IPHONE_3_2 = `enum __IPHONE_3_2 = 30200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_3_2); }))) {
            mixin(enumMixinStr___IPHONE_3_2);
        }
    }
    
    #ifdef __IPHONE_3_1
    
    #endif
    static if(!is(typeof(__IPHONE_3_1))) {
        private enum enumMixinStr___IPHONE_3_1 = `enum __IPHONE_3_1 = 30100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_3_1); }))) {
            mixin(enumMixinStr___IPHONE_3_1);
        }
    }
    
    #ifdef __IPHONE_3_0
    
    #endif
    static if(!is(typeof(__IPHONE_3_0))) {
        private enum enumMixinStr___IPHONE_3_0 = `enum __IPHONE_3_0 = 30000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_3_0); }))) {
            mixin(enumMixinStr___IPHONE_3_0);
        }
    }
    
    #ifdef __IPHONE_2_2
    
    #endif
    static if(!is(typeof(__IPHONE_2_2))) {
        private enum enumMixinStr___IPHONE_2_2 = `enum __IPHONE_2_2 = 20200;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_2_2); }))) {
            mixin(enumMixinStr___IPHONE_2_2);
        }
    }
    
    #ifdef __IPHONE_2_1
    
    #endif
    static if(!is(typeof(__IPHONE_2_1))) {
        private enum enumMixinStr___IPHONE_2_1 = `enum __IPHONE_2_1 = 20100;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_2_1); }))) {
            mixin(enumMixinStr___IPHONE_2_1);
        }
    }
    
    #ifdef __IPHONE_2_0
    
    #endif
    static if(!is(typeof(__IPHONE_2_0))) {
        private enum enumMixinStr___IPHONE_2_0 = `enum __IPHONE_2_0 = 20000;`;
        static if(is(typeof({ mixin(enumMixinStr___IPHONE_2_0); }))) {
            mixin(enumMixinStr___IPHONE_2_0);
        }
    }
    
    #ifdef __MAC_10_15_4
    
    #endif
    static if(!is(typeof(__MAC_10_15_4))) {
        private enum enumMixinStr___MAC_10_15_4 = `enum __MAC_10_15_4 = 101504;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_15_4); }))) {
            mixin(enumMixinStr___MAC_10_15_4);
        }
    }
    
    #ifdef __MAC_10_15_1
    
    #endif
    static if(!is(typeof(__MAC_10_15_1))) {
        private enum enumMixinStr___MAC_10_15_1 = `enum __MAC_10_15_1 = 101501;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_15_1); }))) {
            mixin(enumMixinStr___MAC_10_15_1);
        }
    }
    
    #ifdef __MAC_10_15
    
    #endif
    static if(!is(typeof(__MAC_10_15))) {
        private enum enumMixinStr___MAC_10_15 = `enum __MAC_10_15 = 101500;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_15); }))) {
            mixin(enumMixinStr___MAC_10_15);
        }
    }
    
    #ifdef __MAC_10_14_4
    
    #endif
    static if(!is(typeof(__MAC_10_14_4))) {
        private enum enumMixinStr___MAC_10_14_4 = `enum __MAC_10_14_4 = 101404;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_14_4); }))) {
            mixin(enumMixinStr___MAC_10_14_4);
        }
    }
    
    #ifdef __MAC_10_14_1
    
    #endif
    static if(!is(typeof(__MAC_10_14_1))) {
        private enum enumMixinStr___MAC_10_14_1 = `enum __MAC_10_14_1 = 101401;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_14_1); }))) {
            mixin(enumMixinStr___MAC_10_14_1);
        }
    }
    
    #ifdef __MAC_10_14
    
    #endif
    static if(!is(typeof(__MAC_10_14))) {
        private enum enumMixinStr___MAC_10_14 = `enum __MAC_10_14 = 101400;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_14); }))) {
            mixin(enumMixinStr___MAC_10_14);
        }
    }
    
    #ifdef __MAC_10_13_4
    
    #endif
    static if(!is(typeof(__MAC_10_13_4))) {
        private enum enumMixinStr___MAC_10_13_4 = `enum __MAC_10_13_4 = 101304;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_13_4); }))) {
            mixin(enumMixinStr___MAC_10_13_4);
        }
    }
    
    #ifdef __MAC_10_13_2
    
    #endif
    static if(!is(typeof(__MAC_10_13_2))) {
        private enum enumMixinStr___MAC_10_13_2 = `enum __MAC_10_13_2 = 101302;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_13_2); }))) {
            mixin(enumMixinStr___MAC_10_13_2);
        }
    }
    
    #ifdef __MAC_10_13_1
    
    #endif
    static if(!is(typeof(__MAC_10_13_1))) {
        private enum enumMixinStr___MAC_10_13_1 = `enum __MAC_10_13_1 = 101301;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_13_1); }))) {
            mixin(enumMixinStr___MAC_10_13_1);
        }
    }
    
    #ifdef __MAC_10_13
    
    #endif
    static if(!is(typeof(__MAC_10_13))) {
        private enum enumMixinStr___MAC_10_13 = `enum __MAC_10_13 = 101300;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_13); }))) {
            mixin(enumMixinStr___MAC_10_13);
        }
    }
    
    #define Py_RANGEOBJECT_H 

    


    static if(!is(typeof(__MAC_10_12_4))) {
        private enum enumMixinStr___MAC_10_12_4 = `enum __MAC_10_12_4 = 101204;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_12_4); }))) {
            mixin(enumMixinStr___MAC_10_12_4);
        }
    }
    
    #ifdef __MAC_10_12_2
    
    #endif
    static if(!is(typeof(__MAC_10_12_2))) {
        private enum enumMixinStr___MAC_10_12_2 = `enum __MAC_10_12_2 = 101202;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_12_2); }))) {
            mixin(enumMixinStr___MAC_10_12_2);
        }
    }
    
    #ifdef __MAC_10_12_1
    
    #endif
    static if(!is(typeof(__MAC_10_12_1))) {
        private enum enumMixinStr___MAC_10_12_1 = `enum __MAC_10_12_1 = 101201;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_12_1); }))) {
            mixin(enumMixinStr___MAC_10_12_1);
        }
    }
    
    #ifdef __MAC_10_12
    
    #endif
    static if(!is(typeof(__MAC_10_12))) {
        private enum enumMixinStr___MAC_10_12 = `enum __MAC_10_12 = 101200;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_12); }))) {
            mixin(enumMixinStr___MAC_10_12);
        }
    }
    
    #ifdef __MAC_10_11_4
    
    #endif
    static if(!is(typeof(__MAC_10_11_4))) {
        private enum enumMixinStr___MAC_10_11_4 = `enum __MAC_10_11_4 = 101104;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_11_4); }))) {
            mixin(enumMixinStr___MAC_10_11_4);
        }
    }
    
    #ifdef __MAC_10_11_3
    
    #endif
    static if(!is(typeof(__MAC_10_11_3))) {
        private enum enumMixinStr___MAC_10_11_3 = `enum __MAC_10_11_3 = 101103;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_11_3); }))) {
            mixin(enumMixinStr___MAC_10_11_3);
        }
    }
    
    #define PyRange_Check( op ) ( Py_TYPE ( op ) == & PyRange_Type )

    

    


    static if(!is(typeof(PySet_MINSIZE))) {
        private enum enumMixinStr_PySet_MINSIZE = `enum PySet_MINSIZE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_PySet_MINSIZE); }))) {
            mixin(enumMixinStr_PySet_MINSIZE);
        }
    }
    
    #ifdef __MAC_10_11_2
    
    #endif
    static if(!is(typeof(__MAC_10_11_2))) {
        private enum enumMixinStr___MAC_10_11_2 = `enum __MAC_10_11_2 = 101102;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_11_2); }))) {
            mixin(enumMixinStr___MAC_10_11_2);
        }
    }
    
    #ifdef __MAC_10_11
    
    #endif
    static if(!is(typeof(__MAC_10_11))) {
        private enum enumMixinStr___MAC_10_11 = `enum __MAC_10_11 = 101100;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_11); }))) {
            mixin(enumMixinStr___MAC_10_11);
        }
    }
    
    #ifdef __MAC_10_10_3
    
    #endif
    static if(!is(typeof(__MAC_10_10_3))) {
        private enum enumMixinStr___MAC_10_10_3 = `enum __MAC_10_10_3 = 101003;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_10_3); }))) {
            mixin(enumMixinStr___MAC_10_10_3);
        }
    }
    
    #ifdef __MAC_10_10_2
    
    #endif
    static if(!is(typeof(__MAC_10_10_2))) {
        private enum enumMixinStr___MAC_10_10_2 = `enum __MAC_10_10_2 = 101002;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_10_2); }))) {
            mixin(enumMixinStr___MAC_10_10_2);
        }
    }
    
    #ifdef __MAC_10_10
    
    #endif
    static if(!is(typeof(__MAC_10_10))) {
        private enum enumMixinStr___MAC_10_10 = `enum __MAC_10_10 = 101000;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_10); }))) {
            mixin(enumMixinStr___MAC_10_10);
        }
    }
    
    #ifdef __MAC_10_9
    
    #endif
    static if(!is(typeof(__MAC_10_9))) {
        private enum enumMixinStr___MAC_10_9 = `enum __MAC_10_9 = 1090;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_9); }))) {
            mixin(enumMixinStr___MAC_10_9);
        }
    }
    
    #define PySet_GET_SIZE( so ) ( assert ( PyAnySet_Check ( so ) ) , ( ( cast( PySetObject * ) ( so ) ) . used ) )

    


    static if(!is(typeof(__MAC_10_8))) {
        private enum enumMixinStr___MAC_10_8 = `enum __MAC_10_8 = 1080;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_8); }))) {
            mixin(enumMixinStr___MAC_10_8);
        }
    }
    
    #ifdef __MAC_10_7
    
    #endif
    static if(!is(typeof(__MAC_10_7))) {
        private enum enumMixinStr___MAC_10_7 = `enum __MAC_10_7 = 1070;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_7); }))) {
            mixin(enumMixinStr___MAC_10_7);
        }
    }
    
    #ifdef __MAC_10_6
    
    #endif
    static if(!is(typeof(__MAC_10_6))) {
        private enum enumMixinStr___MAC_10_6 = `enum __MAC_10_6 = 1060;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_6); }))) {
            mixin(enumMixinStr___MAC_10_6);
        }
    }
    
    #ifdef __MAC_10_5
    
    #endif
    static if(!is(typeof(__MAC_10_5))) {
        private enum enumMixinStr___MAC_10_5 = `enum __MAC_10_5 = 1050;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_5); }))) {
            mixin(enumMixinStr___MAC_10_5);
        }
    }
    
    #ifdef __MAC_10_4
    
    #endif
    static if(!is(typeof(__MAC_10_4))) {
        private enum enumMixinStr___MAC_10_4 = `enum __MAC_10_4 = 1040;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_4); }))) {
            mixin(enumMixinStr___MAC_10_4);
        }
    }
    
    #ifdef __MAC_10_3
    
    #endif
    static if(!is(typeof(__MAC_10_3))) {
        private enum enumMixinStr___MAC_10_3 = `enum __MAC_10_3 = 1030;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_3); }))) {
            mixin(enumMixinStr___MAC_10_3);
        }
    }
    
    #ifdef __MAC_10_2
    
    #endif
    static if(!is(typeof(__MAC_10_2))) {
        private enum enumMixinStr___MAC_10_2 = `enum __MAC_10_2 = 1020;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_2); }))) {
            mixin(enumMixinStr___MAC_10_2);
        }
    }
    
    #ifdef __MAC_10_1
    
    #endif
    static if(!is(typeof(__MAC_10_1))) {
        private enum enumMixinStr___MAC_10_1 = `enum __MAC_10_1 = 1010;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_1); }))) {
            mixin(enumMixinStr___MAC_10_1);
        }
    }
    
    #ifdef __MAC_10_0
    
    #endif
    static if(!is(typeof(__MAC_10_0))) {
        private enum enumMixinStr___MAC_10_0 = `enum __MAC_10_0 = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr___MAC_10_0); }))) {
            mixin(enumMixinStr___MAC_10_0);
        }
    }
    
    #ifdef __API_TO_BE_DEPRECATED
    
    #endif
    static if(!is(typeof(__API_TO_BE_DEPRECATED))) {
        private enum enumMixinStr___API_TO_BE_DEPRECATED = `enum __API_TO_BE_DEPRECATED = 100000;`;
        static if(is(typeof({ mixin(enumMixinStr___API_TO_BE_DEPRECATED); }))) {
            mixin(enumMixinStr___API_TO_BE_DEPRECATED);
        }
    }
    
    #define __AVAILABILITY__ 

    

    

    

    

    

    

    


    static if(!is(typeof(Py_Ellipsis))) {
        private enum enumMixinStr_Py_Ellipsis = `enum Py_Ellipsis = ( & _Py_EllipsisObject );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_Ellipsis); }))) {
            mixin(enumMixinStr_Py_Ellipsis);
        }
    }
    
    #define PySlice_Check( op ) ( Py_TYPE ( op ) == & PySlice_Type )

    

    

    


    static if(!is(typeof(T_SHORT))) {
        private enum enumMixinStr_T_SHORT = `enum T_SHORT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_T_SHORT); }))) {
            mixin(enumMixinStr_T_SHORT);
        }
    }
    
    #ifdef T_INT
    
    #endif
    static if(!is(typeof(T_INT))) {
        private enum enumMixinStr_T_INT = `enum T_INT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_T_INT); }))) {
            mixin(enumMixinStr_T_INT);
        }
    }
    
    #ifdef T_LONG
    
    #endif
    static if(!is(typeof(T_LONG))) {
        private enum enumMixinStr_T_LONG = `enum T_LONG = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_T_LONG); }))) {
            mixin(enumMixinStr_T_LONG);
        }
    }
    
    #ifdef T_FLOAT
    
    #endif
    static if(!is(typeof(T_FLOAT))) {
        private enum enumMixinStr_T_FLOAT = `enum T_FLOAT = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_T_FLOAT); }))) {
            mixin(enumMixinStr_T_FLOAT);
        }
    }
    
    #ifdef T_DOUBLE
    
    #endif
    static if(!is(typeof(T_DOUBLE))) {
        private enum enumMixinStr_T_DOUBLE = `enum T_DOUBLE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_T_DOUBLE); }))) {
            mixin(enumMixinStr_T_DOUBLE);
        }
    }
    
    #ifdef T_STRING
    
    #endif
    static if(!is(typeof(T_STRING))) {
        private enum enumMixinStr_T_STRING = `enum T_STRING = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_T_STRING); }))) {
            mixin(enumMixinStr_T_STRING);
        }
    }
    
    #ifdef T_OBJECT
    
    #endif
    static if(!is(typeof(T_OBJECT))) {
        private enum enumMixinStr_T_OBJECT = `enum T_OBJECT = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_T_OBJECT); }))) {
            mixin(enumMixinStr_T_OBJECT);
        }
    }
    
    #ifdef T_CHAR
    
    #endif
    static if(!is(typeof(T_CHAR))) {
        private enum enumMixinStr_T_CHAR = `enum T_CHAR = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_T_CHAR); }))) {
            mixin(enumMixinStr_T_CHAR);
        }
    }
    
    #ifdef T_BYTE
    
    #endif
    static if(!is(typeof(T_BYTE))) {
        private enum enumMixinStr_T_BYTE = `enum T_BYTE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_T_BYTE); }))) {
            mixin(enumMixinStr_T_BYTE);
        }
    }
    
    #ifdef T_UBYTE
    
    #endif
    static if(!is(typeof(T_UBYTE))) {
        private enum enumMixinStr_T_UBYTE = `enum T_UBYTE = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_T_UBYTE); }))) {
            mixin(enumMixinStr_T_UBYTE);
        }
    }
    
    #ifdef T_USHORT
    
    #endif
    static if(!is(typeof(T_USHORT))) {
        private enum enumMixinStr_T_USHORT = `enum T_USHORT = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_T_USHORT); }))) {
            mixin(enumMixinStr_T_USHORT);
        }
    }
    
    #ifdef T_UINT
    
    #endif
    static if(!is(typeof(T_UINT))) {
        private enum enumMixinStr_T_UINT = `enum T_UINT = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_T_UINT); }))) {
            mixin(enumMixinStr_T_UINT);
        }
    }
    
    #ifdef T_ULONG
    
    #endif
    static if(!is(typeof(T_ULONG))) {
        private enum enumMixinStr_T_ULONG = `enum T_ULONG = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_T_ULONG); }))) {
            mixin(enumMixinStr_T_ULONG);
        }
    }
    
    #ifdef T_STRING_INPLACE
    
    #endif
    static if(!is(typeof(T_STRING_INPLACE))) {
        private enum enumMixinStr_T_STRING_INPLACE = `enum T_STRING_INPLACE = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_T_STRING_INPLACE); }))) {
            mixin(enumMixinStr_T_STRING_INPLACE);
        }
    }
    
    #ifdef T_BOOL
    
    #endif
    static if(!is(typeof(T_BOOL))) {
        private enum enumMixinStr_T_BOOL = `enum T_BOOL = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_T_BOOL); }))) {
            mixin(enumMixinStr_T_BOOL);
        }
    }
    
    #ifdef T_OBJECT_EX
    
    #endif
    static if(!is(typeof(T_OBJECT_EX))) {
        private enum enumMixinStr_T_OBJECT_EX = `enum T_OBJECT_EX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_T_OBJECT_EX); }))) {
            mixin(enumMixinStr_T_OBJECT_EX);
        }
    }
    
    #ifdef T_LONGLONG
    
    #endif
    static if(!is(typeof(T_LONGLONG))) {
        private enum enumMixinStr_T_LONGLONG = `enum T_LONGLONG = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_T_LONGLONG); }))) {
            mixin(enumMixinStr_T_LONGLONG);
        }
    }
    
    #ifdef T_ULONGLONG
    
    #endif
    static if(!is(typeof(T_ULONGLONG))) {
        private enum enumMixinStr_T_ULONGLONG = `enum T_ULONGLONG = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_T_ULONGLONG); }))) {
            mixin(enumMixinStr_T_ULONGLONG);
        }
    }
    
    #ifdef T_PYSSIZET
    
    #endif
    static if(!is(typeof(T_PYSSIZET))) {
        private enum enumMixinStr_T_PYSSIZET = `enum T_PYSSIZET = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_T_PYSSIZET); }))) {
            mixin(enumMixinStr_T_PYSSIZET);
        }
    }
    
    #ifdef T_NONE
    
    #endif
    static if(!is(typeof(T_NONE))) {
        private enum enumMixinStr_T_NONE = `enum T_NONE = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_T_NONE); }))) {
            mixin(enumMixinStr_T_NONE);
        }
    }
    
    #ifdef READONLY
    
    #endif
    static if(!is(typeof(READONLY))) {
        private enum enumMixinStr_READONLY = `enum READONLY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_READONLY); }))) {
            mixin(enumMixinStr_READONLY);
        }
    }
    
    #ifdef READ_RESTRICTED
    
    #endif
    static if(!is(typeof(READ_RESTRICTED))) {
        private enum enumMixinStr_READ_RESTRICTED = `enum READ_RESTRICTED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_READ_RESTRICTED); }))) {
            mixin(enumMixinStr_READ_RESTRICTED);
        }
    }
    
    #ifdef PY_WRITE_RESTRICTED
    
    #endif
    static if(!is(typeof(PY_WRITE_RESTRICTED))) {
        private enum enumMixinStr_PY_WRITE_RESTRICTED = `enum PY_WRITE_RESTRICTED = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_PY_WRITE_RESTRICTED); }))) {
            mixin(enumMixinStr_PY_WRITE_RESTRICTED);
        }
    }
    
    #ifdef RESTRICTED
    
    #endif
    static if(!is(typeof(RESTRICTED))) {
        private enum enumMixinStr_RESTRICTED = `enum RESTRICTED = ( 2 | 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_RESTRICTED); }))) {
            mixin(enumMixinStr_RESTRICTED);
        }
    }
    
    #define Py_STRUCTSEQ_H 

    

    

    

    

    

    

    

    

    

    

    

    

    


    static if(!is(typeof(Py_mp_ass_subscript))) {
        private enum enumMixinStr_Py_mp_ass_subscript = `enum Py_mp_ass_subscript = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_mp_ass_subscript); }))) {
            mixin(enumMixinStr_Py_mp_ass_subscript);
        }
    }
    
    #ifdef Py_mp_length
    
    #endif
    static if(!is(typeof(Py_mp_length))) {
        private enum enumMixinStr_Py_mp_length = `enum Py_mp_length = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_mp_length); }))) {
            mixin(enumMixinStr_Py_mp_length);
        }
    }
    
    #ifdef Py_mp_subscript
    
    #endif
    static if(!is(typeof(Py_mp_subscript))) {
        private enum enumMixinStr_Py_mp_subscript = `enum Py_mp_subscript = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_mp_subscript); }))) {
            mixin(enumMixinStr_Py_mp_subscript);
        }
    }
    
    #ifdef Py_nb_absolute
    
    #endif
    static if(!is(typeof(Py_nb_absolute))) {
        private enum enumMixinStr_Py_nb_absolute = `enum Py_nb_absolute = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_absolute); }))) {
            mixin(enumMixinStr_Py_nb_absolute);
        }
    }
    
    #ifdef Py_nb_add
    
    #endif
    static if(!is(typeof(Py_nb_add))) {
        private enum enumMixinStr_Py_nb_add = `enum Py_nb_add = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_add); }))) {
            mixin(enumMixinStr_Py_nb_add);
        }
    }
    
    #ifdef Py_nb_and
    
    #endif
    static if(!is(typeof(Py_nb_and))) {
        private enum enumMixinStr_Py_nb_and = `enum Py_nb_and = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_and); }))) {
            mixin(enumMixinStr_Py_nb_and);
        }
    }
    
    #ifdef Py_nb_bool
    
    #endif
    static if(!is(typeof(Py_nb_bool))) {
        private enum enumMixinStr_Py_nb_bool = `enum Py_nb_bool = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_bool); }))) {
            mixin(enumMixinStr_Py_nb_bool);
        }
    }
    
    #ifdef Py_nb_divmod
    
    #endif
    static if(!is(typeof(Py_nb_divmod))) {
        private enum enumMixinStr_Py_nb_divmod = `enum Py_nb_divmod = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_divmod); }))) {
            mixin(enumMixinStr_Py_nb_divmod);
        }
    }
    
    #ifdef Py_nb_float
    
    #endif
    static if(!is(typeof(Py_nb_float))) {
        private enum enumMixinStr_Py_nb_float = `enum Py_nb_float = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_float); }))) {
            mixin(enumMixinStr_Py_nb_float);
        }
    }
    
    #ifdef Py_nb_floor_divide
    
    #endif
    static if(!is(typeof(Py_nb_floor_divide))) {
        private enum enumMixinStr_Py_nb_floor_divide = `enum Py_nb_floor_divide = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_floor_divide); }))) {
            mixin(enumMixinStr_Py_nb_floor_divide);
        }
    }
    
    #ifdef Py_nb_index
    
    #endif
    static if(!is(typeof(Py_nb_index))) {
        private enum enumMixinStr_Py_nb_index = `enum Py_nb_index = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_index); }))) {
            mixin(enumMixinStr_Py_nb_index);
        }
    }
    
    #ifdef Py_nb_inplace_add
    
    #endif
    static if(!is(typeof(Py_nb_inplace_add))) {
        private enum enumMixinStr_Py_nb_inplace_add = `enum Py_nb_inplace_add = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_add); }))) {
            mixin(enumMixinStr_Py_nb_inplace_add);
        }
    }
    
    #ifdef Py_nb_inplace_and
    
    #endif
    static if(!is(typeof(Py_nb_inplace_and))) {
        private enum enumMixinStr_Py_nb_inplace_and = `enum Py_nb_inplace_and = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_and); }))) {
            mixin(enumMixinStr_Py_nb_inplace_and);
        }
    }
    
    #ifdef Py_nb_inplace_floor_divide
    
    #endif
    static if(!is(typeof(Py_nb_inplace_floor_divide))) {
        private enum enumMixinStr_Py_nb_inplace_floor_divide = `enum Py_nb_inplace_floor_divide = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_floor_divide); }))) {
            mixin(enumMixinStr_Py_nb_inplace_floor_divide);
        }
    }
    
    #ifdef Py_nb_inplace_lshift
    
    #endif
    static if(!is(typeof(Py_nb_inplace_lshift))) {
        private enum enumMixinStr_Py_nb_inplace_lshift = `enum Py_nb_inplace_lshift = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_lshift); }))) {
            mixin(enumMixinStr_Py_nb_inplace_lshift);
        }
    }
    
    #ifdef Py_nb_inplace_multiply
    
    #endif
    static if(!is(typeof(Py_nb_inplace_multiply))) {
        private enum enumMixinStr_Py_nb_inplace_multiply = `enum Py_nb_inplace_multiply = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_multiply); }))) {
            mixin(enumMixinStr_Py_nb_inplace_multiply);
        }
    }
    
    #ifdef Py_nb_inplace_or
    
    #endif
    static if(!is(typeof(Py_nb_inplace_or))) {
        private enum enumMixinStr_Py_nb_inplace_or = `enum Py_nb_inplace_or = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_or); }))) {
            mixin(enumMixinStr_Py_nb_inplace_or);
        }
    }
    
    #ifdef Py_nb_inplace_power
    
    #endif
    static if(!is(typeof(Py_nb_inplace_power))) {
        private enum enumMixinStr_Py_nb_inplace_power = `enum Py_nb_inplace_power = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_power); }))) {
            mixin(enumMixinStr_Py_nb_inplace_power);
        }
    }
    
    #ifdef Py_nb_inplace_remainder
    
    #endif
    static if(!is(typeof(Py_nb_inplace_remainder))) {
        private enum enumMixinStr_Py_nb_inplace_remainder = `enum Py_nb_inplace_remainder = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_remainder); }))) {
            mixin(enumMixinStr_Py_nb_inplace_remainder);
        }
    }
    
    #ifdef Py_nb_inplace_rshift
    
    #endif
    static if(!is(typeof(Py_nb_inplace_rshift))) {
        private enum enumMixinStr_Py_nb_inplace_rshift = `enum Py_nb_inplace_rshift = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_rshift); }))) {
            mixin(enumMixinStr_Py_nb_inplace_rshift);
        }
    }
    
    #ifdef Py_nb_inplace_subtract
    
    #endif
    static if(!is(typeof(Py_nb_inplace_subtract))) {
        private enum enumMixinStr_Py_nb_inplace_subtract = `enum Py_nb_inplace_subtract = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_subtract); }))) {
            mixin(enumMixinStr_Py_nb_inplace_subtract);
        }
    }
    
    #ifdef Py_nb_inplace_true_divide
    
    #endif
    static if(!is(typeof(Py_nb_inplace_true_divide))) {
        private enum enumMixinStr_Py_nb_inplace_true_divide = `enum Py_nb_inplace_true_divide = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_true_divide); }))) {
            mixin(enumMixinStr_Py_nb_inplace_true_divide);
        }
    }
    
    #ifdef Py_nb_inplace_xor
    
    #endif
    static if(!is(typeof(Py_nb_inplace_xor))) {
        private enum enumMixinStr_Py_nb_inplace_xor = `enum Py_nb_inplace_xor = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_xor); }))) {
            mixin(enumMixinStr_Py_nb_inplace_xor);
        }
    }
    
    #ifdef Py_nb_int
    
    #endif
    static if(!is(typeof(Py_nb_int))) {
        private enum enumMixinStr_Py_nb_int = `enum Py_nb_int = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_int); }))) {
            mixin(enumMixinStr_Py_nb_int);
        }
    }
    
    #ifdef Py_nb_invert
    
    #endif
    static if(!is(typeof(Py_nb_invert))) {
        private enum enumMixinStr_Py_nb_invert = `enum Py_nb_invert = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_invert); }))) {
            mixin(enumMixinStr_Py_nb_invert);
        }
    }
    
    #ifdef Py_nb_lshift
    
    #endif
    static if(!is(typeof(Py_nb_lshift))) {
        private enum enumMixinStr_Py_nb_lshift = `enum Py_nb_lshift = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_lshift); }))) {
            mixin(enumMixinStr_Py_nb_lshift);
        }
    }
    
    #ifdef Py_nb_multiply
    
    #endif
    static if(!is(typeof(Py_nb_multiply))) {
        private enum enumMixinStr_Py_nb_multiply = `enum Py_nb_multiply = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_multiply); }))) {
            mixin(enumMixinStr_Py_nb_multiply);
        }
    }
    
    #ifdef Py_nb_negative
    
    #endif
    static if(!is(typeof(Py_nb_negative))) {
        private enum enumMixinStr_Py_nb_negative = `enum Py_nb_negative = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_negative); }))) {
            mixin(enumMixinStr_Py_nb_negative);
        }
    }
    
    #ifdef Py_nb_or
    
    #endif
    static if(!is(typeof(Py_nb_or))) {
        private enum enumMixinStr_Py_nb_or = `enum Py_nb_or = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_or); }))) {
            mixin(enumMixinStr_Py_nb_or);
        }
    }
    
    #ifdef Py_nb_positive
    
    #endif
    static if(!is(typeof(Py_nb_positive))) {
        private enum enumMixinStr_Py_nb_positive = `enum Py_nb_positive = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_positive); }))) {
            mixin(enumMixinStr_Py_nb_positive);
        }
    }
    
    #ifdef Py_nb_power
    
    #endif
    static if(!is(typeof(Py_nb_power))) {
        private enum enumMixinStr_Py_nb_power = `enum Py_nb_power = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_power); }))) {
            mixin(enumMixinStr_Py_nb_power);
        }
    }
    
    #ifdef Py_nb_remainder
    
    #endif
    static if(!is(typeof(Py_nb_remainder))) {
        private enum enumMixinStr_Py_nb_remainder = `enum Py_nb_remainder = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_remainder); }))) {
            mixin(enumMixinStr_Py_nb_remainder);
        }
    }
    
    #ifdef Py_nb_rshift
    
    #endif
    static if(!is(typeof(Py_nb_rshift))) {
        private enum enumMixinStr_Py_nb_rshift = `enum Py_nb_rshift = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_rshift); }))) {
            mixin(enumMixinStr_Py_nb_rshift);
        }
    }
    
    #ifdef Py_nb_subtract
    
    #endif
    static if(!is(typeof(Py_nb_subtract))) {
        private enum enumMixinStr_Py_nb_subtract = `enum Py_nb_subtract = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_subtract); }))) {
            mixin(enumMixinStr_Py_nb_subtract);
        }
    }
    
    #ifdef Py_nb_true_divide
    
    #endif
    static if(!is(typeof(Py_nb_true_divide))) {
        private enum enumMixinStr_Py_nb_true_divide = `enum Py_nb_true_divide = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_true_divide); }))) {
            mixin(enumMixinStr_Py_nb_true_divide);
        }
    }
    
    #ifdef Py_nb_xor
    
    #endif
    static if(!is(typeof(Py_nb_xor))) {
        private enum enumMixinStr_Py_nb_xor = `enum Py_nb_xor = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_xor); }))) {
            mixin(enumMixinStr_Py_nb_xor);
        }
    }
    
    #ifdef Py_sq_ass_item
    
    #endif
    static if(!is(typeof(Py_sq_ass_item))) {
        private enum enumMixinStr_Py_sq_ass_item = `enum Py_sq_ass_item = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_ass_item); }))) {
            mixin(enumMixinStr_Py_sq_ass_item);
        }
    }
    
    #ifdef Py_sq_concat
    
    #endif
    static if(!is(typeof(Py_sq_concat))) {
        private enum enumMixinStr_Py_sq_concat = `enum Py_sq_concat = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_concat); }))) {
            mixin(enumMixinStr_Py_sq_concat);
        }
    }
    
    #ifdef Py_sq_contains
    
    #endif
    static if(!is(typeof(Py_sq_contains))) {
        private enum enumMixinStr_Py_sq_contains = `enum Py_sq_contains = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_contains); }))) {
            mixin(enumMixinStr_Py_sq_contains);
        }
    }
    
    #ifdef Py_sq_inplace_concat
    
    #endif
    static if(!is(typeof(Py_sq_inplace_concat))) {
        private enum enumMixinStr_Py_sq_inplace_concat = `enum Py_sq_inplace_concat = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_inplace_concat); }))) {
            mixin(enumMixinStr_Py_sq_inplace_concat);
        }
    }
    
    #ifdef Py_sq_inplace_repeat
    
    #endif
    static if(!is(typeof(Py_sq_inplace_repeat))) {
        private enum enumMixinStr_Py_sq_inplace_repeat = `enum Py_sq_inplace_repeat = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_inplace_repeat); }))) {
            mixin(enumMixinStr_Py_sq_inplace_repeat);
        }
    }
    
    #ifdef Py_sq_item
    
    #endif
    static if(!is(typeof(Py_sq_item))) {
        private enum enumMixinStr_Py_sq_item = `enum Py_sq_item = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_item); }))) {
            mixin(enumMixinStr_Py_sq_item);
        }
    }
    
    #ifdef Py_sq_length
    
    #endif
    static if(!is(typeof(Py_sq_length))) {
        private enum enumMixinStr_Py_sq_length = `enum Py_sq_length = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_length); }))) {
            mixin(enumMixinStr_Py_sq_length);
        }
    }
    
    #ifdef Py_sq_repeat
    
    #endif
    static if(!is(typeof(Py_sq_repeat))) {
        private enum enumMixinStr_Py_sq_repeat = `enum Py_sq_repeat = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_sq_repeat); }))) {
            mixin(enumMixinStr_Py_sq_repeat);
        }
    }
    
    #ifdef Py_tp_alloc
    
    #endif
    static if(!is(typeof(Py_tp_alloc))) {
        private enum enumMixinStr_Py_tp_alloc = `enum Py_tp_alloc = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_alloc); }))) {
            mixin(enumMixinStr_Py_tp_alloc);
        }
    }
    
    #ifdef Py_tp_base
    
    #endif
    static if(!is(typeof(Py_tp_base))) {
        private enum enumMixinStr_Py_tp_base = `enum Py_tp_base = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_base); }))) {
            mixin(enumMixinStr_Py_tp_base);
        }
    }
    
    #ifdef Py_tp_bases
    
    #endif
    static if(!is(typeof(Py_tp_bases))) {
        private enum enumMixinStr_Py_tp_bases = `enum Py_tp_bases = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_bases); }))) {
            mixin(enumMixinStr_Py_tp_bases);
        }
    }
    
    #ifdef Py_tp_call
    
    #endif
    static if(!is(typeof(Py_tp_call))) {
        private enum enumMixinStr_Py_tp_call = `enum Py_tp_call = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_call); }))) {
            mixin(enumMixinStr_Py_tp_call);
        }
    }
    
    #ifdef Py_tp_clear
    
    #endif
    static if(!is(typeof(Py_tp_clear))) {
        private enum enumMixinStr_Py_tp_clear = `enum Py_tp_clear = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_clear); }))) {
            mixin(enumMixinStr_Py_tp_clear);
        }
    }
    
    #ifdef Py_tp_dealloc
    
    #endif
    static if(!is(typeof(Py_tp_dealloc))) {
        private enum enumMixinStr_Py_tp_dealloc = `enum Py_tp_dealloc = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_dealloc); }))) {
            mixin(enumMixinStr_Py_tp_dealloc);
        }
    }
    
    #ifdef Py_tp_del
    
    #endif
    static if(!is(typeof(Py_tp_del))) {
        private enum enumMixinStr_Py_tp_del = `enum Py_tp_del = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_del); }))) {
            mixin(enumMixinStr_Py_tp_del);
        }
    }
    
    #ifdef Py_tp_descr_get
    
    #endif
    static if(!is(typeof(Py_tp_descr_get))) {
        private enum enumMixinStr_Py_tp_descr_get = `enum Py_tp_descr_get = 54;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_descr_get); }))) {
            mixin(enumMixinStr_Py_tp_descr_get);
        }
    }
    
    #ifdef Py_tp_descr_set
    
    #endif
    static if(!is(typeof(Py_tp_descr_set))) {
        private enum enumMixinStr_Py_tp_descr_set = `enum Py_tp_descr_set = 55;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_descr_set); }))) {
            mixin(enumMixinStr_Py_tp_descr_set);
        }
    }
    
    #ifdef Py_tp_doc
    
    #endif
    static if(!is(typeof(Py_tp_doc))) {
        private enum enumMixinStr_Py_tp_doc = `enum Py_tp_doc = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_doc); }))) {
            mixin(enumMixinStr_Py_tp_doc);
        }
    }
    
    #ifdef Py_tp_getattr
    
    #endif
    static if(!is(typeof(Py_tp_getattr))) {
        private enum enumMixinStr_Py_tp_getattr = `enum Py_tp_getattr = 57;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_getattr); }))) {
            mixin(enumMixinStr_Py_tp_getattr);
        }
    }
    
    #ifdef Py_tp_getattro
    
    #endif
    static if(!is(typeof(Py_tp_getattro))) {
        private enum enumMixinStr_Py_tp_getattro = `enum Py_tp_getattro = 58;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_getattro); }))) {
            mixin(enumMixinStr_Py_tp_getattro);
        }
    }
    
    #ifdef Py_tp_hash
    
    #endif
    static if(!is(typeof(Py_tp_hash))) {
        private enum enumMixinStr_Py_tp_hash = `enum Py_tp_hash = 59;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_hash); }))) {
            mixin(enumMixinStr_Py_tp_hash);
        }
    }
    
    #ifdef Py_tp_init
    
    #endif
    static if(!is(typeof(Py_tp_init))) {
        private enum enumMixinStr_Py_tp_init = `enum Py_tp_init = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_init); }))) {
            mixin(enumMixinStr_Py_tp_init);
        }
    }
    
    #ifdef Py_tp_is_gc
    
    #endif
    static if(!is(typeof(Py_tp_is_gc))) {
        private enum enumMixinStr_Py_tp_is_gc = `enum Py_tp_is_gc = 61;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_is_gc); }))) {
            mixin(enumMixinStr_Py_tp_is_gc);
        }
    }
    
    #ifdef Py_tp_iter
    
    #endif
    static if(!is(typeof(Py_tp_iter))) {
        private enum enumMixinStr_Py_tp_iter = `enum Py_tp_iter = 62;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_iter); }))) {
            mixin(enumMixinStr_Py_tp_iter);
        }
    }
    
    #ifdef Py_tp_iternext
    
    #endif
    static if(!is(typeof(Py_tp_iternext))) {
        private enum enumMixinStr_Py_tp_iternext = `enum Py_tp_iternext = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_iternext); }))) {
            mixin(enumMixinStr_Py_tp_iternext);
        }
    }
    
    #ifdef Py_tp_methods
    
    #endif
    static if(!is(typeof(Py_tp_methods))) {
        private enum enumMixinStr_Py_tp_methods = `enum Py_tp_methods = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_methods); }))) {
            mixin(enumMixinStr_Py_tp_methods);
        }
    }
    
    #ifdef Py_tp_new
    
    #endif
    static if(!is(typeof(Py_tp_new))) {
        private enum enumMixinStr_Py_tp_new = `enum Py_tp_new = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_new); }))) {
            mixin(enumMixinStr_Py_tp_new);
        }
    }
    
    #ifdef Py_tp_repr
    
    #endif
    static if(!is(typeof(Py_tp_repr))) {
        private enum enumMixinStr_Py_tp_repr = `enum Py_tp_repr = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_repr); }))) {
            mixin(enumMixinStr_Py_tp_repr);
        }
    }
    
    #ifdef Py_tp_richcompare
    
    #endif
    static if(!is(typeof(Py_tp_richcompare))) {
        private enum enumMixinStr_Py_tp_richcompare = `enum Py_tp_richcompare = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_richcompare); }))) {
            mixin(enumMixinStr_Py_tp_richcompare);
        }
    }
    
    #ifdef Py_tp_setattr
    
    #endif
    static if(!is(typeof(Py_tp_setattr))) {
        private enum enumMixinStr_Py_tp_setattr = `enum Py_tp_setattr = 68;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_setattr); }))) {
            mixin(enumMixinStr_Py_tp_setattr);
        }
    }
    
    #ifdef Py_tp_setattro
    
    #endif
    static if(!is(typeof(Py_tp_setattro))) {
        private enum enumMixinStr_Py_tp_setattro = `enum Py_tp_setattro = 69;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_setattro); }))) {
            mixin(enumMixinStr_Py_tp_setattro);
        }
    }
    
    #ifdef Py_tp_str
    
    #endif
    static if(!is(typeof(Py_tp_str))) {
        private enum enumMixinStr_Py_tp_str = `enum Py_tp_str = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_str); }))) {
            mixin(enumMixinStr_Py_tp_str);
        }
    }
    
    #ifdef Py_tp_traverse
    
    #endif
    static if(!is(typeof(Py_tp_traverse))) {
        private enum enumMixinStr_Py_tp_traverse = `enum Py_tp_traverse = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_traverse); }))) {
            mixin(enumMixinStr_Py_tp_traverse);
        }
    }
    
    #ifdef Py_tp_members
    
    #endif
    static if(!is(typeof(Py_tp_members))) {
        private enum enumMixinStr_Py_tp_members = `enum Py_tp_members = 72;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_members); }))) {
            mixin(enumMixinStr_Py_tp_members);
        }
    }
    
    #ifdef Py_tp_getset
    
    #endif
    static if(!is(typeof(Py_tp_getset))) {
        private enum enumMixinStr_Py_tp_getset = `enum Py_tp_getset = 73;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_getset); }))) {
            mixin(enumMixinStr_Py_tp_getset);
        }
    }
    
    #ifdef Py_tp_free
    
    #endif
    static if(!is(typeof(Py_tp_free))) {
        private enum enumMixinStr_Py_tp_free = `enum Py_tp_free = 74;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_free); }))) {
            mixin(enumMixinStr_Py_tp_free);
        }
    }
    
    #ifdef Py_nb_matrix_multiply
    
    #endif
    static if(!is(typeof(Py_nb_matrix_multiply))) {
        private enum enumMixinStr_Py_nb_matrix_multiply = `enum Py_nb_matrix_multiply = 75;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_matrix_multiply); }))) {
            mixin(enumMixinStr_Py_nb_matrix_multiply);
        }
    }
    
    #ifdef Py_nb_inplace_matrix_multiply
    
    #endif
    static if(!is(typeof(Py_nb_inplace_matrix_multiply))) {
        private enum enumMixinStr_Py_nb_inplace_matrix_multiply = `enum Py_nb_inplace_matrix_multiply = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_nb_inplace_matrix_multiply); }))) {
            mixin(enumMixinStr_Py_nb_inplace_matrix_multiply);
        }
    }
    
    #ifdef Py_am_await
    
    #endif
    static if(!is(typeof(Py_am_await))) {
        private enum enumMixinStr_Py_am_await = `enum Py_am_await = 77;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_am_await); }))) {
            mixin(enumMixinStr_Py_am_await);
        }
    }
    
    #ifdef Py_am_aiter
    
    #endif
    static if(!is(typeof(Py_am_aiter))) {
        private enum enumMixinStr_Py_am_aiter = `enum Py_am_aiter = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_am_aiter); }))) {
            mixin(enumMixinStr_Py_am_aiter);
        }
    }
    
    #ifdef Py_am_anext
    
    #endif
    static if(!is(typeof(Py_am_anext))) {
        private enum enumMixinStr_Py_am_anext = `enum Py_am_anext = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_am_anext); }))) {
            mixin(enumMixinStr_Py_am_anext);
        }
    }
    
    #ifdef Py_tp_finalize
    
    #endif
    static if(!is(typeof(Py_tp_finalize))) {
        private enum enumMixinStr_Py_tp_finalize = `enum Py_tp_finalize = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_tp_finalize); }))) {
            mixin(enumMixinStr_Py_tp_finalize);
        }
    }
    
    #define Py_UNICODEOBJECT_H 

    

    


    static if(!is(typeof(Py_UNICODE_SIZE))) {
        private enum enumMixinStr_Py_UNICODE_SIZE = `enum Py_UNICODE_SIZE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_Py_UNICODE_SIZE); }))) {
            mixin(enumMixinStr_Py_UNICODE_SIZE);
        }
    }
    
    #define Py_UNICODE_WIDE 

    

    

    


    static if(!is(typeof(Py_UNICODE_REPLACEMENT_CHARACTER))) {
        private enum enumMixinStr_Py_UNICODE_REPLACEMENT_CHARACTER = `enum Py_UNICODE_REPLACEMENT_CHARACTER = ( cast( Py_UCS4 ) 0xFFFD );`;
        static if(is(typeof({ mixin(enumMixinStr_Py_UNICODE_REPLACEMENT_CHARACTER); }))) {
            mixin(enumMixinStr_Py_UNICODE_REPLACEMENT_CHARACTER);
        }
    }
    
    #define PyUnicode_CHECK_INTERNED( op ) ( ( cast( PyASCIIObject * ) ( op ) ) . state . interned )

    

    

    

    

    

    

    

    

    

}


struct _dictkeysobject;
struct __va_list_tag;







enum isPython3 = is(PyModuleDef);
enum isPython2 = !isPython3;






enum MethodArgs {
    Var = 0x0001,
    Keywords = 0x0002,
    Static = 0x0020,
    None = 0x0004,
    O = 0x0008,
}

enum MemberType {
    Short = 0,
    Int = 1,
    Long = 2,
    Float = 3,
    Double = 4,
    String = 5,
    Object = 6,
    ObjectEx = 16,
    Char = 7,
    Byte = 8,
    UByte = 9,
    UInt = 11,
    UShort = 10,
    ULong = 12,
    Bool = 14,
    LongLong = 17,
    ULongLong = 18,
    PySSizeT = 19,
}

enum TypeFlags {
    BaseType = ( 1UL << 10 ),
    Default = ( 0 | ( 1UL << 18 ) | 0 ),
}


// Demacroify
mixin template PyObjectHead() {
    import python.raw: PyObject, Py_ssize_t, isPython2;
    static if(isPython2)
        import python.raw: _typeobject;
    PyObject ob_base ;;
}

// Demacroify
alias ModuleInitRet = PyObject *;


// Demacroify for Python2
static if(isPython2) {

    auto pyInitModule(const(char)* name, PyMethodDef* methods) {
        return Py_InitModule(name, methods);
    }
}


// Demacroify for Python3
static if(isPython3) {
    auto pyModuleCreate(PyModuleDef* moduleDef) @nogc nothrow {
        return PyModule_Create(moduleDef);
    }
}


// Demacroify
bool pyIterCheck(PyObject* obj) @nogc nothrow {
    return PyIter_Check(obj);
}

// Demacroify
bool pyListCheck(PyObject* obj) @nogc nothrow {
    return PyType_FastSubclass ( ( _PyObject_CAST ( obj ) . ob_type ) , ( 1UL << 25 ) );
}


// Demacroify
bool pyTupleCheck(PyObject* obj) @nogc nothrow {
    return PyType_FastSubclass ( ( _PyObject_CAST ( obj ) . ob_type ) , ( 1UL << 26 ) );
}


// Demacroify
bool pyDictCheck(PyObject *obj) @nogc nothrow {
    return PyType_FastSubclass ( ( _PyObject_CAST ( obj ) . ob_type ) , ( 1UL << 29 ) );
}

// Demacroify
bool pyBoolCheck(PyObject *obj) @nogc nothrow {
    return PyBool_Check(obj);
}

// Demacroify
bool pyUnicodeCheck(PyObject* obj) @nogc nothrow {
    return PyType_FastSubclass ( ( _PyObject_CAST ( obj ) . ob_type ) , ( 1UL << 28 ) );
}

bool pyNumberCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) PyNumber_Check(obj);
}

bool pyIntCheck(PyObject* obj) @nogc nothrow {
    static if(isPython3)
        return pyLongCheck(obj);
    else static if(isPython2)
        return PyInt_Check(obj);
    else
        static assert(false);
}

bool pyLongCheck(PyObject* obj) @nogc nothrow {
    return PyLong_Check(obj);
}

bool pyFloatCheck(PyObject* obj) @nogc nothrow {
    return PyObject_TypeCheck ( obj , & PyFloat_Type );
}

bool pyDateTimeCheck(PyObject* obj) @nogc nothrow {
    return PyObject_TypeCheck ( obj , PyDateTimeAPI . DateTimeType );
}

bool pyDateCheck(PyObject* obj) @nogc nothrow {
    return PyDate_Check(obj);
}

bool pyCallableCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) PyCallable_Check(obj);
}

bool pyIndexCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) ( ( obj ) . ob_type . tp_as_number != null && ( obj ) . ob_type . tp_as_number . nb_index != null );
}

bool pySliceCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) PySlice_Check(obj);
}

bool pySequenceCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) PySequence_Check(obj);
}

bool pyMappingCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) PyMapping_Check(obj);
}

bool pyBytesCheck(PyObject* obj) @nogc nothrow {
    return cast(bool) PyType_FastSubclass ( ( _PyObject_CAST ( obj ) . ob_type ) , ( 1UL << 27 ) );
}


// Demacroify
auto pyTrue() {
    return ( cast( PyObject * ) & _Py_TrueStruct );
}

// Demacroify
auto pyFalse() {
    return ( cast( PyObject * ) & _Py_FalseStruct );
}


// Demacroify
void pyIncRef(PyObject* obj) @nogc nothrow {
    // had to hand translate due to static inline C function
    obj.ob_refcnt++;
}

// Demacroify
void pyDecRef(PyObject* obj) @nogc nothrow {
    // FIXME: d++ can't translate this due to `;` for an empty statement
    // Py_DECREF(obj);
}

// Demacroify
auto pyNone() @nogc nothrow {
    return ( & _Py_NoneStruct );
}

auto pyUnicodeDecodeUTF8(const(char)* str, c_long length, const(char)* errors = null) @nogc nothrow {
    return PyUnicode_DecodeUTF8(str, length, errors);
}

auto pyUnicodeAsUtf8String(PyObject* obj) @nogc nothrow {
    return PyUnicode_AsUTF8String(obj);
}

auto pyBytesAsString(PyObject* obj) @nogc nothrow {
    return PyBytes_AsString(obj);
}

auto pyObjectUnicode(PyObject* obj) @nogc nothrow {
    static if(isPython2)
        return PyObject_Unicode(obj);
    else
        return obj;
}

auto pyUnicodeGetSize(PyObject* obj) @nogc nothrow {
    return PyUnicode_GetSize(obj);
}

auto pyUnicodeFromStringAndSize(const(char)* ptr, Py_ssize_t size) {
    return PyUnicode_FromStringAndSize(ptr, size);
}

auto pyObjectNew(T)(PyTypeObject* typeobj) {
    return cast(T*) _PyObject_New(typeobj);
}


// Demacroify
void pyDateTimeImport() @nogc nothrow {
    PyDateTimeAPI = cast( PyDateTime_CAPI * ) PyCapsule_Import ( "datetime.datetime_CAPI" , 0 );
}

auto pyDateTimeYear(PyObject* obj) @nogc nothrow {
    return PyDateTime_GET_YEAR(obj);
}

auto pyDateTimeMonth(PyObject* obj) @nogc nothrow {
    return ( ( cast( PyDateTime_Date * ) obj ) . data [ 2 ] );
}

auto pyDateTimeDay(PyObject* obj) @nogc nothrow {
    return ( ( cast( PyDateTime_Date * ) obj ) . data [ 3 ] );
}

auto pyDateTimeHour(PyObject* obj) @nogc nothrow {
    return ( ( cast( PyDateTime_DateTime * ) obj ) . data [ 4 ] );
}

auto pyDateTimeMinute(PyObject* obj) @nogc nothrow {
    return ( ( cast( PyDateTime_DateTime * ) obj ) . data [ 5 ] );
}

auto pyDateTimeSecond(PyObject* obj) @nogc nothrow {
    return ( ( cast( PyDateTime_DateTime * ) obj ) . data [ 6 ] );
}

auto pyDateTimeUsec(PyObject* obj) @nogc nothrow {
    return ( ( ( cast( PyDateTime_DateTime * ) obj ) . data [ 7 ] << 16 ) | ( ( cast( PyDateTime_DateTime * ) obj ) . data [ 8 ] << 8 ) | ( cast( PyDateTime_DateTime * ) obj ) . data [ 9 ] );
}

auto pyDateFromDate(int year, int month, int day) {
    return PyDateTimeAPI . Date_FromDate ( year ,  month ,  day , PyDateTimeAPI . DateType );
}


auto pyDateTimeFromDateAndTime(int year, int month, int day, int hour = 0, int minute = 0, int second = 0, int usec = 0) {
    return PyDateTimeAPI . DateTime_FromDateAndTime ( year ,  month ,  day ,  hour ,  minute ,  second ,  usec , ( & _Py_NoneStruct ) , PyDateTimeAPI . DateTimeType );
}


auto pyDeltaFromDSU(int days, int seconds, int useconds) {
    return PyDateTimeAPI . Delta_FromDelta ( days ,  seconds ,  useconds , 1 , PyDateTimeAPI . DeltaType );
}

1 warning and 10 errors generated.

make: *** [source/python/raw.d] Error 1
Command failed with exit code 2: make -C /Users/david/repos/github/symmetryinvestments/autowrap/pynih source/python/raw.d
